{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/commands/ad/ad-live-command.js","js/commands/ad/ad-status-update-command.js","js/commands/ad/ad-view-state-update-command.js","js/commands/ad/cta/cta-idle-time-command.js","js/commands/ad/cta/cta-previsible-update-command.js","js/commands/ad/cta/cta-visible-update-command.js","js/commands/ad/cta/deaths-to-cta-complete-command.js","js/commands/ad/cta/destroy-cta-model-command.js","js/commands/ad/cta/initialize-cta-model-command.js","js/commands/ad/cta/items-to-cta-complete-command.js","js/commands/ad/hint/destroy-hint-model-command.js","js/commands/ad/hint/initialize-hint-model-command.js","js/commands/ad/hint/reset-hint-visibility-timer-command.js","js/commands/ad/hint/set-hint-visible-command.js","js/commands/ad/hint/update-hint-state-command.js","js/commands/ad/initialize-ad-model-command.js","js/commands/ad/map-ad-status-update-command.js","js/commands/ad/pcta/destroy-persistent-cta-model-command.js","js/commands/ad/pcta/initialize-persistent-cta-model-command.js","js/commands/ad/reset-time-command.js","js/commands/ad/set-ad-status-command.js","js/commands/ad/set-last-interaction-command.js","js/commands/ad/sound/destroy-sound-model-command.js","js/commands/ad/sound/initialize-sound-model-command.js","js/commands/ad/sound/set-sound-state-command.js","js/commands/ad/tutorial/complete-tutorial-sequence-command.js","js/commands/ad/tutorial/destroy-tutorial-model-command.js","js/commands/ad/tutorial/initialize-tutorial-model-command.js","js/commands/ad/tutorial/next-tutorial-sequence-command.js","js/commands/ad/tutorial/set-tutorial-complete-command.js","js/commands/ad/tutorial/tutorial-complete-command.js","js/commands/ad/tutorial/tutorial-screen-click-command.js","js/commands/ad/tutorial/tutorial-sequence-view-complete-command.js","js/commands/game-init-command.js","js/commands/game-shut-down-command.js","js/commands/game-start-command.js","js/commands/game/create-level-command.js","js/commands/game/destroy-game-model-command.js","js/commands/game/destroy-level-command.js","js/commands/game/hide-loot-box-command.js","js/commands/game/initialize-game-model-command.js","js/commands/game/level/activate-next-trace-command.js","js/commands/game/level/activate-orb-command.js","js/commands/game/level/cooldown-command.js","js/commands/game/level/deactivate-current-trace-command.js","js/commands/game/level/level-created-command.js","js/commands/game/level/level-destroyed-command.js","js/commands/game/level/level-lose-command.js","js/commands/game/level/level-restart-command.js","js/commands/game/level/level-restarted-command.js","js/commands/game/level/level-showed-command.js","js/commands/game/level/on-level-lose-command.js","js/commands/game/level/on-level-state-update-command.js","js/commands/game/level/on-level-win-command.js","js/commands/game/level/on-orb-activated-command.js","js/commands/game/level/on-orbs-collision-start-command.js","js/commands/game/map-playable-commands-command.js","js/commands/game/on-game-state-update-command.js","js/commands/game/unmap-playable-commands-command.js","js/commands/game/update-current-level-command.js","js/commands/initialize-models-command.js","js/commands/observants/initialize-analytics-observant-command.js","js/commands/observants/initialize-sound-observant-command.js","js/commands/observants/initialize-wrapper-observant-command.js","js/commands/player/destroy-player-model-command.js","js/commands/player/initialize-player-model-command.js","js/commands/player/update-lives-command.js","js/commands/resize-command.js","js/commands/retry-command.js","js/commands/shutdown-models-command.js","js/commands/startup-command.js","js/commands/states/initialize-phaser-states-command.js","js/commands/states/restart-game-state-command.js","js/commands/states/start-game-state-command.js","js/commands/view/initialize-ninepatches-command.js","js/commands/view/initialize-particles-command.js","js/commands/view/on-level-created-command.js","js/commands/view/on-level-destroyed-command.js","js/commands/view/on-level-view-hide-complete-command.js","js/commands/view/on-level-view-restart-complete-command.js","js/commands/view/on-level-view-show-complete-command.js","js/commands/view/on-loot-box-click-command.js","js/commands/view/on-no-hint-place-command.js","js/commands/view/on-orbs-drop-complete-command.js","js/commands/view/on-screen-click-command.js","js/commands/view/patch-text-for-localization-command.js","js/commands/view/user-interaction-command.js","js/configs/animation-configs.js","js/configs/button-configs.js","js/configs/game-config.js","js/configs/grid-configs.js","js/configs/grid/background-grid-configs.js","js/configs/grid/cta-grid-configs.js","js/configs/grid/foreground-grid-configs.js","js/configs/grid/game-grid-configs.js","js/configs/grid/main-grid-configs.js","js/configs/grid/ui-grid-configs.js","js/configs/image-configs.js","js/configs/lego-config.js","js/configs/ninepatch-configs.js","js/configs/particles-configs.js","js/configs/spine-configs.js","js/configs/text-configs.js","js/configs/tutorial-config.js","js/constants.js","js/display/font-loader.js","js/display/layout-utils.js","js/display/lu/layout-utils-compact.js","js/display/lu/layout-utils-general.js","js/events/model-events.js","js/events/view-events.js","js/guards/ad/ad-live-guard.js","js/guards/ad/asec-guard.js","js/guards/ad/cta-model-guard.js","js/guards/ad/cta-previsible-guard.js","js/guards/ad/cta-visible-guard.js","js/guards/ad/hint-model-guard.js","js/guards/ad/hint-param-guard.js","js/guards/ad/persistent-cta-model-guard.js","js/guards/ad/persistent-cta-param-guard.js","js/guards/ad/sound-param-guard.js","js/guards/ad/tutorial-model-guard.js","js/guards/ad/tutorial-param-guard.js","js/guards/game/game-hide-loot-state-guard.js","js/guards/game/game-model-guard.js","js/guards/game/game-show-loot-state-guard.js","js/guards/game/level/last-level-guard.js","js/guards/game/level/last-trace-guard.js","js/guards/game/level/level-result-lose-state-guard.js","js/guards/game/level/level-result-win-state-guard.js","js/guards/player/no-lives-guard.js","js/guards/player/player-model-guard.js","js/kernel/atlas-rescale.js","js/kernel/globals.js","js/kernel/multiple-atlas.js","js/lib/particle-storm.js","js/main.js","js/models/ad/ad-model.js","js/models/ad/cta-model.js","js/models/ad/hint-model.js","js/models/ad/load-model.js","js/models/ad/persistent-cta-model.js","js/models/ad/sound-model.js","js/models/ad/tutorial-model.js","js/models/ad/tutorial-sequence-model.js","js/models/game/game-model.js","js/models/game/level/level-model.js","js/models/game/level/orb-model.js","js/models/game/level/trace-model.js","js/models/observable-model.js","js/models/player/player-model.js","js/models/store.js","js/module-bindings.js","js/objects/background/background-view.js","js/objects/cta/cta-embedded.js","js/objects/cta/cta-module.js","js/objects/cta/cta-standard.js","js/objects/cta/cta-view.js","js/objects/foreground/foreground-view.js","js/objects/foreground/hint-view.js","js/objects/foreground/logo-view.js","js/objects/foreground/sound-view.js","js/objects/foreground/tutorial-sequence-view.js","js/objects/foreground/tutorial-view.js","js/objects/game/game-view.js","js/objects/game/level/hexagon-component.js","js/objects/game/level/level-view.js","js/objects/game/level/metronome-component.js","js/objects/game/level/orb-component.js","js/objects/game/level/trace-view.js","js/objects/game/level/win-star.js","js/objects/game/loot-box-view.js","js/objects/main-view.js","js/objects/ui/persistent-cta-view.js","js/objects/ui/ui-view.js","js/observants/analytics-observant.js","js/observants/sound-observant.js","js/observants/wrapper-observant.js","js/states/game-state.js","js/states/preloader-state.js","js/strings.js","js/utils/array/sample.js","js/utils/button/button.js","js/utils/button/input-handler.js","js/utils/container.js","js/utils/game/move-functions.js","js/utils/index.js","js/utils/object/object-keys.js","js/utils/resizable-phaser2-grid.js","js/utils/tween/universal-tween.js","node_modules/@armathai/grid-core/lib/Cell.js","node_modules/@armathai/grid-core/lib/Types.js","node_modules/@armathai/grid-core/lib/index.js","node_modules/@armathai/grid-core/lib/utils/Utils.js","node_modules/@armathai/grid-core/lib/utils/geom/Point.js","node_modules/@armathai/grid-core/lib/utils/geom/Rect.js","node_modules/@armathai/lego/lib/Command.js","node_modules/@armathai/lego/lib/Emitter.js","node_modules/@armathai/lego/lib/Lego.js","node_modules/@armathai/lego/lib/Observe.js","node_modules/@armathai/lego/lib/index.js","node_modules/@armathai/lego/lib/utils/Map.js","node_modules/@armathai/lego/lib/utils/Utils.js","node_modules/@armathai/phaser2-grid/lib/Debugger.js","node_modules/@armathai/phaser2-grid/lib/Phaser2Grid.js","node_modules/@armathai/phaser2-grid/lib/index.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatch.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatchPlugin.js","node_modules/@armathai/phaser2-ninepatch/lib/index.js","node_modules/webfontloader/webfontloader.js"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrGA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"creative.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { lego } from '@armathai/lego';\nimport { startGameStateCommand } from '../states/start-game-state-command';\n\nexport function adLiveCommand() {\n  lego.command.execute(startGameStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../constants';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../../guards/ad/persistent-cta-model-guard';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { gameModelGuard } from '../../guards/game/game-model-guard';\nimport { destroyGameModelCommand } from '../game/destroy-game-model-command';\nimport { mapPlayableCommandsCommand } from '../game/map-playable-commands-command';\nimport { unmapPlayableCommandsCommand } from '../game/unmap-playable-commands-command';\nimport { initializeModelsCommand } from '../initialize-models-command';\nimport { restartGameStateCommand } from '../states/restart-game-state-command';\nimport { destroyHintModelCommand } from './hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './pcta/destroy-persistent-cta-model-command';\nimport { destroyTutorialModelCommand } from './tutorial/destroy-tutorial-model-command';\n\nexport function adStatusUpdateCommand(status) {\n  switch (status) {\n    case AdStatus.Game:\n      lego.command.execute(mapPlayableCommandsCommand, initializeModelsCommand);\n      break;\n\n    case AdStatus.Restart:\n      lego.command.execute(restartGameStateCommand);\n      break;\n\n    case AdStatus.PreCta:\n      lego.command\n        .execute(unmapPlayableCommandsCommand)\n\n        .guard(tutorialModelGuard)\n        .execute(destroyTutorialModelCommand)\n\n        .guard(hintModelGuard)\n        .execute(destroyHintModelCommand);\n      break;\n\n    case AdStatus.Cta:\n      lego.command\n        .guard(gameModelGuard)\n        .execute(destroyGameModelCommand)\n\n        .guard(persistentCtaModelGuard)\n        .execute(destroyPersistentCtaModelCommand);\n\n      break;\n\n    case AdStatus.Retry:\n      //\n      break;\n    default:\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState } from '../../constants';\nimport { gameInitCommand } from '../game-init-command';\nimport { gameShutDownCommand } from '../game-shut-down-command';\nimport { gameStartCommand } from '../game-start-command';\n\nexport function adViewStateUpdateCommand(state) {\n  switch (state) {\n    case AdViewState.Init:\n      lego.command.execute(gameInitCommand);\n      break;\n\n    case AdViewState.Create:\n      lego.command.execute(gameStartCommand);\n      break;\n\n    case AdViewState.ShutDown:\n      lego.command.execute(gameShutDownCommand);\n      break;\n    default:\n  }\n}\n","import { GameOverReasons } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function ctaIdleTimeCommand() {\n  const delay = CI_API.Globals.PARAMS.cta_scrn_version === 'embedded' ? 0 : 400;\n  store.ad.cta.show(GameOverReasons.Idled, delay);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { ctaPreVisibleGuard } from '../../../guards/ad/cta-previsible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaPreVisibleUpdateCommand(preVisible) {\n  lego.command\n    .guard(ctaPreVisibleGuard)\n    .payload(AdStatus.PreCta)\n    .execute(setAdStatusCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { adLiveGuard } from '../../../guards/ad/ad-live-guard';\nimport { asecGuard } from '../../../guards/ad/asec-guard';\nimport { ctaVisibleGuard } from '../../../guards/ad/cta-visible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaVisibleUpdateCommand(visible) {\n  lego.command\n    .guard(ctaVisibleGuard, adLiveGuard, not(asecGuard))\n    .payload(AdStatus.Cta)\n    .execute(setAdStatusCommand)\n\n    .guard(ctaVisibleGuard, not(adLiveGuard))\n    .payload(AdStatus.Restart)\n    .execute(setAdStatusCommand);\n}\n","import { GameOverReasons } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function deathsToCtaCompleteCommand() {\n  store.ad.cta.show(GameOverReasons.DeathsToCtaReached, 1000);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyCtaModelCommand() {\n  store.ad.destroyCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeCtaModelCommand() {\n  store.ad.initializeCtaModel();\n}\n","import { GameOverReasons } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function itemsToCtaCompleteCommand() {\n  store.ad.cta.show(GameOverReasons.ItemsToCtaReached, 2000);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyHintModelCommand() {\n  store.ad.destroyHintModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeHintModelCommand() {\n  store.ad.initializeHintModel();\n}\n","import { store } from '../../../models/store';\n\nexport function resetHintVisibilityTimerCommand() {\n  store.ad.hint.resetVisibilityTimer();\n}\n","import { store } from '../../../models/store';\n\nexport function setHintVisibleCommand(value) {\n  store.ad.hint.visible = value;\n}\n","import { lego } from '@armathai/lego';\nimport { resetHintVisibilityTimerCommand } from './reset-hint-visibility-timer-command';\nimport { setHintVisibleCommand } from './set-hint-visible-command';\n\nexport function updateHintStateCommand() {\n  lego.command\n    .payload(false)\n    .execute(setHintVisibleCommand)\n\n    .execute(resetHintVisibilityTimerCommand);\n}\n","import { store } from '../../models/store';\n\nexport function initializeAdModelCommand() {\n  store.initializeADModel();\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../events/model-events';\nimport { adStatusUpdateCommand } from './ad-status-update-command';\n\nexport function mapAdStatusUpdateCommand() {\n  lego.command\n    .off(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand)\n    .on(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyPersistentCtaModelCommand() {\n  store.ad.destroyPersistentCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializePersistentCtaModelCommand() {\n  store.ad.initializePersistentCtaModel();\n}\n","export function resetTimeCommand() {\n  CI_API.game.time.reset();\n}\n","import { store } from '../../models/store';\n\nexport function setAdStatusCommand(status) {\n  store.ad.status = status;\n}\n","import Globals from '../../kernel/globals';\n\nexport function setLastInteractionCommand(value) {\n  Globals.LAST_INTERACTION_TIME = value;\n}\n","import { store } from '../../../models/store';\n\nexport function destroySoundModelCommand() {\n  store.ad.destroySoundModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeSoundModelCommand() {\n  store.ad.initializeSoundModel();\n}\n","import { store } from '../../../models/store';\n\nexport function setSoundStateCommand(value) {\n  store.ad.sound.state = value;\n}\n","import { store } from '../../../models/store';\n\nexport function completeTutorialSequenceCommand() {\n  store.ad.tutorial.completeSequence();\n}\n","import { store } from '../../../models/store';\n\nexport function destroyTutorialModelCommand() {\n  store.ad.destroyTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeTutorialModelCommand() {\n  store.ad.initializeTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function nextTutorialSequenceCommand() {\n  store.ad.tutorial.nextSequence();\n}\n","import { store } from '../../../models/store';\n\nexport function setTutorialCompleteCommand() {\n  store.ad.tutorial.complete = true;\n}\n","import { lego } from '@armathai/lego';\nimport { destroyTutorialModelCommand } from './destroy-tutorial-model-command';\n\nexport function tutorialCompleteCommand() {\n  lego.command.execute(destroyTutorialModelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { completeTutorialSequenceCommand } from './complete-tutorial-sequence-command';\n\nexport function tutorialScreenClickCommand() {\n  lego.command.execute(completeTutorialSequenceCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../../models/store';\nimport { nextTutorialSequenceCommand } from './next-tutorial-sequence-command';\nimport { setTutorialCompleteCommand } from './set-tutorial-complete-command';\n\nexport function tutorialSequenceViewCompleteCommand() {\n  const { sequences } = store.ad.tutorial;\n\n  switch (sequences.length) {\n    case 0:\n      lego.command.execute(setTutorialCompleteCommand);\n      break;\n    default:\n      lego.command.execute(nextTutorialSequenceCommand);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { resetTimeCommand } from './ad/reset-time-command';\n\nexport function gameInitCommand() {\n  lego.command.execute(resetTimeCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\nimport { setLastInteractionCommand } from './ad/set-last-interaction-command';\nimport { unmapPlayableCommandsCommand } from './game/unmap-playable-commands-command';\nimport { shutdownModelsCommand } from './shutdown-models-command';\n\nexport function gameShutDownCommand() {\n  lego.command\n    .execute(unmapPlayableCommandsCommand)\n\n    .execute(shutdownModelsCommand)\n\n    .payload(0)\n    .execute(setLastInteractionCommand)\n\n    .payload(AdStatus.Unknown)\n    .execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { mapAdStatusUpdateCommand } from './ad/map-ad-status-update-command';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\n\nexport function gameStartCommand() {\n  lego.command\n    .execute(mapAdStatusUpdateCommand)\n\n    .payload(AdStatus.Game)\n    .execute(setAdStatusCommand);\n}\n","import { store } from '../../models/store';\n\nexport function createLevelCommand(id) {\n  store.game.createLevel(id, 2000);\n}\n","import { store } from '../../models/store';\n\nexport function destroyGameModelCommand() {\n  store.destroyGameModel();\n}\n","import { store } from '../../models/store';\n\nexport function destroyLevelCommand() {\n  store.game.destroyLevel();\n}\n","import { store } from '../../models/store';\n\nexport function hideLootBoxCommand() {\n  store.game.hideLootBox();\n}\n","import { store } from '../../models/store';\n\nexport function initializeGameModelCommand() {\n  store.initializeGameModel();\n}\n","import { store } from '../../../models/store';\n\nexport function activateNextTraceCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.activateNextTrace();\n}\n","import { store } from '../../../models/store';\n\nexport function activateOrbCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.activateOrb();\n}\n","import { store } from '../../../models/store';\n\nexport function cooldownCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.cooldown();\n}\n","import { store } from '../../../models/store';\n\nexport function deactivateCurrentTraceCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.deactivateCurrentTrace();\n}\n","import { store } from '../../../models/store';\n\nexport function levelCreatedCommand(levelId) {\n  store.game.levelCreated();\n}\n","import { store } from '../../../models/store';\n\nexport function levelDestroyedCommand() {\n  store.game.levelDestroyed();\n}\n","import { store } from '../../../models/store';\n\nexport function levelLoseCommand() {\n  store.game.currentLevel.levelLose();\n}\n","import { store } from '../../../models/store';\n\nexport function levelRestartCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.restart();\n}\n","import { store } from '../../../models/store';\n\nexport function levelRestartedCommand(levelId) {\n  const level = store.game.getLevelById(levelId);\n  level.restarted();\n}\n","import { store } from '../../../models/store';\n\nexport function levelShowedCommand(levelId) {\n  const level = store.game.getLevelById(levelId);\n  level.showed();\n}\n","import { lego } from '@armathai/lego';\nimport { updateLivesCommand } from '../../player/update-lives-command';\n\nexport function onLevelLoseCommand() {\n  lego.command.execute(updateLivesCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { levelResultLoseStateGuard } from '../../../guards/game/level/level-result-lose-state-guard';\nimport { levelResultWinStateGuard } from '../../../guards/game/level/level-result-win-state-guard';\nimport { onLevelLoseCommand } from './on-level-lose-command';\nimport { onLevelWinCommand } from './on-level-win-command';\n\nexport function onLevelStateUpdateCommand(state) {\n  lego.command\n    .guard(levelResultWinStateGuard)\n    .execute(onLevelWinCommand)\n\n    .guard(levelResultLoseStateGuard)\n    .execute(onLevelLoseCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { lastLevelGuard } from '../../../guards/game/level/last-level-guard';\nimport { itemsToCtaCompleteCommand } from '../../ad/cta/items-to-cta-complete-command';\nimport { updateCurrentLevelCommand } from '../update-current-level-command';\n\nexport function onLevelWinCommand() {\n  lego.command\n    .guard(lastLevelGuard)\n    .execute(itemsToCtaCompleteCommand)\n\n    .guard(not(lastLevelGuard))\n    .execute(updateCurrentLevelCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function onOrbActivatedCommand() {\n  const { currentLevel } = store.game;\n  currentLevel.orbActivated();\n}\n","import { lego } from '@armathai/lego';\nimport { levelLoseCommand } from './level-lose-command';\n\nexport function onOrbsCollisionStartCommand() {\n  lego.command.execute(levelLoseCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function mapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.on(entry.event, entry.command));\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { gameHideLootStateGuard } from '../../guards/game/game-hide-loot-state-guard';\nimport { updateHintStateCommand } from '../ad/hint/update-hint-state-command';\n\nexport function onGameStateUpdateCommand(state) {\n  lego.command.guard(hintModelGuard, gameHideLootStateGuard).execute(updateHintStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function unmapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.off(entry.event, entry.command));\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../models/store';\nimport { createLevelCommand } from './create-level-command';\n\nexport function updateCurrentLevelCommand() {\n  const { currentLevelId } = store.game;\n\n  lego.command.payload(currentLevelId + 1).execute(createLevelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { hintParamGuard } from '../guards/ad/hint-param-guard';\nimport { persistentCtaParamGuard } from '../guards/ad/persistent-cta-param-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { tutorialParamGuard } from '../guards/ad/tutorial-param-guard';\nimport { initializeCtaModelCommand } from './ad/cta/initialize-cta-model-command';\nimport { initializeHintModelCommand } from './ad/hint/initialize-hint-model-command';\nimport { initializePersistentCtaModelCommand } from './ad/pcta/initialize-persistent-cta-model-command';\nimport { initializeSoundModelCommand } from './ad/sound/initialize-sound-model-command';\nimport { initializeTutorialModelCommand } from './ad/tutorial/initialize-tutorial-model-command';\nimport { initializeGameModelCommand } from './game/initialize-game-model-command';\nimport { initializePlayerModelCommand } from './player/initialize-player-model-command';\n\nexport function initializeModelsCommand() {\n  lego.command\n    .execute(initializePlayerModelCommand)\n\n    .execute(initializeGameModelCommand)\n\n    .execute(initializeCtaModelCommand)\n\n    .guard(soundParamGuard)\n    .execute(initializeSoundModelCommand)\n\n    .guard(hintParamGuard)\n    .execute(initializeHintModelCommand)\n\n    .guard(tutorialParamGuard)\n    .execute(initializeTutorialModelCommand)\n\n    .guard(persistentCtaParamGuard)\n    .execute(initializePersistentCtaModelCommand);\n}\n","import { AnalyticsObservant } from '../../observants/analytics-observant';\n\nexport function initializeAnalyticsObservantCommand() {\n  new AnalyticsObservant();\n}\n","import { SoundObservant } from '../../observants/sound-observant';\n\nexport function initializeSoundObservantCommand() {\n  new SoundObservant();\n}\n","import { WrapperObservant } from '../../observants/wrapper-observant';\n\nexport function initializeWrapperObservantCommand() {\n  new WrapperObservant();\n}\n","import { store } from '../../models/store';\n\nexport function destroyPlayerModelCommand() {\n  store.destroyPlayerModel();\n}\n","import { store } from '../../models/store';\n\nexport function initializePlayerModelCommand() {\n  store.initializePlayerModel();\n}\n","import { store } from '../../models/store';\n\nexport function updateLivesCommand() {\n  const { lives } = store.player;\n  store.player.updateLives(lives - 1);\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from './ad/hint/update-hint-state-command';\n\nexport function resizeCommand() {\n  lego.command.guard(hintModelGuard).execute(updateHintStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\n\nexport function retryCommand() {\n  lego.command.payload(AdStatus.Retry).execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { ctaModelGuard } from '../guards/ad/cta-model-guard';\nimport { hintModelGuard } from '../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../guards/ad/persistent-cta-model-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { tutorialModelGuard } from '../guards/ad/tutorial-model-guard';\nimport { gameModelGuard } from '../guards/game/game-model-guard';\nimport { playerModelGuard } from '../guards/player/player-model-guard';\nimport { destroyCtaModelCommand } from './ad/cta/destroy-cta-model-command';\nimport { destroyHintModelCommand } from './ad/hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './ad/pcta/destroy-persistent-cta-model-command';\nimport { destroySoundModelCommand } from './ad/sound/destroy-sound-model-command';\nimport { destroyTutorialModelCommand } from './ad/tutorial/destroy-tutorial-model-command';\nimport { destroyGameModelCommand } from './game/destroy-game-model-command';\nimport { destroyPlayerModelCommand } from './player/destroy-player-model-command';\n\nexport function shutdownModelsCommand() {\n  lego.command\n    .guard(playerModelGuard)\n    .execute(destroyPlayerModelCommand)\n\n    .guard(gameModelGuard)\n    .execute(destroyGameModelCommand)\n\n    .guard(ctaModelGuard)\n    .execute(destroyCtaModelCommand)\n\n    .guard(soundParamGuard)\n    .execute(destroySoundModelCommand)\n\n    .guard(hintModelGuard)\n    .execute(destroyHintModelCommand)\n\n    .guard(tutorialModelGuard)\n    .execute(destroyTutorialModelCommand)\n\n    .guard(persistentCtaModelGuard)\n    .execute(destroyPersistentCtaModelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { adLiveCommand } from './ad/ad-live-command';\nimport { adViewStateUpdateCommand } from './ad/ad-view-state-update-command';\nimport { ctaIdleTimeCommand } from './ad/cta/cta-idle-time-command';\nimport { ctaVisibleUpdateCommand } from './ad/cta/cta-visible-update-command';\nimport { initializeAdModelCommand } from './ad/initialize-ad-model-command';\nimport { setSoundStateCommand } from './ad/sound/set-sound-state-command';\nimport { initializeAnalyticsObservantCommand } from './observants/initialize-analytics-observant-command';\nimport { initializeSoundObservantCommand } from './observants/initialize-sound-observant-command';\nimport { initializeWrapperObservantCommand } from './observants/initialize-wrapper-observant-command';\nimport { resizeCommand } from './resize-command';\nimport { retryCommand } from './retry-command';\nimport { initializePhaserStatesCommand } from './states/initialize-phaser-states-command';\nimport { initializeNinePatchesCommand } from './view/initialize-ninepatches-command';\nimport { initializeParticlesCommand } from './view/initialize-particles-command';\nimport { patchTextForLocalizationCommand } from './view/patch-text-for-localization-command';\nimport { userInteractionCommand } from './view/user-interaction-command';\n\nexport function startupCommand() {\n  lego.command\n\n    .execute(patchTextForLocalizationCommand)\n    .execute(initializeNinePatchesCommand)\n    .execute(initializeParticlesCommand)\n    .execute(initializeAdModelCommand)\n    .execute(initializePhaserStatesCommand)\n    .execute(initializeWrapperObservantCommand)\n    .execute(initializeAnalyticsObservantCommand)\n\n    .guard(soundParamGuard)\n    .execute(initializeSoundObservantCommand)\n\n    .on(ViewEvents.Ad.Live, adLiveCommand)\n    .on(ViewEvents.Game.Resize, resizeCommand)\n    .on(ViewEvents.Game.UserInteraction, userInteractionCommand)\n    .on(ViewEvents.GameState.CtaIdleTime, ctaIdleTimeCommand)\n    .on(ModelEvents.AdModel.ViewStateUpdate, adViewStateUpdateCommand)\n    .on(ViewEvents.SoundView.Click, setSoundStateCommand)\n    .on(ModelEvents.CtaModel.VisibleUpdate, ctaVisibleUpdateCommand)\n    .on(ViewEvents.CtaView.RetryClick, retryCommand);\n}\n","import { PhaserState } from '../../constants';\nimport { GameState } from '../../states/game-state';\nimport { PreloaderState } from '../../states/preloader-state';\n\nexport function initializePhaserStatesCommand() {\n  const { game, states } = CI_API;\n  // @ts-ignore\n  states.preloader = CI_API.game.state.add(PhaserState.Preload, PreloaderState, false);\n  // @ts-ignore\n  states.game = CI_API.game.state.add(PhaserState.Game, GameState, false);\n  game.state.start(PhaserState.Preload);\n}\n","export function restartGameStateCommand() {\n  CI_API.game.state.restart();\n}\n","import { PhaserState } from '../../constants';\n\nexport function startGameStateCommand() {\n  CI_API.game.state.start(PhaserState.Game);\n}\n","import { NinePatchPlugin } from '@armathai/phaser2-ninepatch';\nimport { ninePatches } from '../../configs/ninepatch-configs';\n\nconst addNinePatch = config => {\n  const { key, data } = config;\n  CI_API.game.cache.addNinePatch(key, data);\n};\n\nexport function initializeNinePatchesCommand() {\n  const { game } = CI_API;\n  game.plugins.add(NinePatchPlugin);\n  ninePatches.forEach(ninePatch => addNinePatch(ninePatch));\n}\n","import { particles } from '../../configs/particles-configs';\n\nconst addData = config => {\n  const { key, data } = config;\n  CI_API.game.particleStorm.addData(key, data);\n};\n\nexport function initializeParticlesCommand() {\n  const { game } = CI_API;\n  game.particleStorm = game.plugins.add(Phaser.ParticleStorm);\n  particles.forEach(p => addData(p));\n}\n","import { lego } from '@armathai/lego';\nimport { levelCreatedCommand } from '../game/level/level-created-command';\n\nexport function onLevelCreatedCommand(levelId) {\n  lego.command.payload(levelId).execute(levelCreatedCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { levelDestroyedCommand } from '../game/level/level-destroyed-command';\n\nexport function onLevelDestroyedCommand() {\n  lego.command.execute(levelDestroyedCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { destroyLevelCommand } from '../game/destroy-level-command';\n\nexport function onLevelViewHideCompleteCommand() {\n  lego.command.execute(destroyLevelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { levelRestartedCommand } from '../game/level/level-restarted-command';\n\nexport function onLevelViewRestartCompleteCommand(levelId) {\n  lego.command.payload(levelId).execute(levelRestartedCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { levelShowedCommand } from '../game/level/level-showed-command';\n\nexport function onLevelViewShowCompleteCommand(levelId) {\n  lego.command.payload(levelId).execute(levelShowedCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { gameShowLootStateGuard } from '../../guards/game/game-show-loot-state-guard';\nimport { hideLootBoxCommand } from '../game/hide-loot-box-command';\n\nexport function onLootBoxClickCommand() {\n  lego.command.guard(gameShowLootStateGuard).execute(hideLootBoxCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from '../ad/hint/update-hint-state-command';\n\nexport function onNoHintPlaceCommand() {\n  lego.command.guard(hintModelGuard).execute(updateHintStateCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { noLivesGuard } from '../../guards/player/no-lives-guard';\nimport { deathsToCtaCompleteCommand } from '../ad/cta/deaths-to-cta-complete-command';\nimport { levelRestartCommand } from '../game/level/level-restart-command';\n\nexport function onOrbsDropCompleteCommand() {\n  lego.command\n    .guard(not(noLivesGuard))\n    .execute(levelRestartCommand)\n\n    .guard(noLivesGuard)\n    .execute(deathsToCtaCompleteCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { lastTraceGuard } from '../../guards/game/level/last-trace-guard';\nimport { activateNextTraceCommand } from '../game/level/activate-next-trace-command';\nimport { activateOrbCommand } from '../game/level/activate-orb-command';\nimport { cooldownCommand } from '../game/level/cooldown-command';\nimport { deactivateCurrentTraceCommand } from '../game/level/deactivate-current-trace-command';\n\nexport function onScreenClickCommand() {\n  lego.command\n    .execute(activateOrbCommand, deactivateCurrentTraceCommand)\n\n    .guard(lastTraceGuard)\n    .execute(cooldownCommand)\n\n    .guard(not(lastTraceGuard))\n    .execute(activateNextTraceCommand);\n}\n","export function patchTextForLocalizationCommand() {\n  localization.has = function has(str) {\n    return !!this._strings[str];\n  };\n\n  if (delete Phaser.Text.prototype['_text']) {\n    const localize = (newValue, macros = undefined) => {\n      if (!localization.has(newValue)) {\n        throw Error(`\"${newValue}\" is not localized.`);\n      }\n      return localization.get(newValue, macros);\n    };\n\n    Object.defineProperty(Phaser.Text.prototype, '_text', {\n      get() {\n        return this.__text || '';\n      },\n\n      set(value) {\n        if (typeof value === 'object') {\n          const { text, macros, ignoreLocalization } = value;\n          if (ignoreLocalization) {\n            this.__text = text;\n            return;\n          }\n          this.__text = localize(text, macros);\n          return;\n        }\n\n        if (value.length === 0 || !value.trim()) {\n          this.__text = value;\n          return;\n        }\n\n        this.__text = localize(value);\n      },\n      configurable: true\n    });\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from '../ad/hint/update-hint-state-command';\nimport { setLastInteractionCommand } from '../ad/set-last-interaction-command';\n\nexport function userInteractionCommand() {\n  lego.command\n    .payload(CI_API.game.time.totalElapsedSeconds())\n    .execute(setLastInteractionCommand)\n\n    .guard(hintModelGuard)\n    .execute(updateHintStateCommand);\n}\n","import { ASSETS } from '../constants';\n\nexport const Animations = {\n  Hand: {\n    Click: 'click'\n  },\n  Highlight: {\n    Idle: 'idle'\n  }\n};\n\nexport function getHandAnimationConfig(x, y) {\n  return {\n    key: ASSETS,\n    x,\n    y,\n    data: [\n      {\n        name: Animations.Hand.Click,\n        prefix: 'animations/hand/hand_',\n        start: 1,\n        stop: 3,\n        suffix: '.png',\n        zeroPad: 2,\n        frameRate: 2,\n        loop: true\n      }\n    ]\n  };\n}\n\nexport function getHighlightAnimationConfig(x, y) {\n  return {\n    key: ASSETS,\n    x,\n    y,\n    data: [\n      {\n        name: Animations.Highlight.Idle,\n        prefix: 'animations/highlight/fx_',\n        start: 0,\n        stop: 34,\n        suffix: '.png',\n        zeroPad: 4,\n        frameRate: 60,\n        loop: true\n      }\n    ]\n  };\n}\n","import { InputPriority } from '../constants';\nimport {\n  getCtaEmbeddedPlayButtonPatchConfig,\n  getCtaStandardPlayButtonPatchConfig,\n  getCtaStyle1RetryButtonPatchConfig,\n  getPersistentCtaButtonPatchConfig\n} from './ninepatch-configs';\nimport {\n  getCtaEmbeddedPlayButtonTextConfig,\n  getCtaStandardPlayButtonTextConfig,\n  getPersistentCtaTextConfig\n} from './text-configs';\n\n// PERSISTENT CTA\nexport function getPersistentCtaButtonConfig() {\n  return {\n    input: {\n      name: 'persistent_cta_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getPersistentCtaButtonPatchConfig(),\n        label: getPersistentCtaTextConfig()\n      }\n    }\n  };\n}\n\n// CTA\nexport function getCtaStandardPlayButtonConfig() {\n  return {\n    input: {\n      name: 'cta_play_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getCtaStandardPlayButtonPatchConfig(),\n        label: getCtaStandardPlayButtonTextConfig()\n      }\n    }\n  };\n}\n\nexport function getCtaEmbeddedPlayButtonConfig() {\n  return {\n    input: {\n      name: 'cta_play_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getCtaEmbeddedPlayButtonPatchConfig(),\n        label: getCtaEmbeddedPlayButtonTextConfig()\n      }\n    }\n  };\n}\n\nexport function getCtaStyle1RetryButtonConfig() {\n  return {\n    input: {\n      name: 'cta_retry_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getCtaStyle1RetryButtonPatchConfig(),\n        label: getCtaStyle1RetryButtonTextConfig()\n      }\n    }\n  };\n}\n","export function getGameConfig() {\n  return Object.freeze([\n    {\n      levelId: 1,\n      levelAngle: { l: 0, p: 90 },\n      traces: [\n        {\n          frameActive: 'game/level_1/shape_active.png',\n          framePassive: 'game/level_1/shape_passive.png',\n          angle: 0,\n          x: 0,\n          y: 0,\n          radius: 165,\n          hexagon: { x: -165, y: 0, angle: 0, arrow: { angle: 10 } }\n        },\n        {\n          frameActive: 'game/level_1/shape_active.png',\n          framePassive: 'game/level_1/shape_passive.png',\n          angle: 0,\n          x: 335,\n          y: 0,\n          radius: 165,\n          hexagon: { x: 165, y: 0, angle: 180, arrow: { angle: 10 } }\n        }\n      ],\n      orbs: [{ moveFunction: 'leftCircleMove' }, { moveFunction: 'rightCircleMove' }]\n    },\n    {\n      levelId: 2,\n      levelAngle: { l: 90, p: 0 },\n      traces: [\n        {\n          frameActive: 'game/level_2/shape_active.png',\n          framePassive: 'game/level_2/shape_passive.png',\n          angle: 0,\n          x: 0,\n          y: 0,\n          hexagon: { x: 108, y: -354, angle: -180, arrow: { angle: 10 } }\n        },\n        {\n          frameActive: 'game/level_2/shape_active.png',\n          framePassive: 'game/level_2/shape_passive.png',\n          angle: 180,\n          x: 0,\n          y: 0,\n          hexagon: { x: 108, y: -354, angle: -180, arrow: { angle: 10 } }\n        }\n      ],\n      orbs: [{ moveFunction: 'rightSinusoidalMove' }, { moveFunction: 'leftSinusoidalMove' }]\n    },\n    {\n      levelId: 3,\n      levelAngle: { l: 0, p: 0 },\n      traces: [\n        {\n          frameActive: 'game/level_3/shape_active.png',\n          framePassive: 'game/level_3/shape_passive.png',\n          angle: 0,\n          x: 0,\n          y: 0,\n          hexagon: { x: 0, y: -299, angle: 180, arrow: { angle: 0 } }\n        },\n        {\n          frameActive: 'game/level_3/shape_active.png',\n          framePassive: 'game/level_3/shape_passive.png',\n          angle: 0,\n          x: 100,\n          y: 0,\n          hexagon: { x: 0, y: -299, angle: 180, arrow: { angle: 0 } }\n        },\n        {\n          frameActive: 'game/level_3/shape_active.png',\n          framePassive: 'game/level_3/shape_passive.png',\n          angle: 0,\n          x: 200,\n          y: 0,\n          hexagon: { x: 0, y: -299, angle: 180, arrow: { angle: 0 } }\n        },\n        {\n          frameActive: 'game/level_3/shape_active.png',\n          framePassive: 'game/level_3/shape_passive.png',\n          angle: 0,\n          x: 300,\n          y: 0,\n          hexagon: { x: 0, y: -299, angle: 180, arrow: { angle: 0 } }\n        },\n        {\n          frameActive: 'game/level_3/shape_active.png',\n          framePassive: 'game/level_3/shape_passive.png',\n          angle: 90,\n          x: 150,\n          y: 0,\n          hexagon: { x: 0, y: 299, angle: 0, arrow: { angle: 0 } }\n        }\n      ],\n      orbs: [\n        { moveFunction: 'downLineMove' },\n        { moveFunction: 'downLineMove' },\n        { moveFunction: 'downLineMove' },\n        { moveFunction: 'downLineMove' },\n        { moveFunction: 'rightLineMove' }\n      ]\n    }\n  ]);\n}\n","import { getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig } from './grid/background-grid-configs';\nimport {\n  getCTAEmbeddedGridLandscapeConfig,\n  getCTAEmbeddedGridPortraitConfig,\n  getCTAStandardGridLandscapeConfig,\n  getCTAStandardGridPortraitConfig,\n  getCTAStyle1GridLandscapeConfig,\n  getCTAStyle1GridPortraitConfig\n} from './grid/cta-grid-configs';\nimport { getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig } from './grid/foreground-grid-configs';\nimport { getGameGridLandscapeConfig, getGameGridPortraitConfig } from './grid/game-grid-configs';\nimport { getMainGridLandscapeConfig, getMainGridPortraitConfig } from './grid/main-grid-configs';\nimport { getUIGridLandscapeConfig, getUIGridPortraitConfig } from './grid/ui-grid-configs';\n\nexport function getMainGridConfig() {\n  return LP(getMainGridLandscapeConfig, getMainGridPortraitConfig).call(null);\n}\n\nexport function getForegroundGridConfig() {\n  return LP(getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig).call(null);\n}\n\nexport function getBackgroundGridConfig() {\n  return LP(getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig).call(null);\n}\n\nexport function getUIGridConfig() {\n  return LP(getUIGridLandscapeConfig, getUIGridPortraitConfig).call(null);\n}\n\nexport function getGameGridConfig() {\n  return LP(getGameGridLandscapeConfig, getGameGridPortraitConfig).call(null);\n}\n\nexport function getCTAStyle1GridConfig() {\n  return LP(getCTAStyle1GridLandscapeConfig, getCTAStyle1GridPortraitConfig).call(null);\n}\n\nexport function getCTAStandardGridConfig() {\n  return LP(getCTAStandardGridLandscapeConfig, getCTAStandardGridPortraitConfig).call(null);\n}\n\nexport function getCTAEmbeddedGridConfig() {\n  return LP(getCTAEmbeddedGridLandscapeConfig, getCTAEmbeddedGridPortraitConfig).call(null);\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\n\nexport function getBackgroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'left-top',\n        bounds: { x: 0, y: 0, width: 0.5, height: 0.5 },\n        align: CellAlign.LeftTop\n      },\n      {\n        name: 'left-bottom',\n        bounds: { x: 0, y: 0.5, width: 0.5, height: 0.5 },\n        align: CellAlign.LeftBottom\n      },\n      {\n        name: 'right-top',\n        bounds: { x: 0.5, y: 0, width: 0.5, height: 0.5 },\n        align: CellAlign.RightTop\n      },\n      {\n        name: 'right-bottom',\n        bounds: { x: 0.5, y: 0.5, width: 0.5, height: 0.5 },\n        align: CellAlign.RightBottom\n      }\n    ]\n  };\n}\n\nexport function getBackgroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'left-top',\n        bounds: { x: 0, y: 0, width: 0.5, height: 0.5 },\n        align: CellAlign.LeftTop\n      },\n      {\n        name: 'left-bottom',\n        bounds: { x: 0, y: 0.5, width: 0.5, height: 0.5 },\n        align: CellAlign.LeftBottom\n      },\n      {\n        name: 'right-top',\n        bounds: { x: 0.5, y: 0, width: 0.5, height: 0.5 },\n        align: CellAlign.RightTop\n      },\n      {\n        name: 'right-bottom',\n        bounds: { x: 0.5, y: 0.5, width: 0.5, height: 0.5 },\n        align: CellAlign.RightBottom\n      }\n    ]\n  };\n}\n","import { CellAlign, CellScale } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nexport function getCTAStyle1GridLandscapeConfig() {\n  return {\n    name: 'cta',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n\nexport function getCTAStyle1GridPortraitConfig() {\n  return {\n    name: 'cta',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n\nexport function getCTAStandardGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'cta_standard',\n    cells: [\n      {\n        bounds: { x: 0, y: 0.5, width: 1, height: 0.5 },\n        name: 'title',\n        align: CellAlign.CenterTop,\n        padding: { y: 0.22 }\n      },\n      {\n        name: 'btn',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        padding: { height: 1 - 0.05 },\n        align: CellAlign.CenterBottom\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n\nexport function getCTAStandardGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'cta_standard',\n    cells: [\n      {\n        bounds: { x: 0.5, y: 0, width: 0.5, height: 1 },\n        name: 'title',\n        align: CellAlign.LeftCenter,\n        padding: { x: 0.08 }\n      },\n      {\n        name: 'btn',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        padding: { height: 1 - 0.093 },\n        align: CellAlign.CenterBottom\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n\nexport function getCTAEmbeddedGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'cta_standard',\n    cells: [\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 0.87 },\n        name: 'popup',\n        padding: { y: 0.22 },\n        align: CellAlign.CenterBottom\n      },\n      {\n        name: 'btn',\n        bounds: { x: 0, y: 0.87, width: 1, height: 0.13 },\n        padding: { height: 1 - 0.27 },\n        align: CellAlign.CenterBottom\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n\nexport function getCTAEmbeddedGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'cta_standard',\n    cells: [\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 0.79 },\n        name: 'popup',\n        align: CellAlign.CenterBottom\n      },\n      {\n        name: 'btn',\n        bounds: { x: 0, y: 0.8, width: 1, height: 0.2 },\n        padding: { y: 0.08 },\n        align: CellAlign.CenterTop\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\n\nexport function getForegroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.06, height: 0.19 },\n        align: CellAlign.RightBottom,\n        padding: { width: 1 - 0.03 }\n        // debug: { color: 0x5121 }\n      },\n      {\n        name: 'logo_cta',\n        bounds: { x: 0, y: 0, width: 0.5, height: 1 },\n        align: CellAlign.RightCenter,\n        padding: { width: 1 - 0.08 }\n      },\n      {\n        name: 'sound',\n        bounds: { x: 0, y: 0.11, width: 1, height: 0.08 },\n        offset: { x: 40 },\n        align: CellAlign.LeftCenter\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0, y: 0, width: 1, height: 0.15 },\n        align: CellAlign.CenterBottom\n      }\n    ]\n  };\n}\n\nexport function getForegroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.05, height: 0.14 },\n        align: CellAlign.CenterBottom\n      },\n      {\n        name: 'logo_cta',\n        bounds: { x: 0, y: 0, width: 1, height: 0.5 },\n        align: CellAlign.CenterBottom,\n        padding: { height: 1 - 0.11 }\n      },\n      {\n        name: 'sound',\n        bounds: { x: 0, width: 1, y: 0.115, height: 0.055 },\n        align: CellAlign.RightCenter,\n        padding: { width: 1 - 0.05 }\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0, y: 0.685, height: 0.2 },\n        padding: { height: 0.9 },\n        align: CellAlign.CenterBottom\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\nimport { FT } from '../../utils';\n\nexport function getGameGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'level',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        padding: { x: 0.03, y: 0.1, width: 0.94, height: 0.7 }\n      },\n      {\n        name: 'metronome',\n        bounds: { x: 0, y: 0.26, width: 1, height: 0.19 },\n        padding: { x: 0.04 },\n        align: CellAlign.LeftCenter\n      },\n      {\n        name: 'loot_box',\n        bounds: { x: 0, y: 0.155, width: 1, height: 0.68 }\n      }\n    ]\n  };\n}\n\nexport function getGameGridPortraitConfig() {\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'level',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        padding: { x: 0.1, y: FT(0.17, 0.03), width: 0.8, height: FT(0.72, 0.94) }\n      },\n      {\n        name: 'metronome',\n        bounds: { x: 0, y: 0.05, width: 1, height: 0.14 },\n        align: CellAlign.LeftCenter,\n        padding: { x: 0.05 }\n      },\n      {\n        name: 'loot_box',\n        bounds: { x: 0, y: 0.18, width: 1, height: 0.5 }\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nexport function getMainGridLandscapeConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n\nexport function getMainGridPortraitConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\n\nexport function getUIGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'p_cta',\n        bounds: { x: 0, y: 0.81, height: 0.19 }\n        // debug: { color: 0xd97 }\n      }\n    ]\n  };\n}\n\nexport function getUIGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'p_cta',\n        bounds: { x: 0, y: 0.885 },\n        // debug: { color: 0xffffff },\n        align: CellAlign.CenterTop\n      }\n    ]\n  };\n}\n","export function getBackgroundLeftTopCornerImageConfig() {\n  return {\n    frame: 'bg/corner_effect.png',\n    tint: 0x6d2293,\n    rotation: Math.PI\n  };\n}\n\nexport function getBackgroundRightTopCornerImageConfig() {\n  return {\n    frame: 'bg/corner_effect.png',\n    tint: 0x6d2293,\n    rotation: -Math.PI / 2\n  };\n}\n\nexport function getBackgroundRightBottomCornerImageConfig() {\n  return {\n    frame: 'bg/corner_effect.png',\n    tint: 0x6d2293,\n    rotation: 0\n  };\n}\n\nexport function getBackgroundLeftBottomCornerImageConfig() {\n  return {\n    frame: 'bg/corner_effect.png',\n    tint: 0x6d2293,\n    rotation: Math.PI / 2\n  };\n}\n\nexport function getHexagonArrowImageConfig() {\n  return {\n    frame: 'game/arrow.png'\n  };\n}\n\nexport function getInnerHexagonImageConfig() {\n  return {\n    frame: 'game/hexagon.png',\n    scale: { x: 0.86, y: 0.86 }\n  };\n}\n\nexport function getMetronomeImageConfig() {\n  return {\n    frame: 'game/metronome.png'\n  };\n}\n\nexport function getMetronomePendulumImageConfig() {\n  return {\n    frame: 'game/metronome_pendulum.png'\n  };\n}\n\nexport function getOrbImageConfig(frame) {\n  return {\n    frame: `game/${frame}.png`\n  };\n}\n\nexport function getTraceImageConfig(frame) {\n  return {\n    frame\n  };\n}\n","import { ctaPreVisibleUpdateCommand } from '../commands/ad/cta/cta-previsible-update-command';\nimport { tutorialCompleteCommand } from '../commands/ad/tutorial/tutorial-complete-command';\nimport { tutorialScreenClickCommand } from '../commands/ad/tutorial/tutorial-screen-click-command';\nimport { tutorialSequenceViewCompleteCommand } from '../commands/ad/tutorial/tutorial-sequence-view-complete-command';\nimport { onLevelStateUpdateCommand } from '../commands/game/level/on-level-state-update-command';\nimport { onOrbActivatedCommand } from '../commands/game/level/on-orb-activated-command';\nimport { onOrbsCollisionStartCommand } from '../commands/game/level/on-orbs-collision-start-command';\nimport { onGameStateUpdateCommand } from '../commands/game/on-game-state-update-command';\nimport { onLevelCreatedCommand } from '../commands/view/on-level-created-command';\nimport { onLevelDestroyedCommand } from '../commands/view/on-level-destroyed-command';\nimport { onLevelViewHideCompleteCommand } from '../commands/view/on-level-view-hide-complete-command';\nimport { onLevelViewRestartCompleteCommand } from '../commands/view/on-level-view-restart-complete-command';\nimport { onLevelViewShowCompleteCommand } from '../commands/view/on-level-view-show-complete-command';\nimport { onLootBoxClickCommand } from '../commands/view/on-loot-box-click-command';\nimport { onNoHintPlaceCommand } from '../commands/view/on-no-hint-place-command';\nimport { onOrbsDropCompleteCommand } from '../commands/view/on-orbs-drop-complete-command';\nimport { onScreenClickCommand } from '../commands/view/on-screen-click-command';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\n\nexport const legoLoggerConfig = Object.freeze({\n  debugGuards: true,\n  debugCommand: true,\n  debugEventArguments: true,\n  debugRedundantEventFlag: true,\n  debugEvents: true,\n  fontSize: 12,\n  excludedEvents: [''],\n  padding: 1,\n  fontFamily: 'Arial'\n});\n\nexport const playCommands = Object.freeze([\n  {\n    event: ModelEvents.TutorialModel.CompleteUpdate,\n    command: tutorialCompleteCommand\n  },\n  {\n    event: ModelEvents.LevelModel.StateUpdate,\n    command: onLevelStateUpdateCommand\n  },\n  {\n    event: ModelEvents.GameModel.StateUpdate,\n    command: onGameStateUpdateCommand\n  },\n  {\n    event: ViewEvents.TutorialView.ScreenClick,\n    command: tutorialScreenClickCommand\n  },\n  {\n    event: ViewEvents.TutorialView.SequenceHideComplete,\n    command: tutorialSequenceViewCompleteCommand\n  },\n  {\n    event: ModelEvents.CtaModel.PreVisibleUpdate,\n    command: ctaPreVisibleUpdateCommand\n  },\n  {\n    event: ViewEvents.GameView.Click,\n    command: onScreenClickCommand\n  },\n  {\n    event: ViewEvents.LevelView.ShowComplete,\n    command: onLevelViewShowCompleteCommand\n  },\n  {\n    event: ViewEvents.LevelView.HideComplete,\n    command: onLevelViewHideCompleteCommand\n  },\n  {\n    event: ViewEvents.LevelView.OrbActivated,\n    command: onOrbActivatedCommand\n  },\n  {\n    event: ViewEvents.LevelView.OrbsCollisionStart,\n    command: onOrbsCollisionStartCommand\n  },\n  {\n    event: ViewEvents.GameView.LevelCreated,\n    command: onLevelCreatedCommand\n  },\n  {\n    event: ViewEvents.GameView.LevelDestroyed,\n    command: onLevelDestroyedCommand\n  },\n  {\n    event: ViewEvents.LevelView.OrbsDropComplete,\n    command: onOrbsDropCompleteCommand\n  },\n  {\n    event: ViewEvents.LevelView.RestartComplete,\n    command: onLevelViewRestartCompleteCommand\n  },\n  {\n    event: ViewEvents.HintView.NoHintPlace,\n    command: onNoHintPlaceCommand\n  },\n  {\n    event: ViewEvents.LootBoxView.Click,\n    command: onLootBoxClickCommand\n  }\n]);\n","import { UNCOMPRESSED_ASSETS } from '../constants';\nimport { getCtaEmbeddedPopupBgImageSize, getLootBoxPopupBgImageSize, getTutorialBgImageSize } from '../utils';\n\nconst ctaBox = 'ui/cta_box.png';\nconst btnCta = 'ui/btn_cta.png';\nconst btnCtaEmbedded = 'ui/btn_cta_embedded.png';\nconst btnPersistentCta = 'ui/btn_persistent_cta.png';\nconst box = 'ui/box.png';\n\n// TUTORIAL\nexport function getTutorialBgImageConfig() {\n  const { width, height } = getTutorialBgImageSize();\n  return {\n    width,\n    height,\n    key: UNCOMPRESSED_ASSETS,\n    frame: box\n  };\n}\n\n// PERSISTENT CTA\nexport function getPersistentCtaButtonPatchConfig() {\n  return {\n    width: 330,\n    height: 100,\n    key: UNCOMPRESSED_ASSETS,\n    frame: btnPersistentCta\n  };\n}\n\n// CTA\nexport function getCtaEmbeddedPopupBgPatchConfig() {\n  const { width, height } = getCtaEmbeddedPopupBgImageSize();\n  return {\n    width,\n    height,\n    key: UNCOMPRESSED_ASSETS,\n    frame: box\n  };\n}\n\nexport function getCtaStandardPlayButtonPatchConfig() {\n  return {\n    width: 400,\n    height: 109,\n    key: UNCOMPRESSED_ASSETS,\n    frame: btnCta\n  };\n}\n\nexport function getCtaEmbeddedPlayButtonPatchConfig() {\n  return {\n    width: 290,\n    height: 81,\n    key: UNCOMPRESSED_ASSETS,\n    frame: btnCtaEmbedded\n  };\n}\n\nexport function getLootBoxPopupBgPatchConfig() {\n  const { width, height } = getLootBoxPopupBgImageSize();\n  return {\n    width,\n    height,\n    key: UNCOMPRESSED_ASSETS,\n    frame: box\n  };\n}\n\nexport const ninePatches = [\n  {\n    key: ctaBox,\n    data: {\n      left: 69,\n      right: 69,\n      top: 64,\n      bottom: 64\n    }\n  },\n  {\n    key: btnCta,\n    data: {\n      left: 36,\n      right: 36,\n      top: 56,\n      bottom: 50\n    }\n  },\n  {\n    key: box,\n    data: {\n      left: 30,\n      right: 30,\n      top: 25,\n      bottom: 25\n    }\n  },\n  {\n    key: btnPersistentCta,\n    data: {\n      left: 38,\n      right: 38,\n      top: 34,\n      bottom: 35\n    }\n  },\n  {\n    key: btnCtaEmbedded,\n    data: {\n      left: 40,\n      right: 40,\n      top: 27,\n      bottom: 27\n    }\n  }\n];\n","import { ASSETS } from '../constants';\nimport { getGameBounds } from '../utils';\n\nconst sparkleParticle = 'sparkleParticle';\nconst orbParticle2 = 'orbParticle2';\n\nfunction getSparkleParticlesConfig() {\n  return {\n    key: sparkleParticle,\n    data: {\n      lifespan: 25000,\n      image: ASSETS,\n      alpha: {\n        initial: 0,\n        value: 0.1,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.5, y: 0.9 },\n          { x: 1, y: 0 }\n        ]\n      },\n      frame: ['bg/bubble.png', 'bg/bubble_2.png'],\n      scale: {\n        initial: 0,\n        value: 4,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.5, y: 0.9 },\n          { x: 1, y: 0 }\n        ]\n      },\n      vx: { min: -0.1, max: 0.1 },\n      vy: { min: -0.1, max: 0.1 }\n    }\n  };\n}\n\nfunction getOrbParticles2Config() {\n  return {\n    key: orbParticle2,\n    data: {\n      lifespan: 500,\n      image: ASSETS,\n      frame: [\n        'particles/blue_1.png',\n        'particles/blue_2.png',\n        'particles/purple_big.png',\n        'particles/purple_blur.png',\n        'particles/red.png',\n        'particles/white.png',\n        'particles/yellow_2.png',\n        'particles/yellow.png'\n      ],\n      alpha: {\n        initial: 0,\n        value: 1,\n        control: [\n          { x: 0, y: 0.3 },\n          { x: 0.3, y: 0.99 },\n          { x: 0.99, y: 1 }\n        ]\n      },\n      scale: {\n        initial: 0,\n        value: 0.3,\n        control: [\n          { x: 0, y: 0.2 },\n          { x: 0.2, y: 0.9 },\n          { x: 1, y: 0 }\n        ]\n      },\n      vx: { min: -2, max: 2 },\n      vy: { min: -2, max: 2 }\n    }\n  };\n}\n\nexport const particles = [getSparkleParticlesConfig(), getOrbParticles2Config()];\n\nexport function getSparkleEmitterConfig(parent) {\n  const { width, height } = getGameBounds();\n  return {\n    key: sparkleParticle,\n    parent,\n    // force: { x: 0, y: 0.15 },\n    config: {\n      zone: CI_API.game.particleStorm.createRectangleZone(width, height),\n      repeat: -1,\n      frequency: 3000\n    }\n  };\n}\n\nexport function getOrbEmitter2Config(parent) {\n  return {\n    key: orbParticle2,\n    parent,\n    config: {\n      total: 1\n    }\n  };\n}\n","export const Spines = {\n  IntroLootBox: {\n    Key: 'intro_loot_box',\n    Animations: {\n      Intro: 'intro',\n      IntroIdle: 'intro_idle'\n    },\n    Skins: {\n      bee: 'orb',\n      eye: 'orb_1',\n      record: 'orb_2'\n    }\n  },\n  CTALootBox: {\n    Key: 'cta_loot_box',\n    Animations: {\n      CTA: 'cta',\n      CTAIdle: 'cta_idle'\n    }\n  }\n};\n\nexport function getIntroLootBoxSpineConfig(x, y) {\n  return {\n    key: Spines.IntroLootBox.Key,\n    x,\n    y\n  };\n}\n\nexport function getCTALootBoxSpineConfig(x, y) {\n  return {\n    key: Spines.CTALootBox.Key,\n    x,\n    y\n  };\n}\n","import { FONT1 } from '../constants';\n\n// TUTORIAL\nexport function getTutorialTextConfig(text) {\n  return {\n    text,\n    y: LP(3, 4),\n    style: {\n      font: FONT1,\n      fontSize: 38,\n      fill: '#ffffff',\n      align: 'center',\n      wordWrap: LP(false, true),\n      wordWrapWidth: 330\n    }\n  };\n}\n\n// PERSISTENT\nexport function getPersistentCtaTextConfig() {\n  return {\n    text: 'cta_btn_persistent_text',\n    y: 4,\n    style: {\n      font: FONT1,\n      fontSize: 34,\n      fill: '#ffffff',\n      shadow: {\n        x: 1,\n        y: 2,\n        color: '#000000',\n        blur: 4,\n        shadowFill: true\n      }\n    }\n  };\n}\n\n// CTA\nexport function getCtaStandardPlayButtonTextConfig() {\n  return {\n    text: CI_API.Globals.PARAMS.cta_btn_text,\n    y: 4,\n    style: {\n      font: FONT1,\n      fontSize: 56,\n      fill: '#ffffff',\n      shadow: {\n        x: 1,\n        y: 2,\n        color: '#230843',\n        blur: 4,\n        shadowFill: true\n      }\n    }\n  };\n}\n\nexport function getCtaStandardTitleTextConfig() {\n  return {\n    text: 'KEEP PLAYING! TRY MORE FUN LEVELS!',\n    style: {\n      font: FONT1,\n      fontSize: 42,\n      fill: '#ffffff',\n      align: 'center',\n      lineSpacing: 6\n    }\n  };\n}\n\nexport function getCtaEmbeddedPlayButtonTextConfig() {\n  return {\n    text: 'cta_btn_embedded_text',\n    y: 4,\n    style: {\n      font: FONT1,\n      fontSize: 38,\n      fill: '#ffffff',\n      shadow: {\n        x: 1,\n        y: 2,\n        color: '#230843',\n        blur: 4,\n        shadowFill: true\n      }\n    }\n  };\n}\n\nexport function getCtaEmbeddedTitleTextConfig() {\n  return {\n    text: 'GREAT JOB!',\n    style: {\n      font: FONT1,\n      fontSize: LP(38, 54),\n      fill: '#ffffff',\n      align: 'center',\n      lineSpacing: 6\n    }\n  };\n}\n\nexport function getCtaEmbeddedSubtitleTextConfig() {\n  return {\n    text: 'PICK YOUR NEW ORB!',\n    style: {\n      font: FONT1,\n      fontSize: LP(25, 36),\n      fill: '#ffffff',\n      align: 'center',\n      lineSpacing: 6\n    }\n  };\n}\n\nexport function getMetronomeTextConfig() {\n  return {\n    text: {\n      text: ``,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 38,\n      fill: '#FFFFFF',\n      align: 'center'\n    }\n  };\n}\n","import { LOOT_BOX_TIME } from '../constants';\n\nexport function getTutorialConfig() {\n  const params = CI_API.Globals.PARAMS;\n\n  return [\n    { text: 'YOU GOT A NEW ORB! TRY IT OUT!', duration: LOOT_BOX_TIME, clickable: true },\n    { text: \"DON'T LET THE ORBS TOUCH!\", duration: params.tutorial_time, clickable: true }\n  ];\n}\n","export const FONT1 = 'RopaSans-Regular';\nexport const ASSETS = 'assets_png';\nexport const UNCOMPRESSED_ASSETS = 'assets_png_unc_';\nexport const COOLDOWN_TIME = 3000;\nexport const LOOT_BOX_TIME = 3000;\n\nexport const AdState = Object.freeze({\n  Ready: 'ready',\n  Live: 'live',\n  Idle: 'idle'\n});\n\nexport const AdStatus = Object.freeze({\n  Unknown: 'unknown',\n  Game: 'game',\n  PreCta: 'pre_cta',\n  Cta: 'cta',\n  Retry: 'retry',\n  Restart: 'restart'\n});\n\nexport const PhaserState = Object.freeze({\n  Preload: 'PreloaderState',\n  Game: 'GameState'\n});\n\nexport const AdViewState = Object.freeze({\n  Unknown: 'unknown',\n  Init: 'Init',\n  Preload: 'Preload',\n  Create: 'Create',\n  ShutDown: 'ShutDown'\n});\n\nexport const SoundState = Object.freeze({\n  Unknown: 'unknown',\n  On: 'on',\n  Off: 'off'\n});\n\nexport const InputPriority = Object.freeze({\n  Game: 10,\n  Cta: 20,\n  Foreground: 30\n});\n\nexport const GameOverReasons = Object.freeze({\n  Unknown: 'unknown',\n  Idled: 'idled',\n  ItemsToCtaReached: 'items_to_cta_reached',\n  DeathsToCtaReached: 'deaths_to_cta_reached'\n});\n\nexport const GameState = Object.freeze({\n  Unknown: 'unknown',\n  ShowLoot: 'show_loot',\n  HideLoot: 'hide_loot',\n  CreateLevel: 'create_level',\n  Idle: 'idle',\n  DestroyLevel: 'destroy_level'\n});\n\nexport const LevelState = Object.freeze({\n  Unknown: 'unknown',\n  Show: 'show',\n  Idle: 'idle',\n  ActivateOrb: 'activate_orb',\n  Cooldown: 'cooldown',\n  ResultWin: 'result_win',\n  ResultLose: 'result_lose',\n  Hide: 'hide',\n  Restart: 'restart'\n});\n\nexport const TraceState = Object.freeze({\n  Unknown: 'unknown',\n  Passive: 'passive',\n  Active: 'active',\n  Idle: 'idle'\n});\n\nexport const OrbType = Object.freeze({\n  bee: { frame: 'orb_1', radius: 40 },\n  record: { frame: 'orb_2', radius: 40 },\n  eye: { frame: 'orb_3', radius: 40 }\n});\n","import Loader from 'webfontloader';\n\n/**\n * Fontloader ...\n *\n * @copyright CrossInstall 2018\n * @module FontLoader\n */\nvar FontLoader = {};\n\n/**\n * Any Google font listed here must be included in \"web_fonts\": [] located in 'creative.json' <br>\n * Any local font listed here must be included in \"css_fonts\": [] located in 'creative.json' <br>\n * Non-web fonts: Provide local otf font file in /texture_sheets/ <br>\n * Provided font files must contain no spaces and avoid uppercase characters <br>\n * Separate additional font-families with a comma. (e.g. ['Muli', 'Gloria Hallelujah'])\n *\n * @name fontsToLoad\n * @returns {object}\n */\nFontLoader.FONTS_TO_LOAD = {\n  families: [\n    'RopaSans-Regular',\n  ]\n};\n\nFontLoader.TIMEOUT = 4000;\n\nFontLoader.LOADED_FONTS = [];\nFontLoader.FAILED_FONTS = [];\nFontLoader.AD_FONTS_READY = false;\n\n/**\n * - Inner Methods - <br> <br>\n * active - This event is triggered when the fonts have rendered <br>\n * inactive - This event is triggered when linked fonts is unsupported or no fonts could be loaded <br>\n * fontactive - This event is triggered once for each font that renders <br>\n * fontinactive - This event is triggered if the font can't be loaded <br>\n *\n * @name loadFonts\n * @param function callback\n * @function\n */\nFontLoader.loadFonts = function(callback) {\n\tvar fontConfig = {\n\t\tcustom: FontLoader.FONTS_TO_LOAD,\n\n\t\ttimeout: FontLoader.TIMEOUT,\n\n\t\tactive: function() {\n\n\t\t\tif(document.readyState == 'complete') {\n\t\t\t\tif(callback) callback();\n\t\t\t} else {\n\t\t\t\twindow.addEventListener(\"load\", function() {\n\t\t\t\t\tif(callback) callback();\n\t\t\t\t});\n\t\t\t}\n\t\t\tFontLoader.AD_FONTS_READY = true;\n\n\t\t\tconsole.log(\"Custom fonts loaded: \" + FontLoader.LOADED_FONTS);\n\t\t},\n\t\tinactive: function() {\n\t\t\tif(callback) callback();\n\t\t\tif(FontLoader.FAILED_FONTS.length) console.warn(\"One or more fonts failed to load: \" + FontLoader.FAILED_FONTS);\n\t\t},\n\n\t\tfontactive: function(familyName) {\n\t\t\t//This event is triggered once for each font that renders.\n\t\t\tFontLoader.LOADED_FONTS[FontLoader.LOADED_FONTS.length] = familyName;\n\n\t\t\tvar newDiv = document.createElement('font-div');\n\t\t\tnewDiv.id = familyName;\n\t\t\tnewDiv.style.fontFamily = familyName;\n\t\t\tnewDiv.style.position = 'absolute';\n\t\t\tnewDiv.style.visibility = 'hidden';\n\t\t\tnewDiv.innerHTML = 'Hello world.';\n\t\t\tdocument.body.appendChild(newDiv);\n\t\t},\n\t\tfontinactive: function(familyName, fvd) {\n\t\t\tFontLoader.FAILED_FONTS[FontLoader.FAILED_FONTS.length] = familyName;\n\t\t\tconsole.warn(\"failed \" +familyName + \" \" + fvd);\n\t\t}\n\t};\n\n\t/* Load with fontConfig */\n\tLoader.load(fontConfig);\n};\n\nexport default FontLoader;\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n\n/*global CI_API, ad_orientation*/\nimport LUG from './lu/layout-utils-general';\nimport LUC from './lu/layout-utils-compact';\n\n// Trigger to load old ('general') or 'compact' (with universal orientation support) Layout Utils\nconst useUniversalOrientation = true;\n\n//TODO Temporary disable handleOrientation methods\nconst disableIncorrectOrientationHandling = () => {\n  if (Utils.prototype.handleIncorrectOrientation) {\n    Utils.prototype.handleIncorrectOrientation = () => {\n    };\n  }\n\n  if (Utils.prototype.handleCorrectOrientation) {\n    Utils.prototype.handleCorrectOrientation = () => {\n    };\n  }\n};\n\nlet LU = useUniversalOrientation ? LUC : LUG;\n\nif (useUniversalOrientation) disableIncorrectOrientationHandling();\n\nexport default LU;\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n\nclass LayoutUtilsCompact {\n  constructor() {\n    this.CONTAINER_NAME = 'creative';\n  }\n\n  // Init method should be called only once, to avoid size check requestAnimationFrame duplicates,\n  // and other Phaser's properties refresh.\n  init(game, isUniversal = true) {\n    this.mGame = game;\n    this.mIsUniversal = isUniversal;\n    this.mHeaderNode = document.getElementById('ad_header') || { clientHeight: 0 };\n    this.mOrientationNode = document.getElementById('orientation') || { style: {} };\n    game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;\n\n    // If universal then override default LP method. New LP method checks real\n    // device orientation instead of getting it from 'ad_orientation' tag param.\n    if (isUniversal) {\n      window.LP = (landscape, portrait) => window.innerWidth > window.innerHeight ? landscape : portrait;\n    }\n\n    this.sizeCheck();\n    this.refresh();\n  }\n\n  get isPortrait() {\n    return LP(false, true);\n  }\n\n  get isLandscape() {\n    return LP(true, false);\n  }\n\n  sizeCheck() {\n    const maxCheckTime = 750;\n    let startTime = null;\n\n    let tempWidth = 0;\n    let tempHeight = 0;\n    let handleId = null;\n\n    const check = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n\n      if (tempWidth !== window.innerWidth || tempHeight !== window.innerHeight) {\n        this.refresh();\n        this.resizeCall(this.mGame.world);\n\n        tempWidth = window.innerWidth;\n        tempHeight = window.innerHeight;\n      }\n\n      if (timestamp - startTime < maxCheckTime) {\n        window.cancelAnimationFrame(handleId);\n        handleId = window.requestAnimationFrame(check);\n      }\n    };\n\n    window.cancelAnimationFrame(handleId);\n    handleId = window.requestAnimationFrame(check);\n\n    window.addEventListener(\"resize\", (e) => {\n      startTime = null;\n      check(0);\n    });\n  }\n\n  // Recursively calls resize handler for each sprite in gameObject tree\n  resizeCall(gameObject) {\n    gameObject.handleResize && gameObject.handleResize(LP('landscape', 'portrait'));\n    gameObject.children.forEach(this.resizeCall, this);\n  }\n\n  refresh() {\n    const { mGame: game, mOrientationNode: orientationNode, mIsUniversal: isUniversal, mHeaderNode: headerNode } = this;\n\n    // Lets try to keep world within 960x640 range\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const mw = LP(windowWidth * 640 / windowHeight, windowWidth * 960 / windowHeight);\n    const mh = LP(windowHeight * 960 / windowWidth, windowHeight * 640 / windowWidth);\n    const scaleFactor = Math.max(mw / windowWidth, mh / windowHeight);\n\n    const width = windowWidth * scaleFactor;\n    const height = windowHeight * scaleFactor;\n\n    // Notify phaser\n    game.scale.setGameSize(width, height);\n    game.scale.setUserScale(1 / scaleFactor, 1 / scaleFactor);\n    game.scale.refresh();\n\n    CI_API._orientationBlocker = null;\n    orientationNode.style.display = isUniversal || LP(width > height, width < height) ? 'none !important' : 'block';\n\n    // Refresh must be called at least once before read this property\n    // Also this property can return a zero in a feature\n    game.headerHeight = headerNode.clientHeight * scaleFactor;\n    game.scaleFactor = this.scaleFactor = scaleFactor;\n    game.visibleHeight = height - game.headerHeight;\n  }\n\n  _throwError() {\n    throw new Error('Please, check do you really need to use multi-orientation layout-utils version');\n  }\n\n  refreshViewDimmensions() {\n    this._throwError();\n  }\n\n  getHeaderHeight() {\n    this._throwError();\n  }\n\n  fitIntoRect() {\n    this._throwError();\n  }\n\n  centerIntoView() {\n    this._throwError();\n  }\n}\n\nexport default new LayoutUtilsCompact();\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n\n/**\n * @file A set of utils functions to work with multi-resolution.\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n */\n\nclass LayoutUtils {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n\n  static init(game) {\n    const state = game.state.states[game.state.current];\n\n    utils.scaleCreative();\n    utils.attachResizeListener(state);\n\n  }\n\n  static resizeCall() {\n    return null;\n  }\n  \n  static getDevicePixelRatio() {\n    let ratio = 1;\n\n    if (window.screen.systemXDPI !== undefined && window.screen.logicalXDPI !== undefined && window.screen.systemXDPI > window.screen.logicalXDPI)\n      ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    else if (window.devicePixelRatio !== undefined)\n      ratio = window.devicePixelRatio;\n\n    return ratio * LayoutUtils.RENDER_RESOLUTION;\n  }\n\n  static getHeaderHeight() {\n    return LayoutUtils.HEADER_ELEMENT.clientHeight * LayoutUtils.getDevicePixelRatio() * LayoutUtils.INVS;\n  }\n\n  static refreshViewDimmensions() {\n    LayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n    LayoutUtils.HEADER_ELEMENT = document.getElementById('ad_header');\n\n    LayoutUtils.VIEW_WIDTH = document.body.clientWidth * LayoutUtils.getDevicePixelRatio();\n    LayoutUtils.VIEW_HEIGHT = document.body.clientHeight * LayoutUtils.getDevicePixelRatio();\n\n    if (LayoutUtils.IS_LANDSCAPE) {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_WIDTH;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_HEIGHT;\n    } else {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_HEIGHT;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_WIDTH;\n    }\n\n    let scaleX = LayoutUtils.VIEW_WIDTH / LayoutUtils.BASE_WIDTH;\n    let scaleY = LayoutUtils.VIEW_HEIGHT / LayoutUtils.BASE_HEIGHT;\n\n    LayoutUtils.S = Math.min(scaleX, scaleY);\n    LayoutUtils.INVS = 1 / LayoutUtils.S;\n\n    LayoutUtils.LEFT_OFFSET = -((LayoutUtils.VIEW_WIDTH / 2) - ((LayoutUtils.BASE_WIDTH / 2)) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.RIGHT_OFFSET = -LayoutUtils.LEFT_OFFSET + LayoutUtils.BASE_WIDTH;\n    LayoutUtils.TOP_OFFSET = -((LayoutUtils.VIEW_HEIGHT / 2) - ((LayoutUtils.BASE_HEIGHT / 2)) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.BOTTOM_OFFSET = -LayoutUtils.TOP_OFFSET + LayoutUtils.BASE_HEIGHT;\n    LayoutUtils.FULL_GAME_WIDTH = LayoutUtils.RIGHT_OFFSET - LayoutUtils.LEFT_OFFSET;\n    LayoutUtils.FULL_GAME_HEIGHT = LayoutUtils.BOTTOM_OFFSET - LayoutUtils.TOP_OFFSET;\n\n    LayoutUtils.ASPECT_RATIO = Math.round((LayoutUtils.VIEW_HEIGHT / LayoutUtils.VIEW_WIDTH) * 100) / 100; //TODO: check landscape\n\n    //console.log('[' + LayoutUtils.MODULE_NAME + ']', 'orientation:', ad_orientation, 'view-size:', LayoutUtils.VIEW_SIZE, 'left-offset:', LayoutUtils.LEFT_OFFSET, 'right-offset:', LayoutUtils.RIGHT_OFFSET, 'top-offset:', LayoutUtils.TOP_OFFSET, 'bottom-offset:', LayoutUtils.BOTTOM_OFFSET, 'aspect:', LayoutUtils.ASPECT_RATIO);\n    LayoutUtils.fixCanvasSize(true);\n  }\n\n  static fixCanvasSize(r = true) {\n    if (r) {\n      setTimeout(function() {\n        LayoutUtils.fixCanvasSize(false);\n      }, 100);\n      return;\n    }\n\n    window.scrollTo(0, 1);\n  }\n\n  static centerIntoView(object) {\n    object.scale.set(LayoutUtils.S);\n    object.x = (LayoutUtils.VIEW_WIDTH / 2) - ((LayoutUtils.BASE_WIDTH / 2) * LayoutUtils.S);\n    object.y = (LayoutUtils.VIEW_HEIGHT / 2) - ((LayoutUtils.BASE_HEIGHT / 2) * LayoutUtils.S);\n  }\n\n  static fitIntoRect(sprite, bounds, fillRect, align, spriteBounds) {\n    let wD = spriteBounds ? spriteBounds.width / sprite.scale.x : sprite.width / sprite.scale.x;\n    let hD = spriteBounds ? spriteBounds.height / sprite.scale.y : sprite.height / sprite.scale.y;\n\n    let wR = bounds.width;\n    let hR = bounds.height;\n\n    let sX = wR / wD;\n    let sY = hR / hD;\n\n    let rD = wD / hD;\n    let rR = wR / hR;\n\n    let sH = fillRect ? sY : sX;\n    let sV = fillRect ? sX : sY;\n\n    let s = rD >= rR ? sH : sV;\n    let w = wD * s;\n    let h = hD * s;\n\n    let tX = 0.0;\n    let tY = 0.0;\n\n    switch (align) {\n      case 'left':\n      case 'topLeft':\n      case 'bottomLeft':\n        tX = 0.0;\n        break;\n\n      case 'right':\n      case 'topRight':\n      case 'bottomRight':\n        tX = w - wR;\n        break;\n\n      default:\n        tX = 0.5 * (w - wR);\n    }\n\n    switch (align) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        tY = 0.0;\n        break;\n\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        tY = h - hR;\n        break;\n\n      default:\n        tY = 0.5 * (h - hR);\n    }\n\n    sprite.x = bounds.x - tX;\n    sprite.y = bounds.y - tY;\n    sprite.scale.set(s);\n  }\n}\n\n// Hum hum! 1 = 1:1 to device size. 0.5 means 50% to device pixel density. Make it smaller only if you need to get few more FPS.\nLayoutUtils.RENDER_RESOLUTION = 1;\n\n// MR related\nLayoutUtils.CONTAINER_NAME = 'creative';\nLayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n\nLayoutUtils.DEFAULT_BASE_WIDTH = 960;\nLayoutUtils.DEFAULT_BASE_HEIGHT = 640;\n\nLayoutUtils.BASE_WIDTH = 960;\nLayoutUtils.BASE_HEIGHT = 640;\n\nLayoutUtils.ASPECT_RATIO = 0;\nLayoutUtils.S = 1; // SCALE\nLayoutUtils.INVS = 1 / LayoutUtils.S; // SCALE INVERTED\nLayoutUtils.VIEW_WIDTH = 0;\nLayoutUtils.VIEW_HEIGHT = 0;\n\nLayoutUtils.LEFT_OFFSET = 0;\nLayoutUtils.RIGHT_OFFSET = 0;\nLayoutUtils.TOP_OFFSET = 0;\nLayoutUtils.BOTTOM_OFFSET = 0;\n\nLayoutUtils.IS_LANDSCAPE = (ad_orientation === 'landscape');\nLayoutUtils.IS_PORTRAIT = !LayoutUtils.IS_LANDSCAPE;\n\n// Fake\nLayoutUtils.MODULE_NAME = 'LayoutUtils';\nexport default LayoutUtils;\n","export const ModelEvents = Object.freeze({\n  AdModel: {\n    StatusUpdate: 'AdModelStatusUpdate',\n    ViewStateUpdate: 'AdModelViewStateUpdate',\n    LoadUpdate: 'AdModelLoadUpdate',\n    HintUpdate: 'AdModelHintUpdate',\n    TutorialUpdate: 'AdModelTutorialUpdate',\n    PersistentCtaUpdate: 'AdModelPersistentCtaUpdate',\n    CtaUpdate: 'AdModelCtaUpdate',\n    SoundUpdate: 'AdModelSoundUpdate'\n  },\n  CtaModel: {\n    ReasonUpdate: 'CtaModelReasonUpdate',\n    PreVisibleUpdate: 'CtaModelPreVisibleUpdate',\n    VisibleUpdate: 'CtaModelVisibleUpdate'\n  },\n  HintModel: {\n    VisibleUpdate: 'HintModelVisibleUpdate'\n  },\n  LoadModel: {\n    ProgressUpdate: 'LoadModelProgressUpdate',\n    CompleteUpdate: 'LoadModelCompleteUpdate'\n  },\n  SoundModel: {\n    StateUpdate: 'SoundModelStateUpdate',\n    IconUpdate: 'SoundModelIconUpdate'\n  },\n  TutorialModel: {\n    CompleteUpdate: 'TutorialModelCompleteUpdate',\n    SequencesUpdate: 'TutorialModelSequencesUpdate',\n    CurrentUpdate: 'TutorialModelCurrentUpdate'\n  },\n  TutorialSequenceModel: {\n    ConfigUpdate: 'TutorialSequenceModelConfigUpdate',\n    CompleteUpdate: 'TutorialSequenceModelCompleteUpdate'\n  },\n  GameModel: {\n    StateUpdate: 'GameModelStateUpdate',\n    LevelsUpdate: 'GameModelLevelsUpdate',\n    CurrentLevelIdUpdate: 'GameModelCurrentLevelIdUpdate',\n    CurrentLevelUpdate: 'GameModelCurrentLevelUpdate'\n  },\n  LevelModel: {\n    LevelIdUpdate: 'LevelModelLevelIdUpdate',\n    ConfigUpdate: 'LevelModelConfigUpdate',\n    StateUpdate: 'LevelModelStateUpdate',\n    TracesUpdate: 'LevelModelTracesUpdate',\n    OrbsUpdate: 'LevelModelOrbsUpdate',\n    ActiveTraceIndexUpdate: 'LevelModelActiveTraceIndexUpdate'\n  },\n  OrbModel: {\n    ConfigUpdate: 'OrbModelConfigUpdate'\n  },\n  TraceModel: {\n    StateUpdate: 'TraceModelStateUpdate',\n    ConfigUpdate: 'TraceModelConfigUpdate'\n  },\n  ObservableModel: {\n    UuidUpdate: 'ObservableModelUuidUpdate'\n  },\n  PlayerModel: {\n    LivesUpdate: 'PlayerModelLivesUpdate'\n  },\n  Store: {\n    AdUpdate: 'StoreAdUpdate',\n    PlayerUpdate: 'StorePlayerUpdate',\n    GameUpdate: 'StoreGameUpdate'\n  }\n});\n","export const ViewEvents = Object.freeze({\n  Ad: {\n    Live: 'AdLive'\n  },\n  Game: {\n    Resize: 'GameResize',\n    UserInteraction: 'UserInteraction',\n    CtaIdleTime: 'CtaIdleTime'\n  },\n  GameState: {\n    CtaIdleTime: 'GameStateCtaIdleTime'\n  },\n  SoundView: {\n    Click: 'SoundViewClick'\n  },\n  TutorialView: {\n    ScreenClick: 'TutorialViewScreenClick',\n    SequenceHideComplete: 'TutorialViewSequenceHideComplete'\n  },\n  PersistentCtaView: {\n    Click: 'PersistentCtaViewClick'\n  },\n  CtaView: {\n    ScreenClick: 'CtaViewScreenClick',\n    PlayClick: 'CtaViewPlayClick',\n    RetryClick: 'CtaViewRetryClick'\n  },\n  GameView: {\n    Click: 'GameViewClick',\n    LevelCreated: 'GameViewLevelCreated',\n    LevelDestroyed: 'GameViewLevelDestroyed'\n  },\n  LevelView: {\n    HideComplete: 'LevelViewHideComplete',\n    ShowComplete: 'LevelViewShowComplete',\n    RestartComplete: 'LevelViewRestartComplete',\n    OrbActivated: 'LevelViewOrbActivated',\n    OrbsCollisionStart: 'LevelViewOrbsCollisionStart',\n    OrbsDropComplete: 'LevelViewOrbsDropComplete'\n  },\n  HintView: {\n    NoHintPlace: 'HintViewNoHintPlace'\n  },\n  LootBoxView: {\n    Click: 'LootBoxViewClick'\n  }\n});\n","import { AdState } from '../../constants';\n\nexport function adLiveGuard() {\n  return ad_state === AdState.Live;\n}\n","export function asecGuard() {\n  return 'tapjoy' === ad_exchange && window.TJ_API && window.TJ_API.directives && !window.TJ_API.directives.showEndCard;\n}\n","import { store } from '../../models/store';\n\nexport function ctaModelGuard() {\n  return store.ad.cta;\n}\n","import { store } from '../../models/store';\n\nexport function ctaPreVisibleGuard() {\n  return store.ad.cta.preVisible;\n}\n","import { store } from '../../models/store';\n\nexport function ctaVisibleGuard() {\n  return store.ad.cta.visible;\n}\n","import { store } from '../../models/store';\n\nexport function hintModelGuard() {\n  return store.ad.hint;\n}\n","export function hintParamGuard() {\n  return CI_API.Globals.PARAMS.hint;\n}\n","import { store } from '../../models/store';\n\nexport function persistentCtaModelGuard() {\n  return store.ad.persistentCta;\n}\n","export function persistentCtaParamGuard() {\n  return CI_API.Globals.PARAMS.cta_btn_persistent;\n}\n","export function soundParamGuard() {\n  return CI_API.Globals.PARAMS.sound;\n}\n","import { store } from '../../models/store';\n\nexport function tutorialModelGuard() {\n  return store.ad.tutorial;\n}\n","export function tutorialParamGuard() {\n  return CI_API.Globals.PARAMS.tutorial;\n}\n","import { GameState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function gameHideLootStateGuard() {\n  return store.game.state === GameState.HideLoot;\n}\n","import { store } from '../../models/store';\n\nexport function gameModelGuard() {\n  return store.game;\n}\n","import { GameState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function gameShowLootStateGuard() {\n  return store.game.state === GameState.ShowLoot;\n}\n","import { store } from '../../../models/store';\n\nexport function lastLevelGuard() {\n  const { currentLevelId, levels } = store.game;\n\n  return currentLevelId >= levels.length;\n}\n","import { store } from '../../../models/store';\n\nexport function lastTraceGuard() {\n  const { currentLevel } = store.game;\n  const { traces, activeTraceIndex } = currentLevel;\n\n  return activeTraceIndex >= traces.length - 1;\n}\n","import { LevelState } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function levelResultLoseStateGuard() {\n  const { currentLevel } = store.game;\n  return currentLevel.state === LevelState.ResultLose;\n}\n","import { LevelState } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function levelResultWinStateGuard() {\n  const { currentLevel } = store.game;\n  return currentLevel.state === LevelState.ResultWin;\n}\n","import { store } from '../../models/store';\n\nexport function noLivesGuard() {\n  return !store.player.lives;\n}\n","import { store } from '../../models/store';\n\nexport function playerModelGuard() {\n  return store.player;\n}\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n/*global Phaser, imageLoader, embedded */\n\n(() => {\n  // Decorate Phaser Render\n  const generateTilingTexture = Phaser.TileSprite.prototype.generateTilingTexture;\n  const renderCanvas = Phaser.Sprite.prototype._renderCanvas;\n  const matrixPool = [];\n  const rectPool = [];\n  const scalePool = {};\n\n  const scaleJson = (json) => {\n    const frames = json.frames;\n\n    for (const name in frames) {\n      if (!Object.prototype.hasOwnProperty.call(frames, name) || !frames[name].frame) continue;\n      const frame = frames[name];\n      const scale = getScale(json, name);\n\n      frame.frame.x /= scale;\n      frame.frame.y /= scale;\n      frame.frame.w /= scale;\n      frame.frame.h /= scale;\n      frame.spriteSourceSize.x /= scale;\n      frame.spriteSourceSize.y /= scale;\n      frame.spriteSourceSize.w /= scale;\n      frame.spriteSourceSize.h /= scale;\n      frame.sourceSize.w /= scale;\n      frame.sourceSize.h /= scale;\n    }\n  };\n\n//Normalize scale for all embedded atlas jsons\n  const scaleAllJsons = () => {\n    for (let embeddedKey in embedded) {\n      let json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        scaleJson(json_data);\n      }\n    }\n  };\n\n  // Return sprite independent scale\n  const getScale = (jsonData, frameName) => {\n    if (scalePool[frameName]) {\n      return scalePool[frameName];\n    }\n\n    let scale = 1;\n    if (jsonData && jsonData.frames && jsonData.frames[frameName] && jsonData.frames[frameName].scale) {\n      scale = jsonData.frames[frameName].scale\n    }\n\n    scalePool[frameName] = scale;\n    return scale;\n  }\n\n  const multiply = (rect, sc) => {\n    rect.x *= sc;\n    rect.y *= sc;\n    rect.width *= sc;\n    rect.height *= sc;\n  };\n\n  Phaser.Sprite.prototype._renderCanvas = function (renderSession, matrix) {\n    if (!this.visible || this.alpha === 0 || !this.renderable || this.texture.crop.width <= 0 || this.texture.crop.height <= 0) return;\n\n    const texture = this.texture;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (matrixPool.pop() || new Phaser.Matrix()).setTo(wt.a / sc, wt.b / sc, wt.c / sc, wt.d / sc, wt.tx, wt.ty);\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n\n    renderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    rectPool.push(crop, trim);\n    matrixPool.push(m);\n  };\n\n  Phaser.TileSprite.prototype.generateTilingTexture = function (forcePowerOfTwo) {\n    if (!this.texture.baseTexture.hasLoaded) return;\n\n    const texture = this.texture;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n\n    multiply(texture.crop, sc);\n    generateTilingTexture.call(this, forcePowerOfTwo);\n    crop.copyTo(texture.crop);\n    rectPool.push(crop);\n  };\n\n  const imageRenderCanvas = Phaser.Button.prototype._renderCanvas;\n  const imageMatrixPool = [];\n  const imageRectPool = [];\n\n  Phaser.Button.prototype._renderCanvas = function (renderSession, matrix) {\n    if (!this.visible || this.alpha === 0 || !this.renderable || this.texture.crop.width <= 0 || this.texture.crop.height <= 0) return;\n\n    const texture = this.texture;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (imageMatrixPool.pop() || new Phaser.Matrix()).setTo(wt.a / sc, wt.b / sc, wt.c / sc, wt.d / sc, wt.tx, wt.ty);\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n    imageRenderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    imageRectPool.push(crop, trim);\n    imageMatrixPool.push(m);\n  };\n\n  // Override Spine.createSprite method for supporting independent asset scaling\n  const overrideSpineLibrary = function () {\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {}\n\n    if (spineLibraryAdded) {\n      PhaserSpine.Spine.prototype.createSprite = function (slot, attachment) {\n        var descriptor = attachment.rendererObject;\n        var baseTexture = descriptor.page.rendererObject;\n        var spriteRect = new PIXI.Rectangle(descriptor.x, descriptor.y, descriptor.rotate ? descriptor.height : descriptor.width, descriptor.rotate ? descriptor.width : descriptor.height);\n\n        // Get asset scale and adjust it to the sprite rect\n        var sc = getScale(null, descriptor.name + '.png') || 1;\n        multiply(spriteRect, sc)\n\n        var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n\n        var sprite = new Phaser.Sprite(this.game, 0, 0, spriteTexture);\n        var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n\n        //Divide on asset scale to get the original sprite size\n        sprite.scale.x = attachment.scaleX / this.imageScale / sc;\n        sprite.scale.y = attachment.scaleY / this.imageScale / sc;\n        sprite.rotation = baseRotation;\n        sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n        sprite.anchor.y = (0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height;\n        sprite.alpha = attachment.a;\n        if (descriptor.rotate) {\n          var x1 = sprite.scale.x;\n          sprite.scale.x = sprite.scale.y;\n          sprite.scale.y = x1;\n        }\n        slot.sprites = slot.sprites || {};\n        slot.sprites[descriptor.name] = sprite;\n        return sprite;\n      };\n    }\n  }\n\n  scaleAllJsons();\n  overrideSpineLibrary();\n})();\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n\n/*global ad_webroot, ad_name, utils, embedded */\n\n\n/**\n * Stores game variables and static constants.\n *\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n * @module Global\n */\nexport default class Globals {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n}\n\n/**\n * Globals verbose is a required variable, default true\n * @type {boolean}\n * @name verbose\n */\nGlobals.VERBOSE = true;\nGlobals.WEB_ROOT = ad_webroot + '/' + ad_name;\nGlobals.LAST_INTERACTION_TIME = 0;\nGlobals.PARAMS = utils.getAdParameters(embedded.params);\nGlobals.RETRIES_NUMBER = Globals.PARAMS.retries;\n\nGlobals.VICTORY = 1;\nGlobals.DEFEAT = 0;\n","/*******************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\n\n/* jshint -W083 */\n/*eslint no-prototype-builtins: \"error\"*/\n\n/*global Phaser, imageLoader, ad_webroot, ad_name, xp, spine, embedded, ad_assets_path */\n\n/**\n * Multi-Atlas support library\n *\n * This library allows to use multiple atlases in Phaser 2.x without carrying about\n * collecting all animations, Spriter, Spine assets in one atlas\n *\n * This library is universal. For using just import this file in the preloader state\n */\n \n\n/**\n * Override Phaser Phaser.AnimationManager.add and Phaser.Animation.updateCurrentFrame methods\n * Looking through the all added atlases for finding needed frame by name\n * If the current sprite FrameData used another atlas LoadTexture method calls\n * It the only one method to replace the base texture entirely\n */\nconst overridePhaserAnimation = function () {\n  Phaser.AnimationManager.prototype.add = function (name, frames, frameRate, loop) {\n    frames = frames || [];\n    frameRate = frameRate || 60;\n\n    if (loop === undefined) {\n      loop = false;\n    }\n\n    //Gather animation frames data from all cached atlases for all animation frameNames\n    let framesInfo = [];\n    let framesCount = frames.length;\n\n    // Creating new FrameData with only used frames in the current animation\n    let animationFrameData = null;\n\n    while (framesCount--) {\n      let frameName = frames[framesCount];\n      let cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n      let keyCount = cacheKeys.length;\n\n      while (keyCount--) {\n        let cacheKey = cacheKeys[keyCount];\n        let frameData = this.game.cache.getFrameData(cacheKey);\n        let frame = frameData.getFrameByName(frameName);\n\n        if (frameData && frame && frames.indexOf(frameName) !== -1) {\n          if (!animationFrameData) {\n            animationFrameData = new Phaser.FrameData();\n            for (let i = 0; i < frames.length; i++) {\n              animationFrameData.addFrame(frames[i]);\n            }\n          }\n\n          framesInfo.push({\n            frameName: frameName,\n            atlasName: cacheKey,\n            frameData: animationFrameData,\n            frame: frame\n          });\n        }\n      }\n    }\n\n    framesInfo.reverse();\n    if (framesInfo.length === 0) {\n      console.warn('Animation wasn\\'t created. Please, make sure that you add at least one existing sprite name');\n      return;\n    }\n    // Set Frame Data form the firs exist frame\n    this._frameData = framesInfo[0].frameData;\n    this._anims[name] = new Phaser.Animation(this.game, this.sprite, name, this._frameData, framesInfo, frameRate, loop);\n\n    if (this.sprite.tilingTexture) {\n      this.sprite.refreshTexture = true;\n    }\n\n    return this._anims[name];\n  };\n\n  Phaser.Animation.prototype.updateCurrentFrame = function (signalUpdate, fromPlay) {\n    if (fromPlay === undefined) {\n      fromPlay = false;\n    }\n\n    if (!this._frameData) {\n      // The animation is already destroyed, probably from a callback\n      return false;\n    }\n\n    //  Previous index\n    // return false if there's no current Frame\n    var idx = this.currentFrame ? this.currentFrame.index : false;\n\n    // Update frameData\n    let frameInfo = this._frames[this._frameIndex];\n    this._frameData = frameInfo.frameData;\n    this.currentFrame = frameInfo.frame;\n\n    if (this.currentFrame && (fromPlay || (!fromPlay && !(idx === this.currentFrame.index && this._parent.key === frameInfo.atlasName)))) {\n      // Here call loadTexture if current FrameData used another base Texture Atlas\n      if (this._parent.key !== frameInfo.atlasName) {\n        this._parent.loadTexture(frameInfo.atlasName, frameInfo.frameName, false);\n      } else {\n        this._parent.setFrame(this.currentFrame);\n      }\n    }\n\n    if (this.onUpdate && signalUpdate) {\n      this.onUpdate.dispatch(this, this.currentFrame);\n\n      // False if the animation was destroyed from within a callback\n      return !!this._frameData;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * Override Phaser.Animation.update currentFrame set values\n   * for taking needed texture on the first loop frame\n   */\n  const animationUpdate = Phaser.Animation.prototype.update;\n\n  Phaser.Animation.prototype.update = function () {\n    const currentFrameTmp = this.currentFrame;\n\n    let result = animationUpdate.call(this);\n\n    if (!this.currentFrame || (currentFrameTmp && currentFrameTmp.name !== this.currentFrame.name)) {\n      this.currentFrame = this._frames[this._frameIndex].frame;\n\n      if (this.currentFrame) {\n        this._parent.setFrame(this.currentFrame);\n      }\n\n      if (this.onUpdate) {\n        this.onUpdate.dispatch(this, this.currentFrame);\n\n        // False if the animation was destroyed from within a callback\n        result = !!this._frameData;\n      } else {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n};\n\n/**\n * Next three methods allows calling Phaser.TileSprite, Phaser.Sprite and Emitter.MakeParticles without atlas key parameter or use any string as atlas name.\n * As multiple-atlas support cares about taking texture frame data from the right atlas name, these properties aren't useful now.\n */\nconst fakeTileSpriteAtlasName = 'tileSpriteFakeAtlas';\nconst fakeSpriteAtlasName = 'spriteFakeAtlas';\nconst fakeEmitterAtlasName = 'emitterFakeAtlas';\n\nconst overridePhaserTileSprite = function () {\n  const tileSprite = Phaser.TileSprite;\n  Phaser.TileSprite = function (game, x, y, width, height, key, frame) {\n    if (key && !frame) frame = key;\n\n    tileSprite.call(this, game, x, y, width, height, fakeTileSpriteAtlasName, frame);\n  };\n\n  Phaser.TileSprite = Object.assign(Phaser.TileSprite, tileSprite);\n  Phaser.TileSprite.prototype = tileSprite.prototype;\n};\n\nconst overridePhaserSprite = function () {\n  Phaser.Component.Core.init = function (game, x, y, key, frame) {\n    if (!Phaser.Component.Core.skipTypeChecks) {\n      if (!(game instanceof Phaser.Game)) {\n        throw new Error('The value passed as the `game` argument (' + game + ') is not an instance of Phaser.Game.');\n      }\n\n      if (typeof x !== 'number') {\n        console.warn('The `x` argument value (%s) should be a number.', x);\n        x = 0; // This would be done implicitly in position.set().\n      }\n\n      if (typeof y !== 'number') {\n        console.warn('The `y` argument value (%s) should be a number.', y);\n        y = 0; // This would be done implicitly in position.set().\n      }\n    }\n\n    this.game = game;\n    this.key = key;\n    this.data = {};\n\n    this.position.set(x, y);\n    this.world = new Phaser.Point(x, y);\n    this.previousPosition = new Phaser.Point(x, y);\n\n    this.events = new Phaser.Events(this);\n\n    this._bounds = new Phaser.Rectangle();\n\n    if (this.components.PhysicsBody) {\n      // Enable-body checks for hasOwnProperty; makes sure to lift property from prototype.\n      this.body = this.body;\n    }\n\n    if (this.components.Animation) {\n      this.animations = new Phaser.AnimationManager(this);\n    }\n\n    if (this.components.LoadTexture && key !== null) {\n      if (!frame && typeof key == 'string') {\n        frame = key;\n        key = fakeSpriteAtlasName;\n      }\n      this.loadTexture(key, frame);\n    }\n\n    if (this.components.FixedToCamera) {\n      this.cameraOffset = new Phaser.Point(x, y);\n    }\n  };\n};\n\nconst overridePhaserMakeParticle = function () {\n  if(!Phaser.Particles.Arcade) return;\n\n  const mp = Phaser.Particles.Arcade.Emitter.prototype.makeParticles;\n\n  Phaser.Particles.Arcade.Emitter.prototype.makeParticles = function (...args) {\n    if (typeof args[0] == 'string' && (typeof args[1] == 'string' || Array.isArray(args[1]))) {\n      args.splice(0, 1);\n      return mp.call(this, fakeEmitterAtlasName, ...args);\n    } else {\n      return mp.call(this, fakeEmitterAtlasName, ...args);\n    }\n  };\n};\n\n/**\n * Override spine.Atlas function\n * Adding all available atlases so, Spine can looking thorough the all resources for needed attachment assets\n */\nconst overrideSpineLibrary = function () {\n  // check if Spine using in the current project\n  let spineLibraryAdded = false;\n  try {\n    spineLibraryAdded = spine || null;\n  } catch (e) { }\n\n  if (spineLibraryAdded) {\n    //Override spine.Atlas\n    const spineAtlas = spine.Atlas;\n\n    spine.Atlas = function (json_data, textureLoader) {\n      //call spineAtlas for all added atlases and collect all results\n      let pages = [];\n      let regions = [];\n\n      //Check for exist atlases from embedded atlas jsons data\n      let embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        let embeddedKey = embeddedKeys[keyCount];\n        json_data = embedded[embeddedKey];\n\n        if (!json_data.meta && !json_data.frames) continue;\n\n        spineAtlas.call(this, json_data, textureLoader);\n\n        pages = pages.concat(this.pages);\n        regions = regions.concat(this.regions);\n      }\n\n      this.pages = pages;\n      this.regions = regions;\n    };\n\n    spine.Atlas = Object.assign(spine.Atlas, spineAtlas);\n    spine.Atlas.prototype = spineAtlas.prototype;\n  }\n};\n\n/**\n * Replace frame name key from xp-assets.json data\n * Used only for preview build\n * @param key\n * @returns {*|string}\n */\nconst replaceKey = function (key) {\n  if (xp._assetData.production) return key;\n  let assetsData = xp._assetData.images;\n  for (let category in assetsData) {\n    let imageData = assetsData[category];\n    if (key === imageData.default.replace(/.*(assets\\/)/, \"\")) {\n      if (!imageData.active || imageData.active === '') return key;\n      let libPrefix = imageData.active.replace(/\\/(.*)/, '');\n      key = libPrefix + '/' + category + '/' + imageData.active.replace(/.*([\\\\/])/, \"\");\n    }\n  }\n  return key;\n};\n\n/**\n * Override Phaser.AnimationManager.frameName property\n * This allows to call LoadTexture method to change base sprite texture Atlas, if current atlas doesn't contain needed frameData.\n */\nconst overridePhaserFrameName = function () {\n  const animationManager = Object.create(Phaser.AnimationManager.prototype);\n\n  Object.defineProperty(animationManager, \"frameName\", {\n    get: function () {\n      if (this.currentFrame) {\n        return this.currentFrame.name;\n      }\n      return null;\n    },\n\n    set: function (value) {\n      var gotFrame;\n\n      // replace frame name form xp-assets.json Needed only for preview mode\n      value = replaceKey(value);\n\n      if (typeof value === 'string' && this._frameData && (gotFrame = this._frameData.getFrameByName(value))) {\n        this.currentFrame = gotFrame;\n        this._frameIndex = this.currentFrame.index;\n        this.sprite.setFrame(this.currentFrame);\n      } else {\n        //Search for the frameName in all atlases and call LoadTexture instead of change frameName if such is present\n        let cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n        let keyCount = cacheKeys.length;\n        while (keyCount--) {\n          let cacheKey = cacheKeys[keyCount];\n          let frameData = this.game.cache.getFrameData(cacheKey);\n          let frame = frameData.getFrameByName(value);\n          if (frameData && frame) {\n            this.sprite.loadTexture(cacheKey, value);\n            return;\n          }\n        }\n\n        this.sprite.loadTexture(value);\n        // console.warn('Cannot set frameName: ' + value);\n      }\n    }\n  });\n\n  Phaser.AnimationManager.prototype = animationManager;\n\n  const ignoreAtlasWarningNames = [fakeSpriteAtlasName, fakeTileSpriteAtlasName, fakeEmitterAtlasName];  //Skip warnings for fake atlas names\n\n  // Override Phaser.Cache.prototype.getItem to replace frame name form xp-assets.json Needed only for preview mode\n  const getItem = Phaser.Cache.prototype.getItem;\n\n  Phaser.Cache.prototype.getItem = function (key, cache, method, property) {\n    key = replaceKey(key);\n\n    if (ignoreAtlasWarningNames.indexOf(key) !== -1) {\n      return null;\n    }\n\n    return getItem.call(this, key, cache, method, property);\n  };\n};\n\n/**\n * Extend imageLoader with helper methods\n * imageLoader.loadAllAtlases - loading all atlases\n * imageLoader.loadSpineMultipleAtlas - load all spine animations\n */\nconst extendImageLoader = function () {\n  let webRoot = ad_webroot + '/' + ad_name + '/';\n\n  /**\n   * Check for ad_assets_path parameter\n   * For some of the partners we save texture_atlases to the different folders due to the reason that assets have different scale\n   */\n  if (typeof ad_assets_path !== 'undefined') {\n    webRoot += ad_assets_path;\n  }\n\n  /**\n   * Load all atlases that added to the embedded\n   */\n  imageLoader.loadAllAtlases = () => {\n    let embeddedKeys = Object.keys(embedded);\n    let keyCount = embeddedKeys.length;\n    while (keyCount--) {\n      let embeddedKey = embeddedKeys[keyCount];\n      let json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        imageLoader.loadAtlas(embeddedKey.toString(), webRoot + `texture_sheets/${json_data.meta.image}`);\n      }\n    }\n  };\n\n  /**\n   * Load Spine animations by animation name\n   * @param {...(string||{name: string}|{name: string, scale: number, basePath: string})} args Animation name or Object that contains name and scale\n   * name - animation name, scale - custom Spine animation scale (optional), basePath - custom assets folder name (optional)\n   */\n  imageLoader.loadSpineMultipleAtlas = (...args) => {\n    // check if Spine using in the current project\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {\n      console.warn(`Spine library is not defined. Please add it first before trying to load the Spine animation.`)\n    }\n\n    if (spineLibraryAdded) {\n\n      let argCount = args.length;\n      let basePathNames = {}        // Optional animation assets base paths that adds before animation asset path name.\n\n      //By overriding 'Spine object' creating we add another override for AtlasAttachmentLoader.newRegionAttachment method where change asset name by adding baseName before asset path.\n      //Each time when new Spine object created it overrides AtlasAttachmentLoader.newRegionAttachment method and changes the target asset name.\n      //Overrides for AtlasAttachmentLoader.newMeshAttachment and AtlasAttachmentLoader.newWeightedMeshAttachment are skipped for now, because canvas rendering don't support meshes.\n      PhaserSpine.SpinePlugin.prototype.addSpineFactory = function () {\n        Phaser.GameObjectFactory.prototype.spine = function (x, y, key, scalingVariant, group) {\n          if (group === undefined) {\n            group = this.world;\n          }\n          var spineObject = new PhaserSpine.Spine(this.game, key, scalingVariant);\n          spineObject.setToSetupPose();\n          spineObject.position.x = x;\n          spineObject.position.y = y;\n          return group.add(spineObject);\n        };\n        Phaser.GameObjectCreator.prototype.spine = function (x, y, key, scalingVariant, group) {\n\n          spine.AtlasAttachmentLoader.prototype.newRegionAttachment = function (skin, name, path) {\n            var targetPath = path;\n            var basePath = basePathNames[key]\n\n            if (basePath)\n              targetPath = basePath + path;\n\n            var region = this.atlas.findRegion(targetPath);\n            if (!region) throw \"Region not found in atlas: \" + targetPath + \" (region attachment: \" + name + \")\";\n            var attachment = new spine.RegionAttachment(name);\n            attachment.rendererObject = region;\n            attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n            attachment.regionOffsetX = region.offsetX;\n            attachment.regionOffsetY = region.offsetY;\n            attachment.regionWidth = region.width;\n            attachment.regionHeight = region.height;\n            attachment.regionOriginalWidth = region.originalWidth;\n            attachment.regionOriginalHeight = region.originalHeight;\n            return attachment;\n          };\n\n          return new PhaserSpine.Spine(this.game, key, scalingVariant);\n        };\n      };\n\n      //Check for the atlases exist\n      let firstExistAtlasName = null;\n      let embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        let embeddedKey = embeddedKeys[keyCount];\n        let json_data = embedded[embeddedKey];\n\n        if (json_data.meta && json_data.frames) {\n          firstExistAtlasName = embeddedKey;\n          keyCount = 0;\n        }\n      }\n      \n      if (!firstExistAtlasName) {\n        return console.warn('Please add at least one atlas');\n      }\n\n      while (argCount--) {\n        let arg = args[argCount];\n        switch (typeof arg) {\n          case \"string\":\n            imageLoader.loadSpine(arg, firstExistAtlasName, `${webRoot}/texture_sheets/${firstExistAtlasName}.png`);\n            break;\n          case \"object\":\n            if (arg.basePath)\n              basePathNames[arg.name] = arg.basePath;\n\n            imageLoader.loadSpine(arg.name, firstExistAtlasName, `${webRoot}/texture_sheets/${firstExistAtlasName}.png`, arg.scale ? `@${arg.scale}x` : null);\n            break;\n        }\n      }\n    }\n  };\n};\n\n/**\n * Override Phaser and Spine methods for support multi-atlases, extend imageLoader with loader helpers\n */\n(() => {\n  overridePhaserAnimation();\n  overrideSpineLibrary();\n  overridePhaserFrameName();\n  overridePhaserTileSprite();\n  overridePhaserMakeParticle();\n  overridePhaserSprite();\n  extendImageLoader();\n})();\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n * @version      1.0.0 - October 7th 2015\n */\n\n/**\n * @namespace Phaser\n */\n\n/**\n * An instance of a Particle Storm Plugin.\n *\n * This class is responsible for updating and managing all active emitters created by this plugin.\n *\n * Add it to your game via the Phaser Plugin Manager:\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n *\n * You only need one instance of this plugin installed. It can create multiple emitters, each\n * capable of controlling their own sets of particles.\n *\n * The plugin is not a display object itself, you cannot add it to the display list or position it.\n *\n * @class Phaser.ParticleStorm\n * @constructor\n * @param {Phaser.Game} game - A reference to the current Phaser.Game instance.\n * @param {Phaser.PluginManager} parent - The Phaser Plugin Manager which looks after this plugin.\n */\nPhaser.ParticleStorm = function(game, parent) {\n  Phaser.Plugin.call(this, game, parent);\n\n  /**\n   * An array of Emitter objects.\n   *\n   * @property {array} emitters\n   * @protected\n   */\n  this.emitters = [];\n\n  /**\n   * An object containing references or copies of all the Particle data that has been added via `addData` and `cloneData`.\n   *\n   * Clear this list by calling `clearData()`.\n   *\n   * @property {object} dataList\n   * @protected\n   */\n  this.dataList = {};\n\n  var useNew = PIXI.canUseNewCanvasBlendModes();\n\n  /**\n   * A local helper object which stores blend mode string to blend mode mappings.\n   *\n   * @property {object} blendModeMap\n   * @protected\n   */\n  this.blendModeMap = {\n    NORMAL: [0, 'source-over'],\n    ADD: [1, 'lighter'],\n    MULTIPLY: [2, useNew ? 'multiply' : 'source-over'],\n    SCREEN: [3, useNew ? 'screen' : 'source-over'],\n    OVERLAY: [4, useNew ? 'overlay' : 'source-over'],\n    DARKEN: [5, useNew ? 'darken' : 'source-over'],\n    LIGHTEN: [6, useNew ? 'lighten' : 'source-over'],\n    COLOR_DODGE: [7, useNew ? 'color-dodge' : 'source-over'],\n    COLOR_BURN: [8, useNew ? 'color-burn' : 'source-over'],\n    HARD_LIGHT: [9, useNew ? 'hard-light' : 'source-over'],\n    SOFT_LIGHT: [10, useNew ? 'soft-light' : 'source-over'],\n    DIFFERENCE: [11, useNew ? 'difference' : 'source-over'],\n    EXCLUSION: [12, useNew ? 'exclusion' : 'source-over'],\n    HUE: [13, useNew ? 'hue' : 'source-over'],\n    SATURATION: [14, useNew ? 'saturation' : 'source-over'],\n    COLOR: [15, useNew ? 'color' : 'source-over'],\n    LUMINOSITY: [16, useNew ? 'luminosity' : 'source-over']\n  };\n\n  /**\n   * A local helper object which stores HSV color modes for emitter renderers to use.\n   *\n   * @property {array} hsv\n   * @protected\n   */\n  this.hsv = Phaser.Color.HSVColorWheel();\n};\n\nPhaser.ParticleStorm.prototype = Object.create(Phaser.Plugin.prototype);\nPhaser.ParticleStorm.prototype.constructor = Phaser.ParticleStorm;\n\n/**\n * A constant used for the Sprite Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.SPRITE = 'sprite';\n\n/**\n * A constant used for the BitmapData based Pixel Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.PIXEL = 'pixel';\n\n/**\n * A constant used for the Render Texture based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.RENDERTEXTURE = 'render texture';\n\n/**\n * A constant used for the Sprite Batch based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.SPRITE_BATCH = 'sprite batch';\n\n/**\n * A constant used for the Bitmap Data based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.BITMAP_DATA = 'bitmap data';\n\n/**\n * A constant that contains the base object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE = { value: 0, initial: 0, delta: 0, offset: 0, control: null, calc: 0 };\n\n/**\n * A constant that contains the base 1 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_1 = { value: 1, initial: 0, delta: 0, offset: 0, control: null, calc: 1 };\n\n/**\n * A constant that contains the base 255 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_255 = { value: 0, initial: 0, delta: 0, offset: 0, min: 0, max: 255, control: null, calc: 0 };\n\n/**\n * A constant that contains the base 359 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_359 = { value: 0, initial: 0, delta: 0, offset: 0, min: 0, max: 359, control: null, calc: 0 };\n\n/**\n * A constant that contains the null base object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_NULL = { value: null, initial: 0, delta: 0, offset: 0, control: null, calc: 0 };\n\n/**\n * A constant that contains the base object used by the emit property.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_EMIT = {\n  name: null,\n  value: 0,\n  initial: 0,\n  control: null,\n  at: null,\n  inherit: true,\n  offsetX: 0,\n  offsetY: 0\n};\n\nPhaser.ParticleStorm.Controls = {};\n\nPhaser.ParticleStorm.Zones = {};\n\n/**\n * Creates a new Particle Emitter. You can specify the type of renderer the emitter will use. By default it uses\n * the Sprite emitter, meaning each particle it creates is its own sprite object.\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n * `this.emitter = this.manager.createEmitter();`\n *\n * The emitter is added to the ParticleStorm.emitters array and is updated every frame.\n *\n * @method Phaser.ParticleStorm#createEmitter\n * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n * @return {Phaser.ParticleStorm.Emitter} The Emitter object.\n */\nPhaser.ParticleStorm.prototype.createEmitter = function(renderType, force, scrollSpeed) {\n  var emitter = new Phaser.ParticleStorm.Emitter(this, renderType, force, scrollSpeed);\n\n  this.emitters.push(emitter);\n\n  return emitter;\n};\n\n/**\n * Removes the given Particle Emitter from the plugin. Stops it from being updated.\n *\n * Note that this does not destroy the emitter, or any objects it may in turn have created.\n *\n * @method Phaser.ParticleStorm#removeEmitter\n * @param {Phaser.ParticleStorm.Emitter} emitter - The Emitter object you wish to remove.\n */\nPhaser.ParticleStorm.prototype.removeEmitter = function(emitter) {\n  for (var i = 0; i < this.emitters.length; i++) {\n    if (this.emitters[i] === emitter) {\n      this.emitters.splice(i, 1);\n      return;\n    }\n  }\n};\n\n/**\n * Particle Storm works by taking a specially formatted JavaScript object that contains all of the settings the\n * emitter needs to emit a particle. The settings objects each have a unique string-based key and are stored\n * within the plugin itself, making them available for any Emitter to access.\n *\n * You can either pass in a JavaScript object to this method, or a string. If you pass a string it will use that\n * to look in the Phaser.Cache for a matching JSON object and use that instead, allowing you to externally load\n * particle data rather than create it all at run-time. If you are loading JSON data from the cache then you can\n * also provide an array of strings, and it will load each of them in turn. Note that when doing this the `obj`\n * argument is ignored.\n *\n * @method Phaser.ParticleStorm#addData\n * @param {string|array} key - The unique key for this set of particle data. If no `obj` argument is provided it will use\n *     Phaser.Cache.getJSON to try and get a matching entry. Can be either a string or an Array of strings.\n *     When using an array of strings the `obj` argument is ignored.\n * @param {object} [obj] - The particle data. This is optional and if not provided the `key` argument will be used to look\n *     for the data in the Phaser.Cache. If provided it will be used instead of looking in the Cache.\n *     This should be a well formed object matching the ParticleStorm object structure.\n *     A reference to the object is stored internally, so if you manipulate the original object all freshly emitted particles\n *     will use the new values. To avoid this you can use `ParticleStorm.cloneData` instead.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.addData = function(key, obj) {\n  if (key === undefined) {\n    return this;\n  }\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      this.dataList[key[i]] = this.game.cache.getJSON(key[i]);\n    }\n  } else {\n    if (obj !== undefined) {\n      this.dataList[key] = obj;\n    } else {\n      this.dataList[key] = this.game.cache.getJSON(key);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Gets the particle data based on the given key.\n *\n * @method Phaser.ParticleStorm#getData\n * @memberOf Phaser.ParticleStorm\n * @param {string} [key] - The unique key of the particle data that was added.\n * @return {object} The particle data.\n */\nPhaser.ParticleStorm.prototype.getData = function(key) {\n  return this.dataList[key];\n};\n\n/**\n * Clears particle data sets from memory.\n *\n * You can provide a specific key, or array of keys to remove.\n *\n * If no key is provided it will remove all data sets currently held.\n *\n * @method Phaser.ParticleStorm#clearData\n * @memberOf Phaser.ParticleStorm\n * @param {string|array} [key] - A string or array of strings that map to the data to be removed. If not provided all data sets are removed.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.clearData = function(key) {\n  if (key === undefined) {\n    //  Nuke them all\n    this.dataList = {};\n  } else {\n    if (Array.isArray(key)) {\n      for (var i = 0; i < key.length; i++) {\n        delete this.dataList[key[i]];\n      }\n    } else {\n      delete this.dataList[key];\n    }\n  }\n\n  return this;\n};\n\n/**\n * This method works in exactly the same way as ParticleStorm.addData, with the exception that clones of\n * the particle data objects are stored internally, instead of references to the original objects.\n *\n * @method Phaser.ParticleStorm#cloneData\n * @memberOf Phaser.ParticleStorm\n * @param {string|array} key - The unique key for this set of particle data. If no `obj` argument is provided it will use\n *     Phaser.Cache.getJSON to try and get a matching entry. Can be either a string or an Array of strings.\n *     When using an array of strings the `obj` argument is ignored.\n * @param {object} [obj] - The particle data. This is optional and if not provided the `key` argument will be used to look\n *     for the data in the Phaser.Cache. If provided it will be used instead of looking in the Cache.\n *     This should be a well formed object matching the ParticleStorm object structure.\n *     The settings object, whether from the Cache or given as an argument, is cloned before being stored locally.\n *     If you wish to add a reference to an object instead of cloning it then see `addData`.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.cloneData = function(key, obj) {\n  if (key === undefined) {\n    return this;\n  }\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      this.dataList[key[i]] = Phaser.Utils.extend(true, this.game.cache.getJSON(key[i]));\n    }\n  } else {\n    if (obj !== undefined) {\n      this.dataList[key] = Phaser.Utils.extend(true, obj);\n    } else {\n      this.dataList[key] = Phaser.Utils.extend(true, this.game.cache.getJSON(key));\n    }\n  }\n\n  return this;\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Point Zone. This is a zone consisting of a single coordinate from which particles\n * are emitted.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createPointZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [x=0] - The x coordinate of the zone.\n * @param {number} [y=0] - The y coordinate of the zone.\n * @return {Phaser.ParticleStorm.Zones.Point} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createPointZone = function(x, y) {\n  return new Phaser.ParticleStorm.Zones.Point(this.game, x, y);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Line Zone. This is a zone consisting of two sets of points, the start\n * and end of the line respectively. Particles can be emitted from anywhere on this line segment.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createLineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [x1=0] - The x coordinate of the start of the line.\n * @param {number} [y1=0] - The y coordinate of the start of the line.\n * @param {number} [x2=0] - The x coordinate of the end of the line.\n * @param {number} [y2=0] - The y coordinate of the end of the line.\n * @return {Phaser.ParticleStorm.Zones.Line} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createLineZone = function(x1, y1, x2, y2) {\n  return new Phaser.ParticleStorm.Zones.Line(this.game, x1, y1, x2, y2);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Rectangle Zone. This is a zone consisting of a rectangle shape.\n * Particles can be emitted from anywhere within this rectangle.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createRectangleZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [width=0] - The width of the Rectangle. Should always be a positive value.\n * @param {number} [height=0] - The height of the Rectangle. Should always be a positive value.\n * @return {Phaser.ParticleStorm.Zones.Rectangle} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createRectangleZone = function(width, height) {\n  return new Phaser.ParticleStorm.Zones.Rectangle(this.game, width, height);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Circle Zone. This is a zone consisting of a circle shape.\n * Particles can be emitted from anywhere within this circle.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createCircleZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [radius=0] - The radius of the circle.\n * @return {Phaser.ParticleStorm.Zones.Circle} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createCircleZone = function(radius) {\n  return new Phaser.ParticleStorm.Zones.Circle(this.game, radius);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Ellipse Zone. This is a zone consisting of an ellipse shape.\n * Particles can be emitted from anywhere within this ellipse.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createEllipseZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [width=0] - The overall width of this ellipse.\n * @param {number} [height=0] - The overall height of this ellipse.\n * @return {Phaser.ParticleStorm.Zones.Ellipse} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createEllipseZone = function(width, height) {\n  return new Phaser.ParticleStorm.Zones.Ellipse(this.game, width, height);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Linear Spline Zone. A Linear Spline consists of a set of points through\n * which a linear path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createLinearSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createLinearSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 0, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Bezier Spline Zone. A Bezier Spline consists of a set of points through\n * which a bezier curved path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createBezierSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createBezierSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 1, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Catmull Rom Spline Zone. A Catmull Spline consists of a set of points through\n * which a catmull curved path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createCatmullSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createCatmullSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 2, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Spline Zone. A spline consists of a set of points through\n * which a path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {integer} [mode=0] - The type of spline to create. 0 = linear, 1 = bezier and 2 = catmull.\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createSplineZone = function(mode, resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, mode, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Text Zone. This is a zone consisting of a Phaser.Text object.\n * Particles can be emitted from anywhere within the Text object.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createTextZone\n * @memberOf Phaser.ParticleStorm\n * @param {Phaser.Text} text - The Text object that is used to create this zone.\n * @return {Phaser.ParticleStorm.Zones.Text} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createTextZone = function(text) {\n  return new Phaser.ParticleStorm.Zones.Text(this.game, text);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates an Image Zone. This is a zone consisting of an image which certain types of\n * Emitter renderer can read from in order to extract pixel data, which can then be used to tint\n * or otherwise modify the properties of the particles if emits.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createImageZone\n * @memberOf Phaser.ParticleStorm\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n * @return {Phaser.ParticleStorm.Zones.Image} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createImageZone = function(key) {\n  return new Phaser.ParticleStorm.Zones.Image(this.game, key);\n};\n\n/**\n * Update all emitters in this plugin. Only emitters that have `enabled` set will be updated.\n *\n * You can tell an emitter to never be updated by the plugin by setting its `manualUpdate` property\n * to `true`. This allows you to update it as you see fit, rather than have the plugin do it\n * automatically.\n *\n * Set ParticleStorm.active to `false` to stop the plugin from updating _all_ emitters.\n *\n * @method Phaser.ParticleStorm#update\n * @memberOf Phaser.ParticleStorm\n * @protected\n */\nPhaser.ParticleStorm.prototype.update = function() {\n  if (!this.active) {\n    return;\n  }\n\n  for (var i = 0; i < this.emitters.length; i++) {\n    if (this.emitters[i].enabled && !this.emitters[i].manualUpdate) {\n      this.emitters[i].update();\n    }\n  }\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An instance of a Particle Storm Emitter.\n *\n * This class is responsible for updating and managing all active particles created by this emitter.\n *\n * Add it to your game via the plugin:\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n * `this.emitter = this.manager.createEmitter();`\n *\n * You can have multiple emitters running, each controlling their own set of particles.\n *\n * Emitters are not display objects and you cannot add it to the display list or position it.\n * The renderer created by this emitter is the entity that lives on the display list.\n *\n * @class Phaser.ParticleStorm.Emitter\n * @constructor\n * @param {Phaser.ParticleStorm} parent - The ParticleStorm Plugin.\n * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n */\nPhaser.ParticleStorm.Emitter = function(parent, renderType, force, scrollSpeed) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = parent.game;\n\n  /**\n   * @property {Phaser.ParticleStorm} parent - The Particle Storm plugin.\n   */\n  this.parent = parent;\n\n  /**\n   * The Particle Renderer this emitter is using.\n   * @property {Phaser.ParticleStorm.Renderer.Base} renderer\n   * @default\n   */\n  this.renderer = null;\n\n  /**\n   * The type of renderer this emitter is using.\n   * @property {string} renderType\n   */\n  this.renderType = null;\n\n  /**\n   * A set of useful common static functions.\n   * @property {Phaser.ParticleStorm.Graph} graph\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The enabled state of this emitter. If set to `false` it won't emit any new particles or update\n   * alive particles. You can toggle this directly or via Emitter.paused.\n   * @property {boolean} enabled\n   */\n  this.enabled = false;\n\n  /**\n   * Is this emitter updated automatically by the Particle Storm plugin, or should it be\n   * updated manually via the game code?\n   *\n   * If `false` (the default) the plugin will update this emitter automatically for you.\n   * If `true` then you need to call the `update` method directly from your game code.\n   *\n   * @property {boolean} manualUpdate\n   * @default\n   */\n  this.manualUpdate = false;\n\n  /**\n   * The scrolling speed of the particles in pixels per frame.\n   * The amount specified in this Point object is added to the particles position each frame\n   * after their internal velocities and calculations have taken place.\n   *\n   * @property {Phaser.Point} scrollSpeed\n   */\n  this.scrollSpeed = new Phaser.Point();\n\n  /**\n   * Amount of force to be applied to all particles every update.\n   * This is in addition to any particle velocities or forces defined in the particle data.\n   * This object can be manipulated in real-time to provide for effects such as varying wind\n   * or gravity.\n   *\n   * @property {Phaser.Point} force\n   */\n  this.force = new Phaser.Point();\n\n  /**\n   * This signal is dispatched each time a particle is emitted by this emitter.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onEmit = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was emitted.\n   *\n   * This signal is dispatched BEFORE the first time the particle is rendered, so\n   * you can adjust positions, colors, textures and other properties the callback.\n   *\n   * @property {Phaser.Signal} onEmit\n   * @default\n   */\n  this.onEmit = null;\n\n  /**\n   * This signal is dispatched each time a particle enters a 'complete' state.\n   * A particle can only do this if it has a fixed lifespan (i.e. a lifespan value\n   * greater than 0) and has its `keepAlive` property set to `true`. This enables\n   * you to emit particles with timespan based events that when they complete are\n   * not immediately killed ready for re-use, but instead enter an 'idle' completed\n   * state.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onComplete = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was killed.\n   *\n   * @property {Phaser.Signal} onComplete\n   * @default\n   */\n  this.onComplete = null;\n\n  /**\n   * This signal is dispatched each time a particle is killed.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onKill = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was killed.\n   *\n   * @property {Phaser.Signal} onKill\n   * @default\n   */\n  this.onKill = null;\n\n  /**\n   * The class type of the Particle that is emitted.\n   *\n   * You can change this to your own custom object, as long as it extends ParticleStorm.Particle.\n   *\n   * If you change it in an emitter that has already emitted some particles then you will create\n   * a mixed data-type emitter. You are recommended to clear this emitter first before changing\n   * the particleClass.\n   *\n   * @property {object} particleClass\n   * @default Phaser.ParticleStorm.Particle\n   */\n  this.particleClass = Phaser.ParticleStorm.Particle;\n\n  /**\n   * The Timer used by this emitter for repeated and looped emissions.\n   *\n   * @property {Phaser.Timer} timer\n   */\n  this.timer = this.game.time.create(false);\n\n  /**\n   * The Phaser.TimerEvent object that was created by the last call to emit that had a repeat value set.\n   * If you set-up multiple repeated emits then this property will be overwritten each time, so it's up\n   * to you to store your own reference locally before creating another repeated emitter.\n   *\n   * @property {Phaser.TimerEvent} timerEvent\n   * @default\n   */\n  this.timerEvent = null;\n\n  /**\n   * Contains all active particles being managed by this emitter.\n   * When a particle is killed it is moved to the `pool` array.\n   *\n   * @property {array} list\n   * @protected\n   */\n  this.list = [];\n\n  /**\n   * A pool of particle objects waiting to be used. When a particle is activated it moves from the\n   * pool to the `list` array. It moves back to the pool when killed.\n   *\n   * @property {array} pool\n   * @protected\n   */\n  this.pool = [];\n\n  /**\n   * Contains references to all particles that were emitted in the last call to Emitter.emit.\n   * The contents of this array are reset every single time `Emitter.emit` is called, so if\n   * you need to retain references to the particles that were just emitted you should make\n   * a shallow copy of this array in your own game code.\n   *\n   * @property {array} batch\n   * @protected\n   */\n  this.batch = [];\n\n  /**\n   * An array containing all active GravityWells belonging to this emitter.\n   *\n   * @property {array} wells\n   * @protected\n   */\n  this.wells = [];\n\n  /**\n   * Internal Point object used by the emit methods.\n   * @property {Phaser.Point} _rnd\n   * @private\n   */\n  this._rnd = new Phaser.Point();\n\n  /**\n   * Internal Point object used by the emit methods for particle spacing.\n   * @property {Phaser.Point} _step\n   * @private\n   */\n  this._step = new Phaser.Point();\n\n  /**\n   * Internal counter for the number of parent particles emitted this batch.\n   * @property {integer} _pCount\n   * @private\n   */\n  this._pCount = 0;\n\n  /**\n   * Internal var holding the delay properties for this batch.\n   * @property {object} _delay\n   * @private\n   */\n  this._delay = { enabled: false, start: 0, inc: 0, visible: false };\n\n  this.init(renderType, force, scrollSpeed);\n};\n\nPhaser.ParticleStorm.Emitter.prototype = {\n  /**\n   * Establishes the renderer and clears the particle list and pool ready for use.\n   *\n   * This is called automatically by the Phaser PluginManager.\n   *\n   * @method Phaser.ParticleStorm.Emitter#init\n   * @protected\n   * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n   * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n   * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n   *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n   */\n  init: function(renderType, force, scrollSpeed) {\n    if (renderType === undefined) {\n      renderType = Phaser.ParticleStorm.SPRITE;\n    }\n\n    var w = this.game.width;\n    var h = this.game.height;\n\n    switch (renderType) {\n      case Phaser.ParticleStorm.SPRITE:\n        this.renderer = new Phaser.ParticleStorm.Renderer.Sprite(this);\n        break;\n\n      case Phaser.ParticleStorm.PIXEL:\n        this.renderer = new Phaser.ParticleStorm.Renderer.Pixel(this, w, h);\n        break;\n\n      case Phaser.ParticleStorm.RENDERTEXTURE:\n        this.renderer = new Phaser.ParticleStorm.Renderer.RenderTexture(this, w, h);\n        break;\n\n      case Phaser.ParticleStorm.SPRITE_BATCH:\n        this.renderer = new Phaser.ParticleStorm.Renderer.SpriteBatch(this);\n        break;\n\n      case Phaser.ParticleStorm.BITMAP_DATA:\n        this.renderer = new Phaser.ParticleStorm.Renderer.BitmapData(this, w, h);\n        break;\n\n      default:\n        console.warn('ParticleManager.init - Invalid renderType given');\n        return false;\n    }\n\n    this.renderType = renderType;\n\n    if (force) {\n      this.force.set(force.x, force.y);\n    }\n\n    if (scrollSpeed) {\n      this.scrollSpeed.set(scrollSpeed.x, scrollSpeed.y);\n    }\n\n    this.list = [];\n    this.pool = [];\n    this.wells = [];\n\n    this.enabled = true;\n  },\n\n  /**\n   * Adds the Particle Renderer to the game world.\n   *\n   * You can optionally specify a Phaser.Group for the renderer to be added to.\n   * If not provided it will be added to the World group.\n   *\n   * @method Phaser.ParticleStorm.Emitter#addToWorld\n   * @param {Phaser.Group} [group] - The group to add the renderer to. If not specified it will be added to the World.\n   * @return {Phaser.Image|Phaser.Sprite|Phaser.Group} The display object that contains the particle renderer.\n   */\n  addToWorld: function(group) {\n    if (group === undefined) {\n      group = this.game.world;\n    }\n\n    return this.renderer.addToWorld(group);\n  },\n\n  /**\n   * Adds a Gravity Well to this Particle Manager. A Gravity Well creates a force on the\n   * particles to draw them towards a single point.The force applied is inversely proportional\n   * to the square of the distance from the particle to the point, in accordance with Newton's\n   * law of gravity.\n   *\n   * A Gravity Well only effects particles owned by the emitter that created it.\n   *\n   * Gravity Wells don't have any display properties, i.e. they are not Sprites.\n   *\n   * @method Phaser.ParticleStorm.Emitter#createGravityWell\n   * @param {number} [x=0] - The x coordinate of the Gravity Well, the point towards which particles are drawn.\n   * @param {number} [y=0] - The y coordinate of the Gravity Well, the point towards which particles are drawn.\n   * @param {number} [power=0] - The strength of the gravity well. Larger numbers create stronger forces. Start with low values like 1.\n   * @param {number} [epsilon=100] - The minimum distance for which gravity is calculated.\n   *                               Particles closer than this distance experience a gravity force as if\n   *                               they were this distance away. This stops the gravity effect blowing\n   *                               up as distances get small. For realistic gravity effects you will want\n   *                               a small epsilon (~1), but for stable visual effects a larger\n   *                               epsilon (~100) is often better.\n   * @param {number} [gravity=50] - The gravity constant.\n   * @return {Phaser.ParticleStorm.GravityWell} The GravityWell object.\n   */\n  createGravityWell: function(x, y, power, epsilon, gravity) {\n    var well = new Phaser.ParticleStorm.GravityWell(this, x, y, power, epsilon, gravity);\n\n    this.wells.push(well);\n\n    return well;\n  },\n\n  /**\n   * Seeds this emitter with `qty` number of Particle objects, and places them in the pool ready for use.\n   * This allows you to pre-seed the pool and avoid object creation in hot parts of your game code.\n   *\n   * @method Phaser.ParticleStorm.Emitter#seed\n   * @param {integer} qty - The amount of Particle objects to create in the pool.\n   * @return {Phaser.ParticleStorm.Emitter} This Emitter.\n   */\n  seed: function(qty) {\n    for (var i = 0; i < qty; i++) {\n      var particle = new Phaser.ParticleStorm.Particle(this);\n\n      this.pool.push(particle);\n    }\n\n    return this;\n  },\n\n  /**\n   * Tells the Emitter to emit one or more particles, with a delay before it starts.\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * The `config` argument is an object that contains additional emission settings.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emitDelayed\n   * @param {number} delay - The delay (in ms) before this emit will be run. It's added to an internal timed queue.\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {object} [config] - An emitter configuration object. See `Emitter.emit` for the full object property docs.\n   * @return {Phaser.TimerEvent} The TimerEvent object created for this delayed emit.\n   */\n  emitDelayed: function(delay, key, x, y, config) {\n    if (!this.enabled || !this.parent.dataList[key] || delay <= 0) {\n      return null;\n    }\n\n    this.timerEvent = this.timer.add(delay, this.emit, this, key, x, y, config);\n\n    this.timer.start();\n\n    return this.timerEvent;\n  },\n\n  /**\n   * Tells the Emitter to emit one or more particles.\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * The `config` argument is an object that contains additional emission settings.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emit\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {object} [config] - An emitter configuration object.\n   * @param {number} [config.total] - The number of particles to emit (-1 means 'all' when the zone distribution is 'full')\n   * @param {number} [config.repeat] - How many times this emit should repeat. A value of -1 means 'forever'.\n   * @param {number} [config.frequency] - If `repeat` is -1 or > 0 this controls the ms that will elapse between each repeat.\n   * @param {number} [config.xStep=0] - The amount of horizontal spacing in pixels to add between each particle emitted in this call. This is in addition to the `x` argument.\n   * @param {number} [config.yStep=0] - The amount of vertical spacing in pixels to add between each particle emitted in this call. This is in addition to the `y` argument.\n   * @param {number|object} [config.delay] - If a number it sets the delay of the first particle to `delay` ms. This is in addition to any delay set in the particle data.\n   * @param {number} [config.delay.start=0] - A starting delay value in ms before any particle in this emit call is activated.\n   * @param {number} [config.delay.step=0] - If this emit call will emit multiple particles the step controls how many ms to add between each ones delay.\n   * @param {boolean} [config.delay.visible=false] - Should particles render and be visible, even when delayed?\n   * @param {Phaser.ParticleStorm.Zones.Base} [config.zone] - The zone to emit the particles from.\n   * @param {number} [config.percent] - If a spline based zone this value tells the emitter how far along the spline to emit the particles from. Between 0 and 100.\n   * @param {boolean} [config.random] - If a zone is set this will emit the particles from random locations within the zone.\n   * @param {boolean} [config.full] - If a zone is set this will emit the particles from all locations in the zone (only applies to specific types of zone like Images)\n   * @param {boolean} [config.setAlpha] - If the zone supports it will the particle alpha be set?\n   * @param {boolean} [config.setColor] - If the zone supports it will the particle color be set?\n   * @param {integer} [config.step] - Controls the iteration through the pixel data. Only for 'full' zone emissions.\n   * @param {integer|array} [config.spacing] - The pixel spacing between each emitted particle.\n   * @param {object} [config.radiate] - Emits the particle in a radial arc.\n   * @param {number} [config.radiate.velocity] - The speed to emit the particle when radiating.\n   * @param {number} [config.radiate.from] - The starting angle to radiate from.\n   * @param {number} [config.radiate.to] - The angle to radiate to.\n   * @param {object} [config.radiateFrom] - Emits the particle radiating away from a given point.\n   * @param {number} [config.radiateFrom.x] - The x coordinate of the point to radiate away from.\n   * @param {number} [config.radiateFrom.y] - The y coordinate of the point to radiate away from.\n   * @param {number} [config.radiateFrom.velocity] - The speed to emit the particle when radiating.\n   * @return {Phaser.ParticleStorm.Particle|array} The particle or an array of particles that were emitted,\n   *     or null if no particle could be created.\n   */\n  emit: function(key, x, y, config) {\n    if (!this.enabled || !this.parent.dataList[key]) {\n      return null;\n    }\n\n    this.batch = [];\n\n    this._pCount = 0;\n\n    this._step.x = 0;\n    this._step.y = 0;\n\n    if (x === undefined) {\n      x = 0;\n    }\n    if (y === undefined) {\n      y = 0;\n    }\n\n    //  ------------------------------------------------\n    //  Fast-exit: No config object\n    //  ------------------------------------------------\n\n    if (!config) {\n      return this.emitParticle(key, x, y, null);\n    }\n\n    //  ------------------------------------------------\n    //  The number of particles to emit\n    //  ------------------------------------------------\n\n    var total = config.hasOwnProperty('total') ? config.total : 1;\n\n    //  ------------------------------------------------\n    //  Batch position spacing\n    //  ------------------------------------------------\n\n    if (config.xStep > 0) {\n      this._step.x = config.xStep;\n    } else {\n      this._step.x = 0;\n    }\n\n    if (config.yStep > 0) {\n      this._step.y = config.yStep;\n    } else {\n      this._step.y = 0;\n    }\n\n    //  ------------------------------------------------\n    //  The particle delays per emit\n    //  ------------------------------------------------\n\n    this._delay.enabled = false;\n\n    if (config.delay) {\n      this._delay.enabled = true;\n\n      if (typeof config.delay === 'number') {\n        this._delay.start = config.delay;\n        this._delay.step = 0;\n        this._delay.visible = false;\n      } else {\n        this._delay.start = config.delay.start ? config.delay.start : 0;\n        this._delay.step = config.delay.step ? config.delay.step : 0;\n        this._delay.visible = config.delay.visible ? true : false;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Zone\n    //  ------------------------------------------------\n    if (config.zone) {\n      if ((config.random === undefined && config.full === undefined && config.percent === undefined) || config.random) {\n        //  Neither 'random' or 'full' are set, so we default to 'random'\n        config.zone.emit(this, key, x, y, total, config.setAlpha, config.setColor);\n      } else if (config.percent === undefined && (config.full !== undefined || !config.random)) {\n        //  'full' is set, or 'random' is specifically set to false\n        config.zone.emitFull(this, key, x, y, config.step, config.spacing, config.setAlpha, config.setColor);\n      } else if (config.percent !== undefined) {\n        //  'percent' is set for a Spline zone\n        var pnt = 0;\n\n        if (typeof config.percent === 'number') {\n          pnt = config.percent;\n        } else {\n          //  min/max?\n          if (config.percent.hasOwnProperty('min')) {\n            pnt = this.game.rnd.between(config.percent.min, config.percent.max);\n          } else if (config.percent.callback) {\n            pnt = config.percent.callback.call(config.percent.context, this);\n          }\n        }\n\n        config.zone.emitPercent(this, key, x, y, total, pnt);\n      }\n    } else {\n      //  ------------------------------------------------\n      //  No zone\n      //  ------------------------------------------------\n      for (var i = 0; i < total; i++) {\n        this.emitParticle(key, x, y, null);\n      }\n    }\n\n    if (config.radiate) {\n      //  ------------------------------------------------\n      //  Radiate\n      //  ------------------------------------------------\n      for (var c = 0; c < this.batch.length; c++) {\n        this.batch[c].radiate(config.radiate.velocity, config.radiate.from, config.radiate.to);\n      }\n    } else if (config.radiateFrom) {\n      //  ------------------------------------------------\n      //  RadiateFrom\n      //  ------------------------------------------------\n      for (var c = 0; c < this.batch.length; c++) {\n        this.batch[c].radiateFrom(config.radiateFrom.x, config.radiateFrom.y, config.radiateFrom.velocity);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Repeat\n    //  ------------------------------------------------\n    var repeat = config.hasOwnProperty('repeat') ? config.repeat : 0;\n\n    if (repeat !== 0) {\n      var frequency = config.hasOwnProperty('frequency') ? config.frequency : 250;\n\n      //  Or the repeats will stack-up\n      delete config.repeat;\n\n      if (repeat === -1) {\n        this.timerEvent = this.timer.loop(frequency, this.emit, this, key, x, y, config);\n      } else if (repeat > 0) {\n        this.timerEvent = this.timer.repeat(frequency, repeat, this.emit, this, key, x, y, config);\n      }\n\n      this.timer.start();\n    }\n\n    //  Reset the pCounter\n    this._pCount = 0;\n\n    return this.batch;\n  },\n\n  /**\n   * Tells the Emitter to emit one single particle.\n   *\n   * **This method shouldn't usually be called directly. See `Emitter.emit`.**\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emitParticle\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {Phaser.ParticleStorm.Particle} [parent=null] - The parent of this particle, if any.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted.\n   */\n  emitParticle: function(key, x, y, parent) {\n    var particle = this.pool.pop();\n\n    if (!particle) {\n      particle = new this.particleClass(this);\n    }\n\n    particle.parent = parent;\n\n    //  ------------------------------------------------\n    //  If the coordinates are arrays it uses them as min/max pairs\n    //  ------------------------------------------------\n    if (Array.isArray(x)) {\n      x = this.game.rnd.between(x[0], x[1]);\n    }\n\n    if (Array.isArray(y)) {\n      y = this.game.rnd.between(y[0], y[1]);\n    }\n\n    //  ------------------------------------------------\n    //  If the coordinates are sequential based on previous particle\n    //  ------------------------------------------------\n\n    x += this._step.x * this._pCount;\n    y += this._step.y * this._pCount;\n\n    particle.reset(this.renderer, x, y, this.parent.dataList[key]);\n\n    if (particle.alive) {\n      //  Apply delay (in addition to any set in the particle data)\n\n      if (!parent && this._delay.enabled) {\n        particle.delay += this._delay.start + this._pCount * this._delay.step;\n        particle.delayVisible = this._delay.visible;\n      }\n\n      this.list.push(particle);\n\n      this.batch.push(particle);\n\n      if (!parent) {\n        this._pCount++;\n      }\n    } else {\n      particle.kill();\n\n      if (this.onKill) {\n        this.onKill.dispatch(this, particle);\n      }\n\n      this.pool.push(particle);\n    }\n\n    return particle;\n  },\n\n  /**\n   * Update all particles in this emitter.\n   *\n   * This method is called by the Particle Storm plugin automatically unless\n   * `manualUpdate` has been set to `true`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#update\n   * @return {number} The number of active particles in this manager.\n   */\n  update: function() {\n    var elapsed = this.game.time.elapsed;\n\n    this.renderer.preUpdate();\n\n    //  Update all the particles and destroy those that request it\n    for (var i = this.list.length - 1; i >= 0; i--) {\n      var p = this.list[i];\n\n      if (!p.ignoreScrollSpeed) {\n        p.transform.x += this.scrollSpeed.x;\n        p.transform.y += this.scrollSpeed.y;\n      }\n\n      for (var w = 0; w < this.wells.length; w++) {\n        if (this.wells[w].active) {\n          this.wells[w].step(p);\n        }\n      }\n\n      if (!p.step(elapsed, this.force)) {\n        p.kill();\n        this.pool.push(p);\n        this.list.splice(i, 1);\n      }\n    }\n\n    this.renderer.postUpdate();\n\n    return this.list.length;\n  },\n\n  /**\n   * This is an internal method that takes a emission data object, time value and\n   * life percentage and calculates the new number of child particles that should be emitted.\n   *\n   * @method Phaser.ParticleStorm.Emitter#updateFrequency\n   * @protected\n   * @param {object} emit - The emission data object describing what and when to emit.\n   * @param {number} elapsedTime - How long has it been since the last time this was updated (in milliseconds)\n   * @param {number} lastPercent - The lifePercent last time this was updated.\n   * @param {number} lifePercent - How far through its life is this particle (from 0 to 1)\n   * @return {number} The number of children for this particle to emit.\n   */\n  updateFrequency: function(emit, elapsedTime, lastPercent, lifePercent) {\n    //  If the emit frequency is specified as a list of time intervals\n    //  and number of children then ...\n    if (emit.at) {\n      //  Total is the number to be created for all time intervals\n      //  between lastPercent and lifePercent\n      var total = 0;\n\n      for (var i = 0; i < emit.at.length; i++) {\n        var o = emit.at[i];\n\n        //  Inclusive at the low end for time == 0 only, always inclusive at the high end\n        if ((o.time > lastPercent || (o.time === 0 && lastPercent === 0)) && o.time <= lifePercent) {\n          //  If emit.at.value is between 0 and 1 then it expresses a\n          //  percentage random chance to create a child at this time\n          if (o.value > 0 && o.value < 1.0) {\n            if (Math.random() < o.value) {\n              total += 1;\n            }\n          } else {\n            //  All other values are taken literally\n            total += o.value;\n          }\n        }\n      }\n\n      return total;\n    }\n\n    //  Alternatively, we have a fixed emission frequency or a control graph\n    return this.graph.getParamArea(emit, lastPercent, lifePercent) * elapsedTime;\n  },\n\n  /**\n   * Call a function on each _alive_ particle in this emitter.\n   *\n   * Additional arguments for the callback can be specified after the context parameter.\n   * For example:\n   *\n   * `Emitter.forEach(headTowards, this, 100, 500)`\n   *\n   * .. would invoke the `headTowards` function with the arguments `(particle, 100, 500)`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#forEach\n   * @param {function} callback - The function that will be called for each alive particle. The particle will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the particle.\n   */\n  forEach: function(callback, callbackContext) {\n    if (arguments.length <= 2) {\n      for (var i = 0; i < this.list.length; i++) {\n        callback.call(callbackContext, this.list[i]);\n      }\n    } else {\n      var args = [null];\n\n      for (var i = 2; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      for (var i = 0; i < this.list.length; i++) {\n        args[0] = this.list[i];\n        callback.apply(callbackContext, args);\n      }\n    }\n  },\n\n  /**\n   * Call a function on each _alive_ particle that was emitted in the last call.\n   * When you call `emit` the particles that are emitted are temporarily added to the\n   * Emitter.batch array. This method allows you to call a function on all particles\n   * within that array.\n   *\n   * Additional arguments for the callback can be specified after the context parameter.\n   * For example:\n   *\n   * `Emitter.forEach(headTowards, this, 100, 500)`\n   *\n   * .. would invoke the `headTowards` function with the arguments `(particle, 100, 500)`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#forEachNew\n   * @param {function} callback - The function that will be called for each alive particle. The particle will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the particle.\n   */\n  forEachNew: function(callback, callbackContext) {\n    if (this.batch.length === 0) {\n      return;\n    }\n\n    if (arguments.length <= 2) {\n      for (var i = 0; i < this.batch.length; i++) {\n        callback.call(callbackContext, this.batch[i]);\n      }\n    } else {\n      var args = [null];\n\n      for (var i = 2; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      for (var i = 0; i < this.batch.length; i++) {\n        args[0] = this.batch[i];\n        callback.apply(callbackContext, args);\n      }\n    }\n  },\n\n  /**\n   * Gets a Particle from this emitter based on the given index.\n   *\n   * Only 'live' particles are checked.\n   *\n   * @method Phaser.ParticleStorm.Emitter#getParticle\n   * @param {integer} [index=0] - The index of the particle to get.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted.\n   */\n  getParticle: function(index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    if (this.list[index]) {\n      return this.list[index];\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Renders a Debug panel for this Emitter using the Phaser.Debug class.\n   *\n   * It displays the force, scroll speed and numbers of alive and dead particles.\n   *\n   * The size of the rendered debug panel is 360x70.\n   *\n   * You should **never** use this in a production game, as it costs CPU/GPU time to display it.\n   *\n   * @method Phaser.ParticleStorm.Emitter#debug\n   * @param {number} [x=0] - The x coordinate to render the Debug panel at.\n   * @param {number} [y=0] - The y coordinate to render the Debug panel at.\n   */\n  debug: function(x, y) {\n    var d = this.game.debug;\n\n    if (d) {\n      d.start(x + 4, y + 16, 'rgb(255, 255, 255)', 132);\n\n      d.context.fillStyle = 'rgba(0, 74, 128, 0.5)';\n      d.context.fillRect(x, y, 360, 70);\n\n      var fx = this.force.x + '';\n      var fy = this.force.y + '';\n\n      d.line('Force:', fx.substr(0, 8), fy.substr(0, 8));\n      d.line('Scroll Speed:', this.scrollSpeed.x, this.scrollSpeed.y);\n      d.line('Alive:', 'Dead:', 'Total:');\n      d.line(this.alive, this.dead, this.total);\n\n      d.stop();\n    }\n  },\n\n  /**\n   * Destroys this emitter.\n   *\n   * Calls `clear` on the renderer and kills all particles in its lists.\n   *\n   * @method Phaser.ParticleStorm.Emitter#destroy\n   */\n  destroy: function() {\n    if (this.renderer.clear) {\n      this.renderer.clear();\n    }\n\n    this.renderer.destroy();\n    this.renderer = null;\n\n    for (var i = this.list.length - 1; i >= 0; i--) {\n      this.list[i].kill();\n      this.list.splice(i, 1);\n    }\n\n    this.list = [];\n    this.pool = [];\n    this.batch = [];\n    this.wells = [];\n  }\n};\n\n/**\n * The paused state of the Emitter.\n *\n * If paused is set to `true` then no calls to `emit` or `update` will be processed.\n *\n * Set to `false` to resume updating of the particles.\n *\n * @name Phaser.ParticleStorm.Emitter#paused\n * @property {boolean} paused\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'paused', {\n  get: function() {\n    return !this.enabled;\n  },\n\n  set: function(value) {\n    this.enabled = !value;\n  }\n});\n\n/**\n * The total number of particles being managed by this emitter, including both\n * alive and dead particles.\n *\n * @name Phaser.ParticleStorm.Emitter#total\n * @property {integer} total\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'total', {\n  get: function() {\n    return this.alive + this.dead;\n  }\n});\n\n/**\n * The total number of active (alive) particles being managed by this emitter.\n *\n * @name Phaser.ParticleStorm.Emitter#alive\n * @property {integer} alive\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'alive', {\n  get: function() {\n    return this.list.length;\n  }\n});\n\n/**\n * The total number of dead particles in the pool, ready to be re-used by this emitter.\n *\n * @name Phaser.ParticleStorm.Emitter#dead\n * @property {integer} dead\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'dead', {\n  get: function() {\n    return this.pool.length;\n  }\n});\n\nPhaser.ParticleStorm.Emitter.prototype.constructor = Phaser.ParticleStorm.Emitter;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A single particle created and updated by a Particle Emitter.\n *\n * It can belong to only one Emitter at any one time.\n *\n * Particles themselves don't have any display properties, i.e. they are not Sprites. If a Particle\n * is added to an Emitter Renderer that uses Sprites, then a new Sprite object will be created and\n * assigned to the Particles `sprite` property. Not all types of renderer do this, for example the\n * Pixel renderer doesn't use sprites at all.\n *\n * Particles are frequently pooled, so don't add any parameter initialization into the constructor should you extend it.\n * Instead place it inside the Particle.reset method.\n *\n * @class Phaser.ParticleStorm.Particle\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that owns this particle.\n */\nPhaser.ParticleStorm.Particle = function(emitter) {\n  /**\n   * The emitter that owns this particle.\n   * @property {Phaser.ParticleStorm.Emitter} emitter\n   */\n  this.emitter = emitter;\n\n  /**\n   * The renderer responsible for rendering this particle.\n   * @property {Phaser.ParticleStorm.Renderer.Base} renderer\n   */\n  this.renderer = null;\n\n  /**\n   * A set of useful common static functions.\n   * @property {Phaser.ParticleStorm.Graph} graph\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The transform control for this particle. Contains properties such as position, velocity and acceleration.\n   * @property {Phaser.ParticleStorm.Controls.Transform} transform\n   */\n  this.transform = new Phaser.ParticleStorm.Controls.Transform(this);\n\n  /**\n   * The color control for this particle. Contains color related properties including red, green, blue, alpha, tint and blendMode.\n   * @property {Phaser.ParticleStorm.Controls.Color} color\n   */\n  this.color = new Phaser.ParticleStorm.Controls.Color(this);\n\n  /**\n   * The texture control for this particle. Contains texture related properties including key, frame and animation handling.\n   * @property {Phaser.ParticleStorm.Controls.Texture} texture\n   */\n  this.texture = new Phaser.ParticleStorm.Controls.Texture(this);\n\n  /**\n   * @property {Phaser.ParticleStorm.Particle} parent - The parent particle, if it has one.\n   * @default\n   */\n  this.parent = null;\n\n  /**\n   * The lifespan of the particle is the length of time in milliseconds that it will live for once spawned.\n   * Set the lifespan to zero to allow it to live forever. However particles cannot live forever if you use\n   * any parameter controls at all, as they require an expiry date.\n   * @property {number} lifespan\n   * @default\n   */\n  this.lifespan = 2000;\n\n  /**\n   * Should the particle be kept alive and rendering once it has completed its lifespan?\n   * This can only be set to true if lifespan is a value above zero.\n   * When a particle is 'kept alive' it will never dispatch an onKill event.\n   * @property {boolean} keepAlive\n   * @default\n   */\n  this.keepAlive = false;\n\n  /**\n   * The delay in milliseconds that the particle will wait for until spawning.\n   * @property {number} delay\n   * @default\n   */\n  this.delay = 0;\n\n  /**\n   * Controls if the particle should still be rendered or not, even when delayed.\n   * This allows you to display a particle in place before its lifecycle starts.\n   * @property {boolean} delayVisible\n   * @default\n   */\n  this.delayVisible = false;\n\n  /**\n   * The current age of this particle as a percentage of its total lifespan. A value between 0 and 1.\n   * @property {number} life\n   * @default\n   */\n  this.life = 0;\n\n  /**\n   * If this particle is part of a Sprite based renderer then the sprite associated with this particle is referenced\n   * in this property. Otherwise this value is `null`.\n   * @property {Phaser.Sprite} sprite\n   * @default\n   */\n  this.sprite = null;\n\n  /**\n   * The visible state of this particle.\n   * @property {boolean} visible\n   */\n  this.visible = false;\n\n  /**\n   * A particle is considered 'complete' when it reaches 100% of its lifespan.\n   * If it has no lifespan it is never 'complete'.\n   * @property {boolean} isComplete\n   */\n  this.isComplete = false;\n\n  /**\n   * Should this particle ignore any force applied by its emitter?\n   * @property {boolean} ignoreForce\n   * @default\n   */\n  this.ignoreForce = false;\n\n  /**\n   * Should this particle ignore any scrollSpeed applied by its emitter?\n   * @property {boolean} ignoreScrollSpeed\n   * @default\n   */\n  this.ignoreScrollSpeed = false;\n\n  /**\n   * @property {object} emit - The emit data of this particle.\n   * @private\n   */\n  this.emit = {};\n\n  /**\n   * @property {number} _age - Internal helper for tracking the current age of this particle.\n   * @private\n   */\n  this._age = 0;\n\n  /**\n   * @property {number} _lastPercent - Internal tracking var for previous lifePercent.\n   * @private\n   */\n  this._lastPercent = 0;\n\n  /**\n   * @property {number} _numToEmit - Internal accumulator to track the fractions of a particle to be emitted across multiple frames.\n   * @private\n   */\n  this._numToEmit = 0;\n};\n\nPhaser.ParticleStorm.Particle.prototype = {\n  /**\n   * Reset all of the particle properties back to their defaults, ready for spawning.\n   *\n   * If the optional `data` parameter is provided then Particle.create will be automatically called.\n   *\n   * @method Phaser.ParticleStorm.Particle#reset\n   * @param {Phaser.ParticleStorm.Renderer.Base} renderer - The renderer responsible for rendering this particle.\n   * @param {number} x - The x position of this Particle in world space.\n   * @param {number} y - The y position of this Particle in world space.\n   * @param {object} [data] - The data this particle will use when emitted.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  reset: function(renderer, x, y, data) {\n    this.renderer = renderer;\n\n    this.transform.reset();\n    this.color.reset();\n    this.texture.reset();\n\n    this.emit = Object.create(Phaser.ParticleStorm.BASE_EMIT);\n\n    this.isComplete = false;\n    this.keepAlive = false;\n\n    this.delay = 0;\n    this.delayVisible = false;\n\n    this.ignoreForce = false;\n    this.ignoreScrollSpeed = false;\n\n    this.alive = false;\n    this.lifespan = 2000;\n    this.life = 0;\n    this.visible = false;\n\n    this._age = 0;\n    this._lastPercent = 0;\n    this._numToEmit = 0;\n\n    if (data !== undefined) {\n      this.create(x, y, data);\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates this Particle. Should be called only after the particle has been reset.\n   *\n   * It works by populating all of the local settings with the values contained in the `data` object.\n   * It's then added to the renderer and drawn once with its initial values.\n   *\n   * @method Phaser.ParticleStorm.Particle#create\n   * @param {number} x - The x position of this Particle in world space.\n   * @param {number} y - The y position of this Particle in world space.\n   * @param {object} data - The data this particle will use to populate its settings.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  create: function(x, y, data) {\n    //  ------------------------------------------------\n    //  Lifespan\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('lifespan')) {\n      this.lifespan = this.graph.getMinMax(data.lifespan);\n    }\n\n    this.keepAlive = data.keepAlive;\n\n    //  ------------------------------------------------\n    //  Delay\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('delay')) {\n      this.delay = this.graph.getMinMax(data.delay);\n    }\n\n    this.ignoreForce = data.ignoreForce;\n    this.ignoreScrollSpeed = data.ignoreScrollSpeed;\n\n    //  ------------------------------------------------\n    //  Update controls\n    //  ------------------------------------------------\n\n    this.transform.init(x, y, data);\n    this.color.init(data);\n    this.texture.init(data);\n\n    //  ------------------------------------------------\n    //  Emit child\n    //  ------------------------------------------------\n\n    if (data.emit) {\n      this.emit = Object.create(data.emit);\n    }\n\n    this.visible = data.visible === false ? false : true;\n\n    this.alive = true;\n\n    if (this.parent && this.parent.emit && this.parent.emit.inherit) {\n      this.alive = this.onInherit(this.parent);\n    }\n\n    if (this.alive) {\n      //  Make sure all parameters are set\n      this.transform.step();\n      this.color.step();\n\n      //  Add a display system object for this particle\n      var sprite = this.renderer.add(this);\n\n      if (sprite) {\n        //  Only the TextureControl has a post-add step (which defines the animation frames)\n        this.texture.step(data, sprite);\n      }\n\n      this.onEmit();\n\n      if (this.emitter.onEmit) {\n        this.emitter.onEmit.dispatch(this.emitter, this);\n      }\n\n      //  Draw the particle in its initial state\n      this.renderer.update(this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Update this particle for a single time step.\n   *\n   * Decides when to emit particles and when to die.\n   *\n   * @method Phaser.ParticleStorm.Particle#step\n   * @param {number} elapsedTime - How long has it been since the last time this was updated (in milliseconds)\n   * @param {Phaser.Point} [force] - A force which is applied to this particle as acceleration on every update call.\n   * @return {boolean} True to continue living, false if this particle should die now.\n   */\n  step: function(elapsedTime, force) {\n    //  Keep track of the particles age\n    this._age += elapsedTime;\n\n    //  If there's a delay\n    if (this.delay) {\n      if (this._age < this.delay) {\n        this.renderer.update(this);\n\n        //  Exit (but don't kill the particle)\n        return true;\n      } else {\n        //  The delay has expired. Clear the delay value and reset the particle _age to zero (newborn)\n        this.delay = 0;\n        this._age = 0;\n      }\n    }\n\n    this._lastPercent = this.life;\n\n    //  Calculate lifespan of this particle, commencing when delay expired (if there was one)\n    if (this.lifespan > 0) {\n      this.life = Math.min(this._age / this.lifespan, 1.0);\n    }\n\n    if (force && !this.ignoreForce) {\n      this.transform.velocity.x.value += force.x;\n      this.transform.velocity.y.value += force.y;\n    }\n\n    this.transform.step();\n    this.color.step();\n\n    this.onUpdate();\n\n    if (this.alive) {\n      //  How many should we release in this time interval (summed with any fractions we didn't emit previously)\n      this._numToEmit += this.emitter.updateFrequency(this.emit, elapsedTime, this._lastPercent, this.life);\n\n      //  Create all the 'whole' emissions\n      while (this._numToEmit >= 1.0) {\n        this.emitChild();\n      }\n\n      this.renderer.update(this);\n    }\n\n    if (!this.isComplete && this.life === 1.0) {\n      this.isComplete = true;\n\n      if (this.emitter.onComplete) {\n        this.emitter.onComplete.dispatch(this.emitter, this);\n      }\n    }\n\n    //  Return false if this particle should die, otherwise true\n    return this.life < 1.0 || this.keepAlive;\n  },\n\n  /**\n   * Emit a child particle from this one.\n   *\n   * @method Phaser.ParticleStorm.Particle#emitChild\n   * @private\n   */\n  emitChild: function() {\n    var x = this.graph.getMinMax(this.emit.offsetX) | 0;\n    var y = this.graph.getMinMax(this.emit.offsetY) | 0;\n\n    //  Does this emitter specify a creation circle or rect?\n    if (this.emit.rect) {\n      // pick a random location inside the rectangle\n      var rect = this.emit.rect;\n      x = Math.random() * rect.width + rect.x;\n      y = Math.random() * rect.height + rect.y;\n    } else if (this.emit.circle) {\n      var radius = this.emit.circle;\n      // randomly pick a y coordinate inside the circle\n      y = Math.random() * radius * 2 - radius;\n      // calculate the horizontal span from the point (0, y) to the circumference (Pythagoras: x2 + y2 = r2)\n      var span = Math.sqrt(radius * radius - y * y);\n      // randomly pick an x coordinate in that span on either side of the x = 0 line\n      x = Math.random() * span * 2 - span;\n    }\n\n    var key = this.emit.name;\n\n    if (typeof key !== 'string') {\n      key = this.getChildKey(this.emit.name);\n    }\n\n    if (key) {\n      var p = this.emitter.emitParticle(key, this.transform.x + x, this.transform.y + y, this);\n\n      //  Apply any overwrite parameters to the new child particle\n      if (p && this.emit.overwrite) {\n        this.applyOverwrite(this.emit.overwrite, p);\n      }\n    }\n\n    this._numToEmit -= 1.0;\n  },\n\n  /**\n   * A blank method that allows you to control overwriting specific particle properties\n   * on emission. Extend the Particle class then use this method as required.\n   *\n   * @method Phaser.ParticleStorm.Particle#applyOverwrite\n   * @param {object} data - The overwrite data.\n   * @param {Phaser.ParticleStorm.Particle} particle - The Particle object.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  applyOverwrite: function(data, particle) {\n    return particle;\n  },\n\n  /**\n   * Work out what child particle should be emitted by this particle.\n   * Handles simple name string, lists of name strings, and the \"at\" format.\n   *\n   * @method Phaser.ParticleStorm.Particle#getChildKey\n   * @param {object} param - A child defining data structure.\n   * @returns {string|null} The name of the child to emit.\n   */\n  getChildKey: function(param) {\n    if (Array.isArray(param)) {\n      return this.emitter.game.rnd.pick(param);\n    }\n\n    if (param.at !== undefined && param.at.length > 0) {\n      //  It's a list of child types over time using the \"at\" list syntax, find the appropriate one\n      var ret = param.at[0].value;\n\n      for (var i = 0; i < param.at.length; i++) {\n        if (param.at[i].time > this.life) {\n          break;\n        }\n\n        ret = param.at[i].value;\n      }\n\n      return ret;\n    }\n\n    return null;\n  },\n\n  /**\n   * Set this particles velocity components to radiate away from its current position by the given angle.\n   *\n   * @method Phaser.ParticleStorm.Particle#radiate\n   * @param {object} velocity - An object containing a min/max pair, an array of strings containing discrete values, or a single discrete value.\n   * @param {number} [from=0] - If both arc variables are undefined, radiate in all directions.\n   * @param {number} [to=359] - If both arc variables are defined the particle will radiate within the arc range defined.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  radiate: function(velocity, from, to) {\n    //  If `from` is defined, but `to` isn't, we set `to` to match `from`\n    if (to === undefined && from !== undefined) {\n      to = from;\n    } else {\n      if (from === undefined) {\n        from = 0;\n      }\n      if (to === undefined) {\n        to = 359;\n      }\n    }\n\n    var v = velocity;\n\n    if (velocity.hasOwnProperty('min')) {\n      v = this.graph.getMinMax(velocity);\n    } else if (Array.isArray(velocity)) {\n      v = parseFloat(this.emitter.game.rnd.pick(velocity), 10);\n    }\n\n    var angle = ((Math.random() * (to - from) + from) * Math.PI) / 180.0;\n\n    this.transform.velocity.x.value = Math.sin(angle) * v;\n    this.transform.velocity.y.value = -Math.cos(angle) * v;\n\n    return this;\n  },\n\n  /**\n   * Set this particles velocity components to radiate away from a given point.\n   *\n   * @method Phaser.ParticleStorm.Particle#radiateFrom\n   * @param {number} x - The central x location to radiate from.\n   * @param {number} y - The central y location to radiate from.\n   * @param {object} velocity - An object containing a min/max pair, an array of strings containing discrete values, or a single discrete value.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  radiateFrom: function(x, y, velocity) {\n    var v = velocity;\n\n    if (velocity.hasOwnProperty('min')) {\n      v = this.graph.getMinMax(velocity);\n    } else if (Array.isArray(velocity)) {\n      v = parseFloat(this.emitter.game.rnd.pick(velocity), 10);\n    }\n\n    var dx = this.transform.x - x;\n    var dy = this.transform.y - y;\n    var d = Math.sqrt(dx * dx + dy * dy);\n\n    this.transform.velocity.x.value = (dx * v) / d;\n    this.transform.velocity.y.value = (dy * v) / d;\n\n    return this;\n  },\n\n  /**\n   * Set this particles velocity components to _approximately_ head towards the given coordinates.\n   *\n   * It will set the velocity to ensure it arrives within the lifespan of this particle.\n   * However it does not factor in other forces acting on the particle such as\n   * Emitter.force or Gravity Wells.\n   *\n   * If you specify a zone it will pick a random point from anywhere within the zone and\n   * add the x and y values to it, using the x and y values as the placement of the zone.\n   *\n   * @method Phaser.ParticleStorm.Particle#target\n   * @param {object} data - The target data.\n   * @param {number} [data.x] - The x location to head to. Must be specified if no zone is given.\n   * @param {number} [data.y] - The y location to head to. Must be specified if no zone is given.\n   * @param {Phaser.ParticleStorm.Zones.Base} [data.zone] - A zone. A random point within the zone will be selected as the target.\n   * @param {string} [data.speed] - Either 'linear', 'reverse' or 'yoyo'.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  target: function(data) {\n    var x = 0;\n    var y = 0;\n    var t = this.transform;\n\n    if (data.x) {\n      x = data.x;\n    }\n\n    if (data.y) {\n      y = data.y;\n    }\n\n    if (data.zone) {\n      var p = data.zone.getRandom();\n\n      x += p.x;\n      y += p.y;\n    }\n\n    var angle = Math.atan2(y - t.y, x - t.x);\n\n    var dx = t.x - x;\n    var dy = t.y - y;\n\n    var speed = Math.sqrt(dx * dx + dy * dy) / (this.lifespan / 1000);\n\n    var vx = Math.cos(angle) * speed * t.time.physicsElapsed;\n    var vy = Math.sin(angle) * speed * t.time.physicsElapsed;\n\n    if (data.speed) {\n      this.graph.fromControl({ value: vx * 2, control: data.speed }, t.velocity.x);\n      this.graph.fromControl({ value: vy * 2, control: data.speed }, t.velocity.y);\n    } else {\n      t.velocity.x.value = vx;\n      t.velocity.y.value = vy;\n    }\n\n    return this;\n  },\n\n  /**\n   * Sets a new lifespan for this particle.\n   *\n   * The current age of the particle is reset to zero when this is called.\n   *\n   * @method Phaser.ParticleStorm.Particle#setLife\n   * @param {number|object} lifespan - The new lifespan of this particle in ms. Either a value or a min/max pair.\n   * @param {boolean} [keepAlive=false] - Should the particle be kept alive at the end of its lifespan?\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  setLife: function(lifespan, keepAlive) {\n    this.lifespan = this.graph.getMinMax(lifespan);\n\n    this.life = 0;\n    this._age = 0;\n    this._lastPercent = 0;\n\n    this.isComplete = false;\n    this.keepAlive = keepAlive;\n\n    return this;\n  },\n\n  /**\n   * Turns off this particle, leaving it ready to be restarted with reset().\n   *\n   * @method Phaser.ParticleStorm.Particle#kill\n   */\n  kill: function() {\n    this.alive = false;\n\n    this.renderer.kill(this);\n\n    this.onKill();\n  },\n\n  /**\n   * Called when this Particle is first emitted.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onEmit\n   * @param {Phaser.ParticleStorm.Particle} [parent] - The parent particle that emitted this one, if any.\n   */\n  onEmit: function() {},\n\n  /**\n   * Called when this Particle is updated by the Particle Manager.\n   *\n   * It is called at the end of the Particle.step method, just before this particle emits\n   * any children and before it's sent to the renderer. If you set Particle.alive to false\n   * in this method then the particle will not emit any children or be rendered.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onUpdate\n   */\n  onUpdate: function() {},\n\n  /**\n   * Called when this Particle inherits values from a parent particle.\n   *\n   * This method must return a boolean value. If you wish for this particle to be used\n   * by the Particle Manager and rendered then return `true`. If you want the particle\n   * to be immediately killed then return `false`.\n   *\n   * This is method is for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onInherit\n   * @param {Phaser.ParticleStorm.Particle} parent - The parent particle that emitted this one.\n   * @return {boolean} True if this particle should be added to the pool and rendered, otherwise false if it should be killed.\n   */\n  onInherit: function() {\n    return true;\n  },\n\n  /**\n   * Called when this Particle is killed by its emitter, or directly in code.\n   *\n   * A killed particle is moved from the active particle list back to the pool, ready\n   * for use again in the future. It is not destroyed, it is hibernated for later use.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onKill\n   */\n  onKill: function() {}\n};\n\n/**\n * The life percent value of this particle rounded between 0 and 100.\n *\n * If you need a value between 0 and 1 then use `Particle.life` instead.\n *\n * @name Phaser.ParticleStorm.Particle#lifePercent\n * @property {integer} lifePercent - The current life percentage of this particle. Rounded between 0 and 100.\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Particle.prototype, 'lifePercent', {\n  get: function() {\n    return Math.round(this.life * 100);\n  }\n});\n\n/**\n * Sets the frequency at which this particle emits children.\n *\n * @name Phaser.ParticleStorm.Particle#frequency\n * @property {number|object} value - A value/control type object defining a set rate or a graph of rates across lifespan.\n */\nObject.defineProperty(Phaser.ParticleStorm.Particle.prototype, 'frequency', {\n  get: function() {\n    return this.emit.value;\n  },\n\n  set: function(value) {\n    this.emit.value = value;\n  }\n});\n\nPhaser.ParticleStorm.Particle.prototype.constructor = Phaser.ParticleStorm.Particle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Richard Lord\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n/**\n * A Gravity Well creates a force on the particles to draw them towards a single point.\n * The force applied is inversely proportional to the square of the distance from the particle to the point,\n * in accordance with Newton's law of gravity.\n *\n * A Gravity Well only effects particles owned by the emitter that created it.\n *\n * Gravity Wells don't have any display properties, i.e. they are not Sprites.\n *\n * This class was directly inspired by the work of Richard Lord and some of the jsdocs\n * use his original text. As such this class is released under an MIT License.\n *\n * @class Phaser.ParticleStorm.GravityWell\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The Emitter that owns this Gravity Well.\n * @param {number} [x=0] - The x coordinate of the Gravity Well, the point towards which particles are drawn.\n * @param {number} [y=0] - The y coordinate of the Gravity Well, the point towards which particles are drawn.\n * @param {number} [power=0] - The strength of the gravity well. Larger numbers create stronger forces. Start with low values like 1.\n * @param {number} [epsilon=100] - The minimum distance for which gravity is calculated.\n *                               Particles closer than this distance experience a gravity force as if\n *                               they were this distance away. This stops the gravity effect blowing\n *                               up as distances get small. For realistic gravity effects you will want\n *                               a small epsilon (~1), but for stable visual effects a larger\n *                               epsilon (~100) is often better.\n * @param {number} [gravity=50] - The gravity constant.\n */\nPhaser.ParticleStorm.GravityWell = function(emitter, x, y, power, epsilon, gravity) {\n  if (x === undefined) {\n    x = 0;\n  }\n  if (y === undefined) {\n    y = 0;\n  }\n  if (power === undefined) {\n    power = 0;\n  }\n  if (epsilon === undefined) {\n    epsilon = 100;\n  }\n  if (gravity === undefined) {\n    gravity = 50;\n  }\n\n  /**\n   * @property {Phaser.ParticleStorm.Emitter} emitter - The Emitter that this Gravity Well belongs to.\n   */\n  this.emitter = emitter;\n\n  /**\n   * @property {Phaser.Time} time - A reference to the Phaser.Time system.\n   */\n  this.time = emitter.game.time;\n\n  /**\n   * @property {Phaser.Point} position - The position of the Gravity Well in world space.\n   */\n  this.position = new Phaser.Point(x, y);\n\n  /**\n   * @property {boolean} active - When `true` the Gravity Well is in effect. When `false` it doesn't influence particles.\n   */\n  this.active = true;\n\n  /**\n   * @property {number} _gravity - Internal gravity var.\n   * @private\n   */\n  this._gravity = gravity;\n\n  /**\n   * @property {number} _power - Internal power var.\n   * @private\n   */\n  this._power = 0;\n\n  /**\n   * @property {number} _epsilon - Internal epsilon var.\n   * @private\n   */\n  this._epsilon = 0;\n\n  this.power = power;\n  this.epsilon = epsilon;\n};\n\nPhaser.ParticleStorm.GravityWell.prototype = {\n  /**\n   * Applies the influence of this Gravity Well to the given Particle.\n   *\n   * This is called automatically by the Emitter the Gravity Well belongs to.\n   *\n   * @method Phaser.ParticleStorm.GravityWell#step\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to adjust based on this Gravity Well.\n   */\n  step: function(particle) {\n    var x = this.position.x - particle.transform.x;\n    var y = this.position.y - particle.transform.y;\n    var dSq = x * x + y * y;\n\n    if (dSq === 0) {\n      return;\n    }\n\n    var d = Math.sqrt(dSq);\n\n    if (dSq < this._epsilon) {\n      dSq = this._epsilon;\n    }\n\n    var factor = (this._power * this.time.elapsed) / (dSq * d);\n\n    particle.transform.velocity.x.value += x * factor;\n    particle.transform.velocity.y.value += y * factor;\n  }\n};\n\n/**\n * The minimum distance for which the gravity force is calculated.\n * Particles closer than this distance experience the gravity as if\n * they were this distance away. This stops the gravity effect blowing\n * up as distances get small.  For realistic gravity effects you will want\n * a small epsilon (~1), but for stable visual effects a larger\n * epsilon (~100) is often better.\n *\n * @name Phaser.ParticleStorm.GravityWell#epsilon\n * @property {number} epsilon\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'epsilon', {\n  get: function() {\n    return Math.sqrt(this._epsilon);\n  },\n\n  set: function(value) {\n    this._epsilon = value * value;\n  }\n});\n\n/**\n * The strength of the gravity force - larger numbers produce a stronger force.\n *\n * @name Phaser.ParticleStorm.GravityWell#power\n * @property {number} power\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'power', {\n  get: function() {\n    return this._power / this.gravity;\n  },\n\n  set: function(value) {\n    this._power = value * this.gravity;\n  }\n});\n\n/**\n * The gravity constant against which the forces are calculated.\n *\n * @name Phaser.ParticleStorm.GravityWell#gravity\n * @property {number} gravity\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'gravity', {\n  get: function() {\n    return this._gravity;\n  },\n\n  set: function(value) {\n    var pwr = this.power;\n    this._gravity = value;\n    this.power = pwr;\n  }\n});\n\nPhaser.ParticleStorm.GravityWell.prototype.constructor = Phaser.ParticleStorm.GravityWell;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A collection of common functions.\n *\n * @class Phaser.ParticleStorm.Graph\n * @static\n */\nPhaser.ParticleStorm.Graph = {\n  /**\n   * A constant used for the Linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_LINEAR: [\n    { x: 0, y: 1 },\n    { x: 1, y: 0 }\n  ],\n\n  /**\n   * A constant used for the reversed linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_REVERSE: [\n    { x: 0, y: 0 },\n    { x: 1, y: 1 }\n  ],\n\n  /**\n   * A constant used for yoyo'd linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_YOYO: [\n    { x: 0, y: 0 },\n    { x: 0.5, y: 1 },\n    { x: 1, y: 0 }\n  ],\n\n  /**\n   * Get the control value by linear interpolation of points in the control array\n   * for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1,\n   * other points may lie between those.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlValue\n   * @param {object} control - The control curve for a parameter.\n   * @param {number} percent - A value between 0 and 1.\n   * @return {number} The control value at 'percent'.\n   */\n  getControlValue: function(control, percent) {\n    var index = 0;\n    var point = control[index];\n\n    if (point.x === percent) {\n      return point.y;\n    }\n\n    while (point.x <= percent) {\n      if (index >= control.length - 1) {\n        return point.x;\n      }\n\n      point = control[++index];\n    }\n\n    var prev = control[index - 1];\n\n    //  Linear interpolation: f(x) = y0 + (y1 - y0) * (x - x0) / (x1 - x0)\n    return prev.y + ((percent - prev.x) * (point.y - prev.y)) / (point.x - prev.x);\n  },\n\n  /**\n   * Create a list of all control values between the start and end times given.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlValues\n   * @param {object} control - The control graph.\n   * @param {number} previousPercent - The starting \"x\" value.\n   * @param {number} nowPercent - The ending \"x\" value.\n   * @return {array} An array of point objects: {x: number, y: number}[]\n   */\n  getControlValues: function(control, previousPercent, nowPercent) {\n    // create a list containing the starting point at previousPercent, interpolated if necessary\n    var firsty = Phaser.ParticleStorm.Graph.getControlValue(control, previousPercent);\n    var points = [{ x: previousPercent, y: firsty }];\n\n    // no time has elapsed, that's all she wrote\n    if (previousPercent >= nowPercent) {\n      return points;\n    }\n\n    // scan the control array for x values between previousPercent and nowPercent, add them to the list\n    for (var i = 0; i < control.length; i++) {\n      if (control[i].x > previousPercent) {\n        if (control[i].x < nowPercent) {\n          points.push(control[i]);\n        } else {\n          // early out, array is in ascending order so there's no need to search the rest\n          break;\n        }\n      }\n    }\n\n    // push the terminal point at nowPercent, interpolated if necessary\n    points.push({ x: nowPercent, y: Phaser.ParticleStorm.Graph.getControlValue(control, nowPercent) });\n\n    return points;\n  },\n\n  /**\n   * Get a value for the area under a control graph (if there is one on param)\n   * Otherwise just return the \"value\" field of param.\n   *\n   * @method Phaser.ParticleStorm.Graph#getParamArea\n   * @param {object} param - The parameter to evaluate.\n   * @param {number} previousPercent - The life percent to begin the calculation from (0 .. 1).\n   * @param {number} nowPercent - The life percent where the calculation ends (0 .. 1).\n   * @return {number} The area found.\n   */\n  getParamArea: function(param, previousPercent, nowPercent) {\n    if (param.control) {\n      return param.value * Phaser.ParticleStorm.Graph.getControlArea(param.control, previousPercent, nowPercent);\n    }\n\n    return param.value;\n  },\n\n  /**\n   * Calculate the area under a graph between two points.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlArea\n   * @param {object} control - The graph definition as a list of objects with \"x\" and \"y\" fields.\n   * @param {number} previousPercent - The starting \"x\" value.\n   * @param {number} nowPercent - The ending \"x\" value.\n   * @return {number} The area.\n   */\n  getControlArea: function(control, previousPercent, nowPercent) {\n    // find all the points where the control array changes slope (including the points at previousPercent and nowPercent)\n    var points = Phaser.ParticleStorm.Graph.getControlValues(control, previousPercent, nowPercent);\n\n    if (previousPercent >= nowPercent) {\n      return points[0].y;\n    }\n\n    // the total area under the lines is the sum areas of each trapezoid formed by a line segment, two verticals and the (y = 0) axis\n    //\n    //    /|\\ __\n    //   /A|B|C |\n    //  |__|_|__|\n    //\n    var area = points.length > 1 ? 0 : points.y;\n    var prev = points[0];\n\n    for (var i = 1; i < points.length; i++) {\n      var next = points[i];\n      // area of a trapezoid is .5 * b * (h1 + h2)\n      area += 0.5 * (next.x - prev.x) * (prev.y + next.y);\n      prev = next;\n    }\n\n    return area;\n  },\n\n  /**\n   * Return a value for an object which has an \"initial\" field.\n   * The field can be either a number or a min-max range.\n   *\n   * Number (eg. 1900.123)\n   * Range (eg. { \"min\":-4.0, \"max\":123.45 })\n   * Object with initial Number (eg. { \"initial\": 1900.123, ... })\n   * Object with initial Range (eg. { \"initial\": { \"min\":-4.0, \"max\":123.45 }, ... })\n   * Object without initial value at all (returns 0)\n   *\n   * If there is no \"initial\" field, this function will return 0.\n   *\n   * @method Phaser.ParticleStorm.Graph#getMinMaxInitial\n   * @param {object} object - The object to evaluate.\n   * @return {number} The value found or zero if not found.\n   */\n  getMinMaxInitial: function(object) {\n    if (object.initial !== undefined) {\n      return Phaser.ParticleStorm.Graph.getMinMax(object.initial);\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Checks if the given value is numeric or not.\n   *\n   * @method Phaser.ParticleStorm.Graph#isNumeric\n   * @param {object|number} n - The value to be checked.\n   * @return {boolean} True if the value given is numeric, otherwise false.\n   */\n  isNumeric: function(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  },\n\n  /**\n   * Pick a random number in the range between \"min\" and \"max\".\n   * If the 'value' is not an object with \"min\" and \"max\" in it, return 'value'.\n   *\n   * @method Phaser.ParticleStorm.Graph#getMinMax\n   * @param {object|number} value - An object with \"min\" and \"max\" values, or a plain number.\n   * @return {number} The number picked.\n   */\n  getMinMax: function(value) {\n    if (value !== undefined && value !== null && value.min !== undefined && value.max !== undefined) {\n      return value.min + Math.random() * (value.max - value.min);\n    }\n\n    return value;\n  },\n\n  /**\n   * Takes a source and destination graph control object and copies the values from `src` to `dest`.\n   *\n   * @method Phaser.ParticleStorm.Graph#clone\n   * @param {object} src - The source control object from which the values are copied.\n   * @param {object} dest - The destination control object into which the values are set.\n   * @return {object} The destination object.\n   */\n  clone: function(src, dest) {\n    dest.value = src.value;\n    dest.initial = src.initial;\n    dest.delta = src.delta;\n    dest.offset = src.offset;\n    dest.min = src.min;\n    dest.max = src.max;\n    dest.control = src.control;\n\n    return dest;\n  },\n\n  /**\n   * Takes a particle data setting and extracts just its value and control properties.\n   *\n   * @method Phaser.ParticleStorm.Graph#fromControl\n   * @param {number|object} data - The source value or object from which the values are extracted.\n   * @param {object} obj - The destination control object into which the values are set.\n   */\n  fromControl: function(data, obj) {\n    if (data.value !== undefined) {\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data.value);\n    }\n\n    if (data.control) {\n      if (data.control === 'linear') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_LINEAR;\n      } else if (data.control === 'reverse') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_REVERSE;\n      } else if (data.control === 'yoyo') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_YOYO;\n      } else {\n        //  Reference the original object - could use Object.create here, but would rather\n        //  save some memory and just use references.\n        obj.control = data.control;\n      }\n    }\n  },\n\n  /**\n   * Takes a particle data setting and extracts its values into the graph control object.\n   *\n   * @method Phaser.ParticleStorm.Graph#fromData\n   * @param {number|object} data - The source value or object from which the values are extracted.\n   * @param {object} obj - The destination control object into which the values are set.\n   * @return {boolean} True if it was able to extract any data, false if it couldn't find any.\n   */\n  fromData: function(data, obj) {\n    if (data === undefined || data === null) {\n      return false;\n    }\n\n    if (typeof data === 'number') {\n      obj.value = data;\n      return true;\n    }\n\n    if (data.min !== undefined) {\n      //  Allows you to do: rotation: { min: 0, max: 90 }\n      //  assumes assignment to the value property only.\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data);\n    } else if (data.value !== undefined) {\n      //  Allows rotation: { value: { min: 0, max: 90 } }\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data.value);\n    }\n\n    if (data.initial !== undefined) {\n      obj.initial = Phaser.ParticleStorm.Graph.getMinMax(data.initial);\n    }\n\n    if (data.delta !== undefined) {\n      obj.delta = Phaser.ParticleStorm.Graph.getMinMax(data.delta);\n    }\n\n    if (data.offset !== undefined) {\n      obj.offset = Phaser.ParticleStorm.Graph.getMinMax(data.offset);\n    }\n\n    if (data.control) {\n      if (data.control === 'linear') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_LINEAR;\n      } else if (data.control === 'reverse') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_REVERSE;\n      } else if (data.control === 'yoyo') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_YOYO;\n      } else {\n        //  Reference the original object - could use Object.create here, but would rather\n        //  save some memory and just use references.\n        obj.control = data.control;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Return the value of this parameter object.\n   *\n   * Get the control value by linear interpolation of points in the control array for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1, other points may lie between those\n   *\n   * @method Phaser.ParticleStorm.Graph#getValue\n   * @param {number|object} obj - The source graph control object from which the value is extracted.\n   * @param {number} percent - The current lifePercent value of a particle.\n   * @return {number} The value of the parameter object at this point in the particles life.\n   */\n  getValue: function(obj, percent) {\n    if (!obj.control || percent === undefined) {\n      return obj.value;\n    }\n\n    var point = obj.control[0];\n\n    //  Very start of the graph?\n    if (point.x === percent) {\n      return point.y;\n    }\n\n    var index = obj.control.length - 1;\n\n    //  Very end of the graph?\n    var last = obj.control[index];\n\n    if (last.x === percent) {\n      return last.y;\n    }\n\n    index = 0;\n\n    while (point.x <= percent) {\n      if (index >= obj.control.length - 1) {\n        return point.y;\n      }\n\n      point = obj.control[++index];\n    }\n\n    var prev = obj.control[index - 1];\n\n    //  Linear interpolation: f(x) = y0 + (y1 - y0) * (x - x0) / (x1 - x0)\n    return obj.value * (prev.y + ((percent - prev.x) * (point.y - prev.y)) / (point.x - prev.x));\n  },\n\n  /**\n   * Return the value of this parameter object, clamped to be within the range obj.min to obj.max.\n   *\n   * Get the control value by linear interpolation of points in the control array for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1, other points may lie between those\n   *\n   * @method Phaser.ParticleStorm.Graph#getClampedValue\n   * @param {number|object} obj - The source graph control object from which the value is extracted.\n   * @param {number} percent - The current lifePercent value of a particle.\n   * @return {number} The clammped value of the parameter object at this point in the particles life.\n   */\n  getClampedValue: function(obj, percent) {\n    return Phaser.Math.clamp(Math.floor(obj.initial + this.getValue(obj, percent)), obj.min, obj.max);\n  }\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\nPhaser.ParticleStorm.Zones = {};\n\n/**\n * The base class which all ParticleStorm zones must extend.\n *\n * @class Phaser.ParticleStorm.Zones.Base\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n */\nPhaser.ParticleStorm.Zones.Base = function(game) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = game;\n\n  /**\n   * The active state of this Zone. If set to `false` it won't emit or process any particles.\n   * @property {boolean} active\n   */\n  this.active = true;\n\n  /**\n   * The scale of this zone. You can scale a zone, which influences the position of\n   * emitted particles and the overall dimensions of the zone.\n   * @property {Phaser.Point} scale\n   */\n  this.scale = new Phaser.Point(1, 1);\n\n  /**\n   * When scanning the pixels of image based zones you can set it to ignore any pixel\n   * with an alpha value *below* the threshold. This is a value between 0 (fully\n   * transparent) to 255 (fully opaque). If you change this value you need to call\n   * `update` afterwards to re-scan the zone.\n   * @property {integer} alphaThreshold\n   * @default\n   */\n  this.alphaThreshold = 0;\n\n  /**\n   * @property {Phaser.Point} _rnd - Internal point property.\n   * @private\n   */\n  this._rnd = new Phaser.Point();\n};\n\nPhaser.ParticleStorm.Zones.Base.prototype = {\n  /**\n   * Gets a random point from within this zone.\n   * Takes the scale of the zone into account.\n   *\n   * Internally this method uses the private _rnd property\n   * of this zone, so what is returned is a reference to\n   * that Phaser.Point object. So if you need to store\n   * the result rather than use it immediately you should\n   * clone the Point or extract its values.\n   *\n   * @method Phaser.ParticleStorm.Zones.Base#getRandom\n   * @return {Phaser.Point} A random point within this zone.\n   */\n  getRandom: function() {\n    if (this.shape === Phaser.Point) {\n      this._rnd = this.shape;\n    } else {\n      this.shape.random(this._rnd);\n    }\n\n    this._rnd.x *= this.scale.x;\n    this._rnd.y *= this.scale.y;\n\n    return this._rnd;\n  },\n\n  /**\n   * Emits the `qty` number of particles on the given emitter.\n   * Each particle is given a random location from within this zone.\n   *\n   * @method Phaser.ParticleStorm.Zones.Base#emit\n   * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} x - The x location of the new particle.\n   * @param {number|array} y - The y location of the new particle.\n   * @param {number} qty - The quantity of particles to emit.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n   */\n  emit: function(emitter, key, x, y, qty) {\n    //  ------------------------------------------------\n    //  If the coordinates are arrays it uses them as min/max pairs\n    //  ------------------------------------------------\n    if (Array.isArray(x)) {\n      x = this.game.rnd.between(x[0], x[1]);\n    }\n\n    if (Array.isArray(y)) {\n      y = this.game.rnd.between(y[0], y[1]);\n    }\n\n    var particle = null;\n\n    for (var i = 0; i < qty; i++) {\n      this.shape.random(this._rnd);\n\n      particle = emitter.emitParticle(key, x + this._rnd.x * this.scale.x, y + this._rnd.y * this.scale.y, null);\n    }\n\n    return particle;\n  }\n};\n\nPhaser.ParticleStorm.Zones.Base.prototype.constructor = Phaser.ParticleStorm.Zones.Base;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Point Zone defines a point object from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Point\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [x=0] - The horizontal position of this Point Zone.\n * @param {number} [y=0] - The vertical position of this Point Zone.\n */\nPhaser.ParticleStorm.Zones.Point = function(game, x, y) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Point} shape\n   */\n  this.shape = new Phaser.Point(x, y);\n};\n\nPhaser.ParticleStorm.Zones.Point.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Point.prototype.constructor = Phaser.ParticleStorm.Zones.Point;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Rectangle Zone defines a rectangle object from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Rectangle\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [width=0] - The width of the Rectangle. Should always be either zero or a positive value.\n * @param {number} [height=0] - The height of the Rectangle. Should always be either zero or a positive value.\n */\nPhaser.ParticleStorm.Zones.Rectangle = function(game, width, height) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Rectangle} shape\n   */\n  this.shape = new Phaser.Rectangle(0, 0, width, height);\n};\n\nPhaser.ParticleStorm.Zones.Rectangle.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Rectangle.prototype.constructor = Phaser.ParticleStorm.Zones.Rectangle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Circle Zone defines a circular area from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Circle\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [radius=0] - The radius of the circle in pixels.\n */\nPhaser.ParticleStorm.Zones.Circle = function(game, radius) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Circle} shape\n   */\n  this.shape = new Phaser.Circle(0, 0, radius * 2);\n};\n\nPhaser.ParticleStorm.Zones.Circle.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Circle.prototype.constructor = Phaser.ParticleStorm.Zones.Circle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An Ellipse Zone defines an elliptical area from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Ellipse\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [width=0] - The overall width of this ellipse.\n * @param {number} [height=0] - The overall height of this ellipse.\n */\nPhaser.ParticleStorm.Zones.Ellipse = function(game, width, height) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Ellipse} shape\n   */\n  this.shape = new Phaser.Ellipse(0, 0, width, height);\n};\n\nPhaser.ParticleStorm.Zones.Ellipse.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Ellipse.prototype.constructor = Phaser.ParticleStorm.Zones.Ellipse;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Line Zone defines a line segment from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Line\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [x1=0] - The x coordinate of the start of the line.\n * @param {number} [y1=0] - The y coordinate of the start of the line.\n * @param {number} [x2=0] - The x coordinate of the end of the line.\n * @param {number} [y2=0] - The y coordinate of the end of the line.\n */\nPhaser.ParticleStorm.Zones.Line = function(game, x1, y1, x2, y2) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Line} shape\n   */\n  this.shape = new Phaser.Line(x1, y1, x2, y2);\n};\n\nPhaser.ParticleStorm.Zones.Line.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Line.prototype.constructor = Phaser.ParticleStorm.Zones.Line;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Spline Zone. A spline consists of a set of points through which a path is\n * constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * @class Phaser.ParticleStorm.Zones.Spline\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {integer} [mode=0] - The type of spline to create. 0 = linear, 1 = bezier and 2 = catmull.\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n */\nPhaser.ParticleStorm.Zones.Spline = function(game, mode, resolution, closed, points) {\n  if (mode === undefined) {\n    mode = 0;\n  }\n  if (resolution === undefined) {\n    resolution = 1000;\n  }\n  if (closed === undefined) {\n    closed = true;\n  }\n\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * Reference to the Phaser.Math class.\n   * @property {Phaser.Math} math\n   */\n  this.math = this.game.math;\n\n  /**\n   * An object holding the point values.\n   * @property {object} points\n   */\n  this.points = { x: [], y: [] };\n\n  /**\n   * An array containing the interpolated path values.\n   * @property {array} path\n   */\n  this.path = [];\n\n  /**\n   * The resolution controls how tightly packed together the interpolated results are.\n   * @property {integer} resolution\n   */\n  this.resolution = resolution;\n\n  /**\n   * The type of spline. 0 = linear, 1 = bezier and 2 = catmull.\n   * @property {integer} mode\n   */\n  this.mode = mode;\n\n  /**\n   * A closed path loops from the final point back to the start again.\n   * @property {boolean} closed\n   */\n  this.closed = closed;\n\n  /**\n   * @property {number} mult - Internal index var.\n   * @private\n   */\n  this.mult = 0;\n\n  this.update(points);\n};\n\nPhaser.ParticleStorm.Zones.Spline.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Spline.prototype.constructor = Phaser.ParticleStorm.Zones.Spline;\n\n/**\n * Updates the spline path data. This clears the path and rebuilds it based on\n * the points given.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#update\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} This zone.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.update = function(points) {\n  this.points = { x: [], y: [] };\n  this.path = [];\n\n  for (var i = 0; i < points.length; i++) {\n    this.points.x.push(points[i].x);\n    this.points.y.push(points[i].y);\n  }\n\n  if (this.closed) {\n    this.points.x.push(points[0].x);\n    this.points.y.push(points[0].y);\n  }\n\n  //  Now loop through the points and build the path data\n  var ix = 0;\n  var x = 1 / this.resolution;\n\n  for (var i = 0; i <= 1; i += x) {\n    if (this.mode === 0) {\n      var px = this.math.linearInterpolation(this.points.x, i);\n      var py = this.math.linearInterpolation(this.points.y, i);\n    } else if (this.mode === 1) {\n      var px = this.math.bezierInterpolation(this.points.x, i);\n      var py = this.math.bezierInterpolation(this.points.y, i);\n    } else if (this.mode === 2) {\n      var px = this.math.catmullRomInterpolation(this.points.x, i);\n      var py = this.math.catmullRomInterpolation(this.points.y, i);\n    }\n\n    var node = { x: px, y: py, angle: 0 };\n\n    if (ix > 0) {\n      node.angle = this.math.angleBetweenPoints(this.path[ix - 1], node);\n    }\n\n    this.path.push(node);\n\n    ix++;\n  }\n\n  this.mult = this.path.length / 100;\n\n  return this;\n};\n\n/**\n * Gets a random point from this path.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#getRandom\n * @return {object} A point from the path. The object contains public x, y and angle properties.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.getRandom = function() {\n  return this.game.rnd.pick(this.path);\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n *\n * Each particle has a random location from the path of this spline.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.emit = function(emitter, key, x, y, qty) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var rnd = null;\n  var particle = null;\n\n  for (var i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.path);\n\n    particle = emitter.emitParticle(key, x + rnd.x, y + rnd.y);\n  }\n\n  return particle;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n *\n * Each particle has its location based on the percent argument.\n * For example a percent value of 0 will emit a particle right at the\n * start of the spline, where-as a percent value of 50 will emit a\n * particle half-way along the spline.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {number} percent - The distance along the path to emit the particles from. Between 0 and 100.\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.emitPercent = function(emitter, key, x, y, qty, percent) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var particle = null;\n\n  percent = Math.floor(percent * this.mult);\n\n  for (var i = 0; i < qty; i++) {\n    var path = this.path[percent];\n\n    if (path) {\n      particle = emitter.emitParticle(key, x + path.x, y + path.y);\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Text Zone. This is a special kind of zone that scans the pixel data of the given\n * Text object and uses it to emit particles from.\n *\n * Based on the type of renderer being used with this Text zone you can emit particles\n * based on the pixels in the text, optionally tinting and setting their alpha to match.\n *\n * @class Phaser.ParticleStorm.Zones.Text\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {Phaser.Text} text - The Text object used to populate this zone.\n */\nPhaser.ParticleStorm.Zones.Text = function(game, text) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The BitmapData object which is used to populate this zone.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = new Phaser.BitmapData(game, 'ParticleStorm.Text');\n\n  /**\n   * A reference to the Phaser.Text object that populates the data in this zone.\n   * @property {Phaser.Text} text\n   */\n  this.text = text;\n\n  /**\n   * This array holds all of the pixel color data from the pixels that were\n   * scanned (i.e. non-transparent pixels). It is used internally and should\n   * not usually be modified directly.\n   * @property {array} points\n   */\n  this.points = [];\n\n  this.update(text);\n};\n\nPhaser.ParticleStorm.Zones.Text.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Text.prototype.constructor = Phaser.ParticleStorm.Zones.Text;\n\n/**\n * Updates the contents of this zone. It resets the `points` array, clearing previous\n * pixel data. If a `text` argument was provided the new Text object is loaded, then it has all\n * pixels scanned and stored in the points array.\n *\n * The scale of the Text object is reset to 1:1 before the pixel data is scanned. The scale\n * is restored again once the scan is complete. This zone is also scaled to match the scale\n * of the Text object given to it.\n *\n * If you don't provide a `text` argument then it has the effect of re-scanning the current\n * Text object, which is useful if you've modified it in any way (for example by changing\n * the text value.)\n *\n * @method Phaser.ParticleStorm.Zones.Text#update\n * @param {Phaser.Text} [text] - The Text object used to populate this zone.\n * @return {Phaser.ParticleStorm.Zones.Text} This zone.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.update = function(text) {\n  if (text !== undefined) {\n    this.text = text;\n  } else {\n    text = this.text;\n  }\n\n  //  Store the Text object properties before we reset them\n\n  var tx = text.x;\n  var ty = text.y;\n\n  var sx = text.scale.x;\n  var sy = text.scale.y;\n\n  //  Write the Text to the bmd\n\n  text.x = 0;\n  text.y = 0;\n\n  text.scale.set(1);\n\n  this.points = [];\n\n  this.bmd.load(text);\n\n  this.bmd.processPixelRGB(this.addPixel, this);\n\n  this.scale = new Phaser.Point(sx, sy);\n\n  //  Restore the Text object properties\n\n  text.x = tx;\n  text.y = ty;\n\n  text.scale.set(sx, sy);\n\n  return this;\n};\n\n/**\n * Internal method used by the processPixelRGB call. Checks if the given\n * color alpha is above `alphaThreshold` and if so it adds it to the\n * points array.\n *\n * @method Phaser.ParticleStorm.Zones.Text#addPixel\n * @param {object} color - The color object created by the processPixelRGB method.\n * @param {number} x - The x coordinate of the pixel within the image.\n * @param {number} y - The y coordinate of the pixel within the image.\n * @return {boolean} This method must always return false.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.addPixel = function(color, x, y) {\n  if (color.a > this.alphaThreshold) {\n    this.points.push({ x: x, y: y, color: { r: color.r, g: color.g, b: color.b, a: color.a / 255 } });\n  }\n\n  return false;\n};\n\n/**\n * Gets a single random pixel data object from the text.\n *\n * The object contains x and y properties relating to its position within the text.\n * It also contains a color object containing r, g, b and a properties for the red,\n * green, blue and alpha values of the pixel respectively.\n *\n * @method Phaser.ParticleStorm.Zones.Text#getRandom\n * @return {object} A pixel data object.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.getRandom = function() {\n  var rnd = this.game.rnd.pick(this.points);\n\n  rnd.x *= this.scale.x;\n  rnd.y *= this.scale.y;\n\n  return rnd;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n * Each particle is given a random location from within this zone.\n *\n * @method Phaser.ParticleStorm.Zones.Text#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.emit = function(emitter, key, x, y, qty, setAlpha, setColor) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var rnd = null;\n  var particle = null;\n\n  for (var i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.points);\n\n    particle = emitter.emitParticle(key, x + rnd.x * this.scale.x, y + rnd.y * this.scale.y);\n\n    if (particle) {\n      if (setAlpha && rnd.color.a < 1) {\n        particle.color.alpha.value = rnd.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(rnd.color.r, rnd.color.g, rnd.color.b, rnd.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * Emits a particle for every pixel in this text object.\n * The step and spacing arguments control the iteration through the pixels.\n *\n * @method Phaser.ParticleStorm.Zones.Text#emitFull\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} step - Controls the iteration through the pixel data.\n * @param {number|array} spacing - The spacing between the particle coordinates.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.emitFull = function(emitter, key, x, y, step, spacing, setAlpha, setColor) {\n  if (step === undefined) {\n    step = 1;\n  }\n\n  var sx = 1;\n  var sy = 1;\n\n  if (Array.isArray(spacing)) {\n    sx = spacing[0];\n    sy = spacing[1];\n  } else if (typeof spacing === 'number') {\n    sx = spacing;\n    sy = spacing;\n  }\n\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var point = null;\n  var particle = null;\n\n  for (var i = 0; i < this.points.length; i += step) {\n    point = this.points[i];\n\n    var px = x + point.x * this.scale.x * (sx / step);\n    var py = y + point.y * this.scale.y * (sy / step);\n\n    particle = emitter.emitParticle(key, px, py);\n\n    if (particle) {\n      if (setAlpha && point.color.a < 1) {\n        particle.color.alpha.value = point.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(point.color.r, point.color.g, point.color.b, point.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An Image Zone. This is a special kind of zone based on the pixel data in\n * the given image.\n *\n * Based on the type of renderer being used with this Image zone you can emit particles\n * based on the pixels in the image, optionally tinting and setting their alpha to match.\n *\n * @class Phaser.ParticleStorm.Zones.Image\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n */\nPhaser.ParticleStorm.Zones.Image = function(game, key) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The BitmapData object which is used to populate this zone.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = new Phaser.BitmapData(game, 'ParticleStorm.Image');\n\n  /**\n   * The key given in the constructor or calls to `update`.\n   * @property {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key\n   * @private\n   */\n  this.key = key;\n\n  /**\n   * This array holds all of the pixel color data from the pixels that were\n   * scanned (i.e. non-transparent pixels). It is used internally and should\n   * not usually be modified directly.\n   * @property {array} points\n   */\n  this.points = [];\n\n  this.update(key);\n};\n\nPhaser.ParticleStorm.Zones.Image.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Image.prototype.constructor = Phaser.ParticleStorm.Zones.Image;\n\n/**\n * Updates the contents of this zone. It resets the `points` array, clearing previous\n * pixel data. If a key argument was provided the new image is loaded, then it has all\n * pixels scanned and stored in the points array.\n *\n * If you don't provide a key argument then it has the effect of re-scanning the current\n * image, which is useful if you've modified the image or BitmapData directly.\n *\n * @method Phaser.ParticleStorm.Zones.Image#update\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} [key] - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n * @return {Phaser.ParticleStorm.Zones.Image} This zone.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.update = function(key) {\n  if (key === undefined) {\n    key = this.key;\n  }\n\n  this.points = [];\n\n  this.bmd.load(key);\n\n  this.bmd.processPixelRGB(this.addPixel, this);\n\n  return this;\n};\n\n/**\n * Internal method used by the processPixelRGB call. Checks if the given\n * color alpha is above `alphaThreshold` and if so it adds it to the\n * points array.\n *\n * @method Phaser.ParticleStorm.Zones.Image#addPixel\n * @param {object} color - The color object created by the processPixelRGB method.\n * @param {number} x - The x coordinate of the pixel within the image.\n * @param {number} y - The y coordinate of the pixel within the image.\n * @return {boolean} This method must always return false.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.addPixel = function(color, x, y) {\n  if (color.a > this.alphaThreshold) {\n    this.points.push({ x: x, y: y, color: { r: color.r, g: color.g, b: color.b, a: color.a / 255 } });\n  }\n\n  return false;\n};\n\n/**\n * Gets a single random pixel data object from the image.\n *\n * The object contains x and y properties relating to its position within the image.\n * It also contains a color object containing r, g, b and a properties for the red,\n * green, blue and alpha values of the pixel respectively.\n *\n * @method Phaser.ParticleStorm.Zones.Image#getRandom\n * @return {object} A pixel data object.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.getRandom = function() {\n  var rnd = this.game.rnd.pick(this.points);\n\n  rnd.x *= this.scale.x;\n  rnd.y *= this.scale.y;\n\n  return rnd;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n * Each particle is given a random location from within this zone.\n *\n * @method Phaser.ParticleStorm.Zones.Image#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.emit = function(emitter, key, x, y, qty, setAlpha, setColor) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var rnd = null;\n  var particle = null;\n\n  for (var i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.points);\n\n    particle = emitter.emitParticle(key, x + rnd.x * this.scale.x, y + rnd.y * this.scale.y);\n\n    if (particle) {\n      if (setAlpha && rnd.color.a < 1) {\n        particle.color.alpha.value = rnd.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(rnd.color.r, rnd.color.g, rnd.color.b, rnd.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * Emits a particle for every pixel in this image.\n * The step and spacing arguments control the iteration through the pixels.\n *\n * @method Phaser.ParticleStorm.Zones.Image#emitFull\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} step - Controls the iteration through the pixel data.\n * @param {number|array} spacing - The spacing between the particle coordinates.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.emitFull = function(emitter, key, x, y, step, spacing, setAlpha, setColor) {\n  if (step === undefined) {\n    step = 1;\n  }\n\n  var sx = 1;\n  var sy = 1;\n\n  if (Array.isArray(spacing)) {\n    sx = spacing[0];\n    sy = spacing[1];\n  } else if (typeof spacing === 'number') {\n    sx = spacing;\n    sy = spacing;\n  }\n\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  var point = null;\n  var particle = null;\n\n  for (var i = 0; i < this.points.length; i += step) {\n    point = this.points[i];\n\n    var px = x + point.x * this.scale.x * (sx / step);\n    var py = y + point.y * this.scale.y * (sy / step);\n\n    particle = emitter.emitParticle(key, px, py);\n\n    if (particle) {\n      if (setAlpha && point.color.a < 1) {\n        particle.color.alpha.value = point.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(point.color.r, point.color.g, point.color.b, point.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Texture control belongs to a single particle and controls all aspects of its texture.\n * It allows you to control the texture, animation frame and z-index in display lists.\n *\n * @class Phaser.ParticleStorm.Controls.Texture\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Texture = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * A reference to the Phaser.RandomDataGenerator which several methods in this\n   * control require.\n   * @property {Phaser.RandomDataGenerator} rnd\n   */\n  this.rnd = particle.emitter.game.rnd;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * Particles that are spawned within a display list (such as Sprite particles) can\n   * optionally be 'sent to the back' of the list upon being spawned.\n   * @property {boolean} sendToBack\n   * @default\n   */\n  this.sendToBack = false;\n\n  /**\n   * Particles that are spawned within a display list (such as Sprite particles) can\n   * optionally be 'bought to the front' of the list upon being spawned.\n   * @property {boolean} bringToTop\n   * @default\n   */\n  this.bringToTop = true;\n\n  /**\n   * The key of the image this particle uses for rendering, if any.\n   * @property {string} key\n   * @default\n   */\n  this.key = null;\n\n  /**\n   * The current numeric frame of this particle texture, if using a sprite sheet.\n   * @property {number} frame\n   * @default\n   */\n  this.frame = undefined;\n\n  /**\n   * The current frame name of this particles texture, if using an atlas.\n   * @property {string} frameName\n   * @default\n   */\n  this.frameName = undefined;\n\n  /**\n   * The scale mode used by the texture.\n   * @property {integer} scaleMode\n   * @default\n   */\n  this.scaleMode = Phaser.scaleModes.DEFAULT;\n};\n\nPhaser.ParticleStorm.Controls.Texture.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#reset\n   */\n  reset: function() {\n    this.sendToBack = false;\n    this.bringToTop = true;\n\n    this.key = '__default';\n\n    this.frame = undefined;\n    this.frameName = undefined;\n\n    this.scaleMode = Phaser.scaleModes.DEFAULT;\n  },\n\n  /**\n   * Populates all aspects of this control to its particle that apply.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#init\n   */\n  init: function(data) {\n    //  ------------------------------------------------\n    //  Send to Back / Bring to Front (boolean)\n    //  ------------------------------------------------\n\n    if (data.sendToBack) {\n      this.sendToBack = data.sendToBack;\n    } else if (data.bringToTop) {\n      this.bringToTop = data.bringToTop;\n    }\n\n    //  ------------------------------------------------\n    //  Particle image (string or array) with optional Frame\n    //  ------------------------------------------------\n\n    if (data.image) {\n      if (Array.isArray(data.image)) {\n        this.key = this.rnd.pick(data.image);\n      } else {\n        this.key = data.image;\n      }\n    }\n\n    //  Allows for single frame setting (index or string based, both work)\n    if (data.frame !== undefined) {\n      var f = data.frame;\n\n      if (Array.isArray(data.frame)) {\n        f = this.rnd.pick(data.frame);\n      }\n\n      if (this.graph.isNumeric(f)) {\n        this.frame = f;\n      } else {\n        this.frameName = f;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Scale Mode\n    //  ------------------------------------------------\n\n    if (data.scaleMode) {\n      var sm = data.scaleMode.toUpperCase();\n\n      if (sm === 'LINEAR') {\n        this.scaleMode = Phaser.scaleModes.LINEAR;\n      } else if (sm === 'NEAREST') {\n        this.scaleMode = Phaser.scaleModes.NEAREST;\n      }\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all texture controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#step\n   * @param {object} data - The particle data object.\n   * @param {Phaser.Sprite} [sprite] - The particle sprite.\n   */\n  step: function(data, sprite) {\n    //  ------------------------------------------------\n    //  Animation\n    //  ------------------------------------------------\n\n    if (this.particle.emitter.renderType === Phaser.ParticleStorm.SPRITE && data.animations !== undefined) {\n      var names = [];\n\n      for (var name in data.animations) {\n        var anim = data.animations[name];\n\n        var frames = null;\n        var numeric = true;\n\n        if (anim.frames !== undefined) {\n          if (Array.isArray(anim.frames)) {\n            frames = anim.frames;\n          } else {\n            frames = Phaser.Animation.generateFrameNames(\n              anim.frames.prefix,\n              anim.frames.start,\n              anim.frames.stop,\n              anim.frames.suffix,\n              anim.frames.zeroPad\n            );\n          }\n\n          if (typeof frames[0] === 'string') {\n            numeric = false;\n          }\n        }\n\n        var frameRate = anim.frameRate === undefined ? 60 : anim.frameRate;\n        var loop = anim.loop === undefined ? false : anim.loop;\n\n        sprite.animations.add(name, frames, frameRate, loop, numeric);\n\n        names.push(name);\n      }\n\n      if (names.length > 0) {\n        if (data.play !== undefined) {\n          sprite.play(this.rnd.pick(names));\n        } else {\n          sprite.play(names[0]);\n        }\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Z Order\n    //  ------------------------------------------------\n\n    if (this.sendToBack) {\n      sprite.sendToBack();\n    } else if (this.bringToTop) {\n      sprite.bringToTop();\n    }\n  }\n};\n\nPhaser.ParticleStorm.Controls.Texture.prototype.constructor = Phaser.ParticleStorm.Controls.Texture;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Color control belongs to a single particle and controls all aspects of its color.\n * It allows you to control the color channels, alpha, tint, hsv and other properties.\n *\n * @class Phaser.ParticleStorm.Controls.Color\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Color = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The red color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} red\n   */\n  this.red = {};\n\n  /**\n   * The green color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} green\n   */\n  this.green = {};\n\n  /**\n   * The blue color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} blue\n   */\n  this.blue = {};\n\n  /**\n   * The alpha channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_1 object.\n   * @property {object} alpha\n   */\n  this.alpha = {};\n\n  /**\n   * The hsv control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_359 object.\n   * @property {object} hsv\n   */\n  this.hsv = {};\n\n  /**\n   * A local helper object which stores HSV color modes for emitter renderers to use.\n   * This is a reference to the array stored in Phaser.ParticleStorm.\n   *\n   * @property {array} hsvData\n   * @protected\n   */\n  this.hsvData = this.particle.emitter.parent.hsv;\n\n  /**\n   * This pre-calculated tint value.\n   * @property {integer} tint\n   */\n  this.tint = 0;\n\n  /**\n   * A flag telling the renderer if a tint should be applied or not.\n   * @property {boolean} isTinted\n   */\n  this.isTinted = false;\n\n  /**\n   * This pre-calculated rgba string.\n   * @property {string} rgba\n   */\n  this.rgba = 'rgba(0, 0, 0, 1)';\n\n  /**\n   * The blend mode being used by the particle.\n   * This is a reference to a ParticleStorm.blendModeMap entry.\n   * @property {array} blendMode\n   */\n  this.blendMode = this.particle.emitter.parent.blendModeMap.NORMAL;\n};\n\nPhaser.ParticleStorm.Controls.Color.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#reset\n   */\n  reset: function() {\n    this.red = Object.create(Phaser.ParticleStorm.BASE_255);\n    this.green = Object.create(Phaser.ParticleStorm.BASE_255);\n    this.blue = Object.create(Phaser.ParticleStorm.BASE_255);\n\n    this.alpha = Object.create(Phaser.ParticleStorm.BASE_1);\n\n    this.tint = 0xffffff;\n    this.isTinted = false;\n\n    this.isHSV = false;\n    this.hsv = Object.create(Phaser.ParticleStorm.BASE_359);\n\n    this.rgba = 'rgba(0, 0, 0, 1)';\n\n    this.blendMode = this.particle.emitter.parent.blendModeMap.NORMAL;\n  },\n\n  /**\n   * Takes a particle data object and populates all aspects of this control\n   * that it applies to.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#init\n   * @param {object} data - The particle data.\n   */\n  init: function(data) {\n    var tint = false;\n\n    //  ------------------------------------------------\n    //  HSV\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('hsv')) {\n      if (typeof data.hsv === 'number') {\n        this.hsv.value = data.hsv;\n      } else {\n        this.graph.fromData(data.hsv, this.hsv);\n      }\n\n      tint = true;\n      this.isHSV = true;\n    } else {\n      //  ------------------------------------------------\n      //  RGB\n      //  ------------------------------------------------\n\n      if (data.hasOwnProperty('red')) {\n        if (typeof data.red === 'number') {\n          this.red.value = data.red;\n        } else {\n          this.graph.fromData(data.red, this.red);\n        }\n\n        tint = true;\n      }\n\n      if (data.hasOwnProperty('green')) {\n        if (typeof data.green === 'number') {\n          this.green.value = data.green;\n        } else {\n          this.graph.fromData(data.green, this.green);\n        }\n\n        tint = true;\n      }\n\n      if (data.hasOwnProperty('blue')) {\n        if (typeof data.blue === 'number') {\n          this.blue.value = data.blue;\n        } else {\n          this.graph.fromData(data.blue, this.blue);\n        }\n\n        tint = true;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Alpha\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('alpha')) {\n      if (typeof data.alpha === 'number') {\n        this.alpha.value = data.alpha;\n      } else {\n        this.graph.fromData(data.alpha, this.alpha);\n      }\n    }\n\n    this.red.value = Phaser.Math.clamp(this.red.value, 0, 255);\n    this.green.value = Phaser.Math.clamp(this.green.value, 0, 255);\n    this.blue.value = Phaser.Math.clamp(this.blue.value, 0, 255);\n    this.alpha.value = Phaser.Math.clamp(this.alpha.value, 0, 1);\n    this.hsv.value = Phaser.Math.clamp(this.hsv.value, 0, 359);\n\n    if (this.particle.emitter.renderType !== Phaser.ParticleStorm.PIXEL) {\n      //  We don't tint pixels\n      this.isTinted = tint;\n    }\n\n    if (data.blendMode) {\n      this.blendMode = this.particle.emitter.parent.blendModeMap[data.blendMode.toUpperCase()];\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all color controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#step\n   */\n  step: function() {\n    var life = this.particle.life;\n\n    if (this.isHSV) {\n      this.hsv.value += this.hsv.delta;\n      this.hsv.calc = Phaser.Math.clamp(Math.floor(this.hsv.initial + this.graph.getValue(this.hsv, life)), 0, 359);\n\n      this.red.value = this.hsvData[this.hsv.calc].r;\n      this.green.value = this.hsvData[this.hsv.calc].g;\n      this.blue.value = this.hsvData[this.hsv.calc].b;\n    } else {\n      this.red.value += this.red.delta;\n      this.green.value += this.green.delta;\n      this.blue.value += this.blue.delta;\n    }\n\n    this.red.calc = this.graph.getClampedValue(this.red, life);\n    this.green.calc = this.graph.getClampedValue(this.green, life);\n    this.blue.calc = this.graph.getClampedValue(this.blue, life);\n\n    if (this.isTinted) {\n      this.tint = (this.red.calc << 16) | (this.green.calc << 8) | this.blue.calc;\n    }\n\n    this.alpha.value += this.alpha.delta;\n    this.alpha.calc = Phaser.Math.clamp(this.alpha.initial + this.graph.getValue(this.alpha, life), 0, 1);\n\n    this.rgba = 'rgba(' + this.red.calc + ',' + this.green.calc + ',' + this.blue.calc + ',' + this.alpha.calc + ')';\n  },\n\n  /**\n   * Sets the color values of the red, green and blue controls.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#setColor\n   * @param {integer} r - The red color value. Between 1 and 255.\n   * @param {integer} g - The green color value. Between 1 and 255.\n   * @param {integer} b - The blue color value. Between 1 and 255.\n   * @param {integer} a - The alpha color value. Between 1 and 255.\n   */\n  setColor: function(r, g, b, a) {\n    this.red.value = r;\n    this.green.value = g;\n    this.blue.value = b;\n    this.alpha.value = a;\n\n    if (this.particle.emitter.renderType !== Phaser.ParticleStorm.PIXEL) {\n      //  We don't tint pixels\n      this.isTinted = true;\n    }\n\n    this.step();\n  }\n};\n\nPhaser.ParticleStorm.Controls.Color.prototype.constructor = Phaser.ParticleStorm.Controls.Color;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Transform control belongs to a single particle and controls all aspects of its transformation.\n * It allows you to control the position, scale, rotation, velocity and other properties.\n *\n * @class Phaser.ParticleStorm.Controls.Transform\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Transform = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * A reference to the Phaser.Time class.\n   * @property {Phaser.Time} time\n   */\n  this.time = particle.emitter.game.time;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The horizontal position of this particle.\n   * @property {number} x\n   */\n  this.x = 0;\n\n  /**\n   * The vertical position of this particle.\n   * @property {number} y\n   */\n  this.y = 0;\n\n  /**\n   * The velocity control object. Contains x, y and facing properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} velocity\n   */\n  this.velocity = { x: null, y: null, facing: null };\n\n  /**\n   * The acceleration control object. Contains x, y and facing properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} acceleration\n   */\n  this.acceleration = { x: null, y: null, facing: null };\n\n  /**\n   * The scale control object. Contains x and y and properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE_1 object.\n   * @property {object} scale\n   */\n  this.scale = { x: null, y: null };\n\n  /**\n   * The rotation control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} rotation\n   */\n  this.rotation = {};\n\n  /**\n   * The anchor of the particle. By default particles all have anchors set to\n   * 0.5 (i.e. their center) to assist with rotation.\n   * @property {Phaser.Point} anchor\n   */\n  this.anchor = new Phaser.Point();\n};\n\nPhaser.ParticleStorm.Controls.Transform.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#reset\n   */\n  reset: function() {\n    this.velocity.x = Object.create(Phaser.ParticleStorm.BASE);\n    this.velocity.y = Object.create(Phaser.ParticleStorm.BASE);\n    this.velocity.facing = Object.create(Phaser.ParticleStorm.BASE_NULL);\n\n    this.acceleration.x = Object.create(Phaser.ParticleStorm.BASE);\n    this.acceleration.y = Object.create(Phaser.ParticleStorm.BASE);\n    this.acceleration.facing = Object.create(Phaser.ParticleStorm.BASE_NULL);\n\n    this.scale.x = Object.create(Phaser.ParticleStorm.BASE_1);\n    this.scale.y = Object.create(Phaser.ParticleStorm.BASE_1);\n\n    this.rotation = Object.create(Phaser.ParticleStorm.BASE);\n\n    this.anchor.set(0.5);\n  },\n\n  /**\n   * Takes a particle data object and populates all aspects of this control\n   * that it applies to.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#init\n   * @param {number} x - The horizontal position of the particle.\n   * @param {number} y - The vertical position of the particle.\n   * @param {object} data - The particle data.\n   */\n  init: function(x, y, data) {\n    this.x = x;\n    this.y = y;\n\n    //  ------------------------------------------------\n    //  Anchor\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('anchor')) {\n      this.anchor.set(data.anchor);\n    } else {\n      if (data.hasOwnProperty('anchorX')) {\n        this.anchor.x = data.anchorX;\n      }\n\n      if (data.hasOwnProperty('anchorY')) {\n        this.anchor.y = data.anchorY;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Velocity\n    //  ------------------------------------------------\n\n    //  Use 'velocity' instead or in addition to 'vx' and 'vy' when those two are interlinked\n    //  (eg. when creating a radial vector from the creation point)\n\n    if (data.hasOwnProperty('velocity')) {\n      if (this.graph.isNumeric(data.velocity)) {\n        //  velocity: 2\n        this.velocity.x.value = data.velocity;\n        this.velocity.y.value = data.velocity;\n      } else if (data.velocity.hasOwnProperty('min')) {\n        //  velocity: { min: -2, max: 2 }\n        this.velocity.x.value = this.graph.getMinMax(data.velocity);\n        this.velocity.y.value = this.velocity.x.value;\n      } else if (data.velocity.radial) {\n        //  radial velocity\n        var v = this.graph.getMinMaxInitial(data.velocity);\n\n        var arcs = data.velocity.radial.arcStart;\n        var arce = data.velocity.radial.arcEnd;\n\n        if (arcs !== undefined && arce !== undefined) {\n          //  Radiate within an arc\n          var angle = ((Math.random() * (arce - arcs) + arcs) * Math.PI) / 180.0;\n          var dx = Math.sin(angle);\n          var dy = -Math.cos(angle);\n          this.velocity.x.value = dx * v;\n          this.velocity.y.value = dy * v;\n        }\n      } else {\n        //  velocity: { initial: 2, value: 3, delta: 0.1, control: {} }\n        this.velocity.x.initial = this.graph.getMinMaxInitial(data.velocity);\n        this.velocity.y.initial = this.velocity.x.initial;\n\n        this.velocity.x.value = this.graph.getMinMax(data.velocity.value);\n        this.velocity.y.value = this.velocity.x.value;\n      }\n\n      if (data.velocity.hasOwnProperty('delta')) {\n        this.velocity.x.delta = this.graph.getMinMax(data.velocity.delta);\n        this.velocity.y.delta = this.velocity.x.delta;\n      }\n\n      if (data.velocity.hasOwnProperty('control')) {\n        this.velocity.x.control = data.velocity.control;\n        this.velocity.y.control = data.velocity.control;\n      }\n\n      //  If they defined vx/vy AND velocity then the vx/vy settings over-ride velocity\n      if (data.hasOwnProperty('vx')) {\n        this.graph.fromData(data.vx, this.velocity.x);\n      }\n\n      if (data.hasOwnProperty('vy')) {\n        this.graph.fromData(data.vy, this.velocity.y);\n      }\n    } else if (data.hasOwnProperty('target')) {\n      //  ------------------------------------------------\n      //  Target\n      //  ------------------------------------------------\n\n      this.particle.target(data.target);\n    } else {\n      //  ------------------------------------------------\n      //  vx / vy\n      //  ------------------------------------------------\n\n      //  Avoids calling fromData if we know we're just dealing with a number\n      if (typeof data.vx === 'number') {\n        this.velocity.x.value = data.vx;\n      } else {\n        this.graph.fromData(data.vx, this.velocity.x);\n      }\n\n      if (typeof data.vy === 'number') {\n        this.velocity.y.value = data.vy;\n      } else {\n        this.graph.fromData(data.vy, this.velocity.y);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Facing Acceleration / Velocity\n    //  ------------------------------------------------\n\n    //  Avoids calling fromData if we know we're just dealing with a number\n    if (typeof data.facingVelocity === 'number') {\n      this.velocity.facing.value = data.facingVelocity;\n    } else {\n      this.graph.fromData(data.facingVelocity, this.velocity.facing);\n    }\n\n    if (typeof data.facingAcceleration === 'number') {\n      this.acceleration.facing.value = data.facingAcceleration;\n    } else {\n      this.graph.fromData(data.facingAcceleration, this.acceleration.facing);\n    }\n\n    //  ------------------------------------------------\n    //  Acceleration\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('acceleration')) {\n      //  Use 'acceleration' when the ax and ay are interlinked\n      this.graph.fromData(data.acceleration, this.acceleration.x);\n      this.graph.fromData(data.acceleration, this.acceleration.y);\n    } else {\n      //  Avoids calling fromData if we know we're just dealing with a number\n      if (typeof data.ax === 'number') {\n        this.acceleration.x.value = data.ax;\n      } else {\n        this.graph.fromData(data.ax, this.acceleration.x);\n      }\n\n      if (typeof data.ay === 'number') {\n        this.acceleration.y.value = data.ay;\n      } else {\n        this.graph.fromData(data.ay, this.acceleration.y);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Scale and Rotation\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('scale')) {\n      this.graph.fromData(data.scale, this.scale.x);\n      this.graph.clone(this.scale.x, this.scale.y);\n    } else {\n      if (typeof data.scaleX === 'number') {\n        this.scale.x.value = data.scaleX;\n      } else {\n        this.graph.fromData(data.scaleX, this.scale.x);\n      }\n\n      if (typeof data.scaleY === 'number') {\n        this.scale.y.value = data.scaleY;\n      } else {\n        this.graph.fromData(data.scaleY, this.scale.y);\n      }\n    }\n\n    if (typeof data.rotation === 'number') {\n      this.rotation.value = data.rotation;\n    } else {\n      this.graph.fromData(data.rotation, this.rotation);\n    }\n\n    var parent = this.particle.parent;\n\n    if (parent && parent.emit && parent.emit.inherit) {\n      this.inherit(parent);\n    }\n  },\n\n  /**\n   * Adjust Particle parameters according to the inheritable properties\n   * of the parent particle.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#inherit\n   * @param {Phaser.ParticleStorm.Particle} - The Parent particle to inherit from.\n   */\n  inherit: function(parent) {\n    var inherit = parent.emit.inherit;\n    var all = false;\n\n    if (typeof inherit === 'boolean') {\n      all = true;\n    }\n\n    if (all || inherit.vx || inherit.velocity) {\n      this.graph.clone(parent.transform.velocity.x, this.velocity.x);\n    }\n\n    if (all || inherit.vy || inherit.velocity) {\n      this.graph.clone(parent.transform.velocity.y, this.velocity.y);\n    }\n\n    if (all || inherit.facingVelocity) {\n      this.graph.clone(parent.transform.velocity.facing, this.velocity.facing);\n    }\n\n    if (all || inherit.scaleX || inherit.scale) {\n      this.graph.clone(parent.transform.scale.x, this.scale.x);\n    }\n\n    if (all || inherit.scaleY || inherit.scale) {\n      this.graph.clone(parent.transform.scale.y, this.scale.y);\n    }\n\n    if (all || inherit.rotation) {\n      this.graph.clone(parent.transform.rotation, this.rotation);\n    }\n\n    if (inherit.angularVelocity) {\n      var r = ((parent.transform.rotation.initial + parent.transform.rotation.value) * Math.PI) / 180;\n      this.velocity.x.initial = Math.sin(r);\n      this.velocity.y.initial = -Math.cos(r);\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all transform controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#step\n   */\n  step: function() {\n    var life = this.particle.life;\n\n    this.scale.x.value += this.scale.x.delta;\n    this.scale.y.value += this.scale.y.delta;\n\n    this.rotation.value += this.rotation.delta;\n\n    this.rotation.calc = ((this.rotation.initial + this.graph.getValue(this.rotation, life)) * Math.PI) / 180;\n\n    this.scale.x.calc = this.scale.x.initial + this.graph.getValue(this.scale.x, life);\n    this.scale.y.calc = this.scale.y.initial + this.graph.getValue(this.scale.y, life);\n\n    //  Bail out if fresh\n    if (life === 0) {\n      return;\n    }\n\n    var r = 0;\n    var v = 0;\n\n    if (this.acceleration.facing.value !== null) {\n      //  Add 90 degrees because particle rotation 0 is right-handed\n      this.acceleration.facing.value += this.acceleration.facing.delta;\n      r = this.rotation.calc + ((90 + this.acceleration.facing.offset) * Math.PI) / 180;\n      v = this.acceleration.facing.initial + this.graph.getValue(this.acceleration.facing, life);\n      this.velocity.x.value += v * Math.sin(r);\n      this.velocity.y.value += v * -Math.cos(r);\n    }\n\n    this.acceleration.x.value += this.acceleration.x.delta;\n    this.acceleration.y.value += this.acceleration.y.delta;\n\n    this.velocity.x.value +=\n      this.velocity.x.delta + this.acceleration.x.initial + this.graph.getValue(this.acceleration.x, life);\n    this.velocity.y.value +=\n      this.velocity.y.delta + this.acceleration.y.initial + this.graph.getValue(this.acceleration.y, life);\n\n    if (this.velocity.facing.value !== null) {\n      //  Add 90 degrees because particle rotation 0 is right-handed\n      this.velocity.facing.value += this.velocity.facing.delta;\n      r = this.rotation.calc + ((90 + this.velocity.facing.offset) * Math.PI) / 180;\n      v = this.velocity.facing.initial + this.graph.getValue(this.velocity.facing, life);\n      this.x += v * Math.sin(r);\n      this.y += v * -Math.cos(r);\n    }\n\n    this.x += this.velocity.x.initial + this.graph.getValue(this.velocity.x, life);\n    this.y += this.velocity.y.initial + this.graph.getValue(this.velocity.y, life);\n  }\n};\n\nPhaser.ParticleStorm.Controls.Transform.prototype.constructor = Phaser.ParticleStorm.Controls.Transform;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\nPhaser.ParticleStorm.Renderer = {};\n\n/**\n * The base class which all ParticleStorm renderers must extend.\n *\n * @class Phaser.ParticleStorm.Renderer.Base\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.Base = function(emitter) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = emitter.game;\n\n  /**\n   * @property {Phaser.ParticleStorm.Emitter} emitter - The emitter that owns this renderer.\n   */\n  this.emitter = emitter;\n\n  /**\n   * @property {Phaser.ParticleStorm} parent - The Particle Storm plugin.\n   */\n  this.parent = emitter.parent;\n\n  /**\n   * The size of a 'pixel' as used by the Pixel renderer and others that extend\n   * it. It can be any positive value from 1 up. A value of 2 means a 2x2 pixel,\n   * 3 is a 3x3 pixel and so on. At a size of 1 or 2 it uses setPixel to\n   * draw to the BitmapData. At 3+ it uses a fillRect operation.\n   * @property {integer} pixelSize\n   */\n  this.pixelSize = 1;\n};\n\nPhaser.ParticleStorm.Renderer.Base.prototype = {\n  /**\n   * Adds this Particle Renderer to the display list.\n   *\n   * You can specify a Group to add it to. If none is given it will use Phaser.World instead.\n   * If this renderer emits particle display objects such as Phaser.Sprites they will be added to the same Group.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#addToWorld\n   * @param {Phaser.Group} [group] - The Group to add this renderer to. If not specified Phaser.World is used.\n   * @return {Phaser.Image|Phaser.Sprite|Phaser.Group} The display object that contains the particle renderer.\n   */\n  addToWorld: function(group) {\n    group.add(this.display);\n\n    return this.display;\n  },\n\n  /**\n   * The preUpdate method of this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#preUpdate\n   */\n  preUpdate: function() {},\n\n  /**\n   * Adds the given particle to this renderer, to be rendered in the next update.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#add\n   * @param {Phaser.ParticleStorm.Particle} particle - Adds a particle to this renderer.\n   */\n  add: function() {\n    return null;\n  },\n\n  /**\n   * Updates the given particle within this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#update\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n   */\n  update: function(particle) {\n    return particle;\n  },\n\n  /**\n   * The postUpdate method of this renderer.\n   * Called after all updates have taken place, before the render pass.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#postUpdate\n   */\n  postUpdate: function() {},\n\n  /**\n   * Kills the given particle from this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#kill\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to be killed.\n   */\n  kill: function(particle) {\n    return particle;\n  },\n\n  /**\n   * Destroys this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#destroy\n   */\n  destroy: function() {\n    this.game = null;\n  }\n};\n\nPhaser.ParticleStorm.Renderer.Base.prototype.constructor = Phaser.ParticleStorm.Renderer.Base;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Sprite based renderer.\n *\n * @class Phaser.ParticleStorm.Renderer.Sprite\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.Sprite = function(emitter) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * A Phaser.Group that contains all particles created by this renderer.\n   * @property {Phaser.Group} display\n   */\n  this.display = this.game.make.group(null, 'particleStormSpriteRenderer');\n};\n\nPhaser.ParticleStorm.Renderer.Sprite.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.Sprite.prototype.constructor = Phaser.ParticleStorm.Renderer.Sprite;\n\n/**\n * Adds the given particle to this renderer. If the particle has a sprite property\n * then its reset and updated. If it doesn't then a new Phaser.Sprite is created,\n * belonging to this renderers display group.\n *\n * @method Phaser.ParticleStorm.Renderer.Sprite#add\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n * @return {Phaser.Sprite} This particles sprite property.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.add = function(particle) {\n  var spr = particle.sprite;\n  var key = particle.texture.key;\n  var frame = particle.texture.frame;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (spr) {\n    spr.reset(particle.transform.x, particle.transform.y);\n\n    if (spr.key !== key) {\n      spr.loadTexture(key, frame);\n    } else {\n      if (particle.texture.frame !== undefined) {\n        spr.frame = frame;\n      } else if (particle.texture.frameName !== undefined) {\n        spr.frameName = frame;\n      }\n    }\n  } else {\n    spr = this.display.create(particle.transform.x, particle.transform.y, key, frame);\n  }\n\n  spr.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.blendMode = particle.color.blendMode[0];\n  spr.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  spr.visible = particle.visible;\n\n  particle.sprite = spr;\n\n  return spr;\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Sprite#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.update = function(particle) {\n  var spr = particle.sprite;\n\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    spr.visible = false;\n    return;\n  }\n\n  spr.visible = particle.visible;\n\n  spr.alpha = particle.color.alpha.calc;\n\n  spr.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  spr.x = particle.transform.x;\n  spr.y = particle.transform.y;\n};\n\n/**\n * Kills the given particle from this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#kill\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be killed.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.kill = function(particle) {\n  if (particle.sprite) {\n    particle.sprite.kill();\n  }\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#destroy\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.destroy = function() {\n  this.display.destroy(true);\n\n  this.emitter = null;\n\n  this.game = null;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Pixel renderer. This is a special form of the BitmapData renderer which is\n * dedicated to rendering pixel particles, rather than images or sprites.\n *\n * The size of the pixels can be controlled with the `pixelSize` property, which can\n * be changed in real-time.\n *\n * @class Phaser.ParticleStorm.Renderer.Pixel\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.Pixel = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The BitmapData object which is used to render the particles to.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = this.game.make.bitmapData(width, height);\n\n  /**\n   * A Phaser.Image that has this BitmapData set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.bmd);\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.Pixel.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.Pixel.prototype.constructor = Phaser.ParticleStorm.Renderer.Pixel;\n\n/**\n * Resizes the dimensions of the BitmapData used for rendering.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#resize\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n * @return {Phaser.ParticleStorm.Renderer.Pixel} This renderer.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.resize = function(width, height) {\n  this.bmd.resize(width, height);\n\n  return this;\n};\n\n/**\n * Clears this BitmapData. An optional `alpha` value allows you to specify\n * the amount of alpha to use when clearing. By setting values lower than 1\n * you can leave behind previous particle images, creating 'trail' like effects.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#clear\n * @param {number} [alpha=1] - The alpha color value, between 0 and 1.\n * @return {Phaser.ParticleStorm.Renderer.Pixel} This renderer.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.clear = function(alpha) {\n  this.bmd.fill(0, 0, 0, alpha);\n  this.bmd.update();\n\n  return this;\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#preUpdate\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.bmd.clear();\n    this.bmd.update();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    return;\n  }\n\n  //  We need whole numbers to render pixels\n  var x = Math.floor(particle.transform.x);\n  var y = Math.floor(particle.transform.y);\n\n  var r = particle.color.red.calc;\n  var g = particle.color.green.calc;\n  var b = particle.color.blue.calc;\n  var a = Math.floor(particle.color.alpha.calc * 255);\n\n  if (this.pixelSize > 2) {\n    this.bmd.rect(x, y, this.pixelSize, this.pixelSize, particle.color.rgba);\n  } else {\n    this.bmd.setPixel32(x, y, r, g, b, a, false);\n\n    //  2x2\n    if (this.pixelSize === 2) {\n      this.bmd.setPixel32(x + 1, y, r, g, b, a, false);\n      this.bmd.setPixel32(x, y + 1, r, g, b, a, false);\n      this.bmd.setPixel32(x + 1, y + 1, r, g, b, a, false);\n    }\n  }\n};\n\n/**\n * The postUpdate method is called automatically when all particles have\n * been rendered.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#postUpdate\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.postUpdate = function() {\n  if (this.pixelSize <= 2) {\n    this.bmd.context.putImageData(this.bmd.imageData, 0, 0);\n  }\n\n  this.bmd.dirty = true;\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#destroy\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.destroy = function() {\n  this.game = null;\n\n  this.display.destroy();\n\n  this.bmd.destroy();\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A BitmapData based renderer. A single BitmapData is created onto which all\n * particles are rendered directly. The renderer can be resized using the resize method.\n *\n * @class Phaser.ParticleStorm.Renderer.BitmapData\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.BitmapData = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The BitmapData object which is used to render the particles to.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = this.game.make.bitmapData(width, height);\n\n  /**\n   * A Phaser.Image that has this BitmapData set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.bmd);\n\n  /**\n   * If true then all pixel coordinates will be rounded before being rendered.\n   * This avoids sub-pixel anti-aliasing.\n   * @property {boolean} roundPx\n   * @default\n   */\n  this.roundPx = true;\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.BitmapData.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.constructor = Phaser.ParticleStorm.Renderer.BitmapData;\n\n/**\n * Resizes the dimensions of the BitmapData used for rendering.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#resize\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n * @return {Phaser.ParticleStorm.Renderer.BitmapData} This renderer.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.resize = function(width, height) {\n  this.bmd.resize(width, height);\n\n  return this;\n};\n\n/**\n * Clears this BitmapData. An optional `alpha` value allows you to specify\n * the amount of alpha to use when clearing. By setting values lower than 1\n * you can leave behind previous particle images, creating 'trail' like effects.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#clear\n * @param {number} [alpha=1] - The alpha color value, between 0 and 1.\n * @return {Phaser.ParticleStorm.Renderer.BitmapData} This renderer.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.clear = function(alpha) {\n  this.bmd.fill(0, 0, 0, alpha);\n\n  return this;\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#preUpdate\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.bmd.clear();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    return;\n  }\n\n  //  We need whole numbers to render pixels\n  var t = particle.transform;\n\n  this.bmd.copy(\n    particle.texture.key,\n    0,\n    0,\n    null,\n    null,\n    t.x,\n    t.y,\n    null,\n    null,\n    t.rotation.calc,\n    t.anchor.x,\n    t.anchor.y,\n    t.scale.x.calc,\n    t.scale.y.calc,\n    particle.color.alpha.calc,\n    particle.color.blendMode[1],\n    this.roundPx\n  );\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#destroy\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.destroy = function() {\n  this.game = null;\n\n  this.display.destroy();\n\n  this.bmd.destroy();\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A RenderTexture based renderer. Render Textures are highly optimised (under WebGL)\n * for rendering images to. This renderer works by creating a 'stamp', which takes on\n * the form of each particle and then 'stamps' itself on this RenderTexture. This avoids\n * each particle needing to have its own sprite instance.\n *\n * @class Phaser.ParticleStorm.Renderer.RenderTexture\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.RenderTexture = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The RenderTexture object which is used to render the particles to.\n   * @property {Phaser.RenderTexture} renderTexture\n   */\n  this.renderTexture = this.game.make.renderTexture(width, height);\n\n  /**\n   * A Phaser.Image that has this RenderTexture set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.renderTexture);\n\n  /**\n   * A Phaser.Image that is used as the stamp for this RenderTexture. When a\n   * particle is rendered to this RenderTexture the stamp takes on the texture\n   * and form of the particle, then 'stamps' itself on the RenderTexture.\n   * @property {Phaser.Image} stamp\n   * @protected\n   */\n  this.stamp = this.game.make.sprite(0, 0);\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.constructor = Phaser.ParticleStorm.Renderer.RenderTexture;\n\n/**\n * Clears the RenderTexture being used by this renderer. This happens automatically\n * if `autoClear` is enabled.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#clear\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.clear = function() {\n  this.renderTexture.clear();\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#preUpdate\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.renderTexture.clear();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if ((particle.delay > 0 && !particle.delayVisible) || !particle.visible || particle.color.alpha.calc === 0) {\n    return;\n  }\n\n  //  Transfer settings to the drawing object\n  var key = particle.texture.key;\n  var frame = particle.texture.frame;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (this.stamp.key !== key) {\n    this.stamp.loadTexture(key, frame);\n  } else {\n    if (particle.texture.frame !== undefined) {\n      this.stamp.frame = frame;\n    } else if (particle.texture.frameName !== undefined) {\n      this.stamp.frameName = frame;\n    }\n  }\n\n  this.stamp.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  this.stamp.alpha = particle.color.alpha.calc;\n\n  this.stamp.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    this.stamp.tint = particle.color.tint;\n  }\n\n  this.stamp.blendMode = particle.color.blendMode[0];\n\n  this.stamp.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  this.stamp.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  this.renderTexture.renderXY(this.stamp, particle.transform.x, particle.transform.y, false);\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#destroy\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.destroy = function() {\n  this.display.destroy();\n\n  this.stamp.destroy();\n\n  this.renderTexture.destroy();\n\n  this.emitter = null;\n\n  this.game = null;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Sprite Batch based renderer. Sprite Batching is a way to get extremely fast\n * drawing, especially under WebGL, by batching the particles together and reducing\n * the quantity of draw calls. It only works when every particle uses the exact same\n * Texture. If you have particles with varying textures then they will break the batch,\n * nullifying the effect of its speed. You can use texture atlases to combine different\n * frames into a single batch, but the core texture must be the same for all particles.\n *\n * @class Phaser.ParticleStorm.Renderer.SpriteBatch\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch = function(emitter) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * A Phaser.SpriteBatch that contains all of the particles in this renderer.\n   * @property {Phaser.SpriteBatch} display\n   */\n  this.display = this.game.make.spriteBatch();\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.constructor = Phaser.ParticleStorm.Renderer.SpriteBatch;\n\n/**\n * Adds the given particle to this renderer. If the particle has a sprite property\n * then its reset and updated. If it doesn't then a new Phaser.Sprite is created,\n * belonging to this renderers display.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#add\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n * @return {Phaser.Sprite} This particles sprite property.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.add = function(particle) {\n  var spr = particle.sprite;\n  var key = particle.texture.key;\n  var frame = particle.texture.frame;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (spr) {\n    spr.reset(particle.transform.x, particle.transform.y);\n\n    if (spr.key !== key) {\n      spr.loadTexture(key, frame);\n    } else {\n      if (particle.texture.frame !== undefined) {\n        spr.frame = frame;\n      } else if (particle.texture.frameName !== undefined) {\n        spr.frameName = frame;\n      }\n    }\n  } else {\n    spr = this.game.make.sprite(particle.transform.x, particle.transform.y, key, frame);\n  }\n\n  this.display.addChild(spr);\n\n  spr.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.blendMode = particle.color.blendMode[0];\n  spr.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  spr.visible = particle.visible;\n\n  particle.sprite = spr;\n\n  return spr;\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.update = function(particle) {\n  var spr = particle.sprite;\n\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    spr.visible = false;\n    return;\n  }\n\n  spr.visible = particle.visible;\n\n  spr.alpha = particle.color.alpha.calc;\n\n  spr.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  spr.x = particle.transform.x;\n  spr.y = particle.transform.y;\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.kill = function(particle) {\n  if (particle.sprite) {\n    particle.sprite.kill();\n  }\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.destroy = function() {\n  this.display.destroy(true);\n\n  this.emitter = null;\n\n  this.game = null;\n};\n","import { startupCommand } from './commands/startup-command';\nimport FontLoader from './display/font-loader';\nimport LU from './display/layout-utils';\nimport Globals from './kernel/globals';\nimport './lib/particle-storm';\nimport { CtaModule } from './objects/cta/cta-module';\nimport { GameState } from './states/game-state';\nimport { PreloaderState } from './states/preloader-state';\nimport './strings';\n\nwindow.CI_API = window.CI_API || {\n  states: {},\n  PreloaderState,\n  GameState,\n  FontLoader,\n  LU,\n  CTA: null, // define CTA later\n  Globals,\n  renderer: 1 /* 0 - Auto | << 1 - Canvas >> | 2 - WebGL */\n};\n\nclass Game extends Phaser.Game {\n  constructor() {\n    super('100%', '100%', CI_API.renderer, LU.CONTAINER_NAME, null, true);\n  }\n}\n\n/* Load our font resources and create a new game */\nwindow.ad_begin = () => {\n  FontLoader.loadFonts(() => {\n    /**\n     * Create new game after initializing all information about loading modules\n     * As we loading xp-assets.json as independent file in the -preview mode and this json doesn't\n     * inlines to the [embedded]\n     * we need to load it separately.\n     * So here we waiting for the callback when this file was loaded.\n     * Define CTA class\n     */\n    xp.init(Globals.WEB_ROOT, () => {\n      CI_API.CTA = xp.getActiveModule('cta_style', CtaModule);\n      // @ts-ignore\n      CI_API.game = new Game();\n      setTimeout(() => {\n        // legologger.start(legoLoggerConfig);\n        startupCommand();\n      });\n    });\n  });\n};\n","import { AdStatus, AdViewState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\nimport { CtaModel } from './cta-model';\nimport { HintModel } from './hint-model';\nimport { LoadModel } from './load-model';\nimport { PersistentCtaModel } from './persistent-cta-model';\nimport { SoundModel } from './sound-model';\nimport { TutorialModel } from './tutorial-model';\n\nexport class AdModel extends ObservableModel {\n  constructor() {\n    super('AdModel');\n\n    this._cta = null;\n    this._hint = null;\n    this._load = null;\n    this._sound = null;\n    this._tutorial = null;\n    this._persistentCta = null;\n    this._status = AdStatus.Unknown;\n    this._viewState = AdViewState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  set status(value) {\n    this._status = value;\n  }\n\n  get viewState() {\n    return this._viewState;\n  }\n\n  set viewState(value) {\n    this._viewState = value;\n  }\n\n  get load() {\n    return this._load;\n  }\n\n  get hint() {\n    return this._hint;\n  }\n\n  get tutorial() {\n    return this._tutorial;\n  }\n\n  get persistentCta() {\n    return this._persistentCta;\n  }\n\n  get cta() {\n    return this._cta;\n  }\n\n  get sound() {\n    return this._sound;\n  }\n\n  initialize() {\n    this._load = new LoadModel();\n  }\n\n  // CTA\n  initializeCtaModel() {\n    this._cta = new CtaModel();\n    this._cta.initialize();\n  }\n\n  destroyCtaModel() {\n    this._cta.destroy();\n    this._cta = null;\n  }\n\n  // HINT\n  initializeHintModel() {\n    this._hint = new HintModel();\n    this._hint.initialize();\n  }\n\n  destroyHintModel() {\n    this._hint.destroy();\n    this._hint = null;\n  }\n\n  // LOAD\n  initializeLoadModel() {\n    this._load = new LoadModel();\n    this._load.initialize();\n  }\n\n  destroyLoadModel() {\n    this._load.destroy();\n    this._load = null;\n  }\n\n  // TUTORIAL\n  initializeTutorialModel() {\n    this._tutorial = new TutorialModel();\n    this._tutorial.initialize();\n  }\n\n  destroyTutorialModel() {\n    this._tutorial.destroy();\n    this._tutorial = null;\n  }\n\n  // PERSISTENT_CTA\n  initializePersistentCtaModel() {\n    this._persistentCta = new PersistentCtaModel();\n    this._persistentCta.initialize();\n  }\n\n  destroyPersistentCtaModel() {\n    this._persistentCta.destroy();\n    this._persistentCta = null;\n  }\n\n  // SOUND;\n  initializeSoundModel() {\n    this._sound = new SoundModel();\n    this._sound.initialize();\n  }\n\n  destroySoundModel() {\n    this._sound.destroy();\n    this._sound = null;\n  }\n}\n","import { GameOverReasons } from '../../constants';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class CtaModel extends ObservableModel {\n  constructor() {\n    super('CtaModel');\n\n    this._visible = null;\n    this._preVisible = null;\n    this._reason = GameOverReasons.Unknown;\n\n    this.makeObservable();\n  }\n\n  get reason() {\n    return this._reason;\n  }\n\n  get preVisible() {\n    return this._preVisible;\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  destroy() {\n    removeRunnable(this._visibilityDelayTimer);\n  }\n\n  show(reason, delay = 0) {\n    this._preVisible = true;\n    this._reason = reason;\n\n    removeRunnable(this._visibilityDelayTimer);\n    this._visibilityDelayTimer = delayRunnable(delay, () => {\n      this._visible = true;\n    });\n  }\n}\n","import { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class HintModel extends ObservableModel {\n  constructor() {\n    super('HintModel');\n\n    this._visible = false;\n    this.makeObservable();\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    this._visible = value;\n    this._stopVisibilityTimer();\n  }\n\n  initialize() {\n    this._startVisibilityTimer();\n  }\n\n  destroy() {\n    this._stopVisibilityTimer();\n  }\n\n  resetVisibilityTimer() {\n    this._stopVisibilityTimer();\n    this._startVisibilityTimer();\n  }\n\n  _startVisibilityTimer() {\n    this._visibilityTimer = delayRunnable(CI_API.Globals.PARAMS.hint_on_idle, () => {\n      this._visible = true;\n    });\n  }\n\n  _stopVisibilityTimer() {\n    removeRunnable(this._visibilityTimer);\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class LoadModel extends ObservableModel {\n  constructor() {\n    super('LoadModel');\n\n    this._progress = 0;\n    this._complete = false;\n    this.makeObservable();\n  }\n\n  get progress() {\n    return this._progress;\n  }\n\n  set progress(value) {\n    this._progress = value;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PersistentCtaModel extends ObservableModel {\n  constructor() {\n    super('PersistentCtaModel');\n  }\n}\n","import { SoundState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\n\nexport class SoundModel extends ObservableModel {\n  constructor() {\n    super('SoundModel');\n\n    this._state = SoundState.Unknown;\n    this._icon = null;\n\n    this.makeObservable();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value) {\n    this._icon = value;\n  }\n\n  initialize() {\n    this._icon = CI_API.Globals.PARAMS.sound_icon;\n    this._state = SoundState.On;\n  }\n}\n","import { getTutorialConfig } from '../../configs/tutorial-config';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\nimport { TutorialSequenceModel } from './tutorial-sequence-model';\n\nexport class TutorialModel extends ObservableModel {\n  constructor() {\n    super('TutorialModel');\n\n    this._complete = false;\n    this._sequences = null;\n    this._current = null;\n    this._sequenceCompleteTimer = null;\n\n    this.makeObservable();\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n\n  get sequences() {\n    return this._sequences;\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  initialize() {\n    super.initialize();\n\n    this._initSequences();\n    this.nextSequence();\n  }\n\n  destroy() {\n    this._stopSequenceCompleteTimer();\n\n    super.destroy();\n  }\n\n  nextSequence() {\n    this._current = this._sequences.shift();\n    this._startSequenceCompleteTimer();\n  }\n\n  completeSequence() {\n    this._current.complete = true;\n    this._stopSequenceCompleteTimer();\n  }\n\n  _initSequences() {\n    this._sequences = getTutorialConfig().map(config => new TutorialSequenceModel(config));\n  }\n\n  _startSequenceCompleteTimer() {\n    this._sequenceCompleteTimer = delayRunnable(this.current.config.duration, this.completeSequence, this);\n  }\n\n  _stopSequenceCompleteTimer() {\n    removeRunnable(this._sequenceCompleteTimer);\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class TutorialSequenceModel extends ObservableModel {\n  constructor(config) {\n    super('TutorialSequenceModel');\n\n    this._config = config;\n    this._complete = false;\n\n    this.makeObservable('_complete');\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n}\n","import { getGameConfig } from '../../configs/game-config';\nimport { GameState, LOOT_BOX_TIME } from '../../constants';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\nimport { LevelModel } from './level/level-model';\n\nexport class GameModel extends ObservableModel {\n  constructor() {\n    super('GameModel');\n\n    this._state = GameState.Unknown;\n    this._levels = null;\n    this._currentLevelId = undefined;\n\n    this.makeObservable();\n  }\n\n  // GET,SET......\n  get state() {\n    return this._state;\n  }\n\n  get levels() {\n    return this._levels;\n  }\n\n  get currentLevelId() {\n    return this._currentLevelId;\n  }\n\n  get currentLevel() {\n    return this.getLevelById(this._currentLevelId);\n  }\n\n  getLevelById(id) {\n    return this.levels[id - 1];\n  }\n\n  getLevelByUuid(uuid) {\n    return this.levels.find(level => level.uuid === uuid);\n  }\n\n  // ACTIONS.....\n  showLootBox() {\n    this._state = GameState.ShowLoot;\n\n    this._lootBoxRunnable = delayRunnable(LOOT_BOX_TIME, () => {\n      this.hideLootBox();\n    });\n  }\n\n  hideLootBox() {\n    removeRunnable(this._lootBoxRunnable);\n    this._state = GameState.HideLoot;\n    this.createLevel(1);\n  }\n\n  createLevel(levelId, delay = 0) {\n    this._createLevelDelay = delayRunnable(delay, () => {\n      this._currentLevelId = levelId;\n      this._state = GameState.CreateLevel;\n\n      const currentLevel = this.getLevelById(this._currentLevelId);\n      const prevLevel = this.getLevelById(this._currentLevelId - 1);\n\n      currentLevel.show();\n      prevLevel && prevLevel.hide();\n    });\n  }\n\n  levelCreated() {\n    this._state = GameState.Idle;\n  }\n\n  levelDestroyed() {\n    this._state = GameState.Idle;\n  }\n\n  destroyLevel() {\n    this._state = GameState.DestroyLevel;\n  }\n\n  initialize() {\n    const allConfig = getGameConfig();\n    const levels = [];\n\n    const config = allConfig.slice(0, CI_API.Globals.PARAMS.number_tracks);\n\n    config.forEach(levelConfig => {\n      const levelModel = new LevelModel();\n      levelModel.initialize(levelConfig);\n\n      levels.push(levelModel);\n    });\n\n    this._levels = levels;\n\n    this.showLootBox();\n  }\n\n  destroy() {\n    this._levels.forEach(level => {\n      level.destroy();\n    });\n    this._levels = null;\n    removeRunnable(this._lootBoxRunnable);\n    removeRunnable(this._createLevelDelay);\n    super.destroy();\n  }\n}\n","import { COOLDOWN_TIME, LevelState } from '../../../constants';\nimport { delayRunnable, removeRunnable } from '../../../utils';\nimport { ObservableModel } from '../../observable-model';\nimport { OrbModel } from './orb-model';\nimport { TraceModel } from './trace-model';\n\nexport class LevelModel extends ObservableModel {\n  constructor() {\n    super('LevelModel');\n\n    this._levelId = null;\n    this._config = null;\n    this._traces = null;\n    this._orbs = null;\n    this._activeTraceIndex = null;\n    this._state = LevelState.Unknown;\n\n    this.makeObservable('_state', '_activeTraceIndex');\n  }\n\n  get levelId() {\n    return this._levelId;\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get traces() {\n    return this._traces;\n  }\n\n  get orbs() {\n    return this._orbs;\n  }\n\n  get activeTraceIndex() {\n    return this._activeTraceIndex;\n  }\n\n  // ACTIONS......\n  show() {\n    this._activeTraceIndex = 0;\n    this._state = LevelState.Show;\n  }\n\n  hide() {\n    this._state = LevelState.Hide;\n  }\n\n  showed() {\n    this._state = LevelState.Idle;\n    this._traces[this._activeTraceIndex].activate();\n  }\n\n  activateOrb() {\n    this._state = LevelState.ActivateOrb;\n  }\n\n  orbActivated() {\n    this._state = LevelState.Idle;\n  }\n\n  deactivateCurrentTrace() {\n    this._traces[this._activeTraceIndex].deactivate();\n  }\n\n  activateNextTrace() {\n    this._activeTraceIndex += 1;\n    this._traces[this._activeTraceIndex].activate();\n  }\n\n  cooldown() {\n    this._state = LevelState.Cooldown;\n\n    this._traces.forEach(trace => {\n      trace.idle();\n    });\n\n    this._winCheckRunnable = delayRunnable(COOLDOWN_TIME, this._cooldownTimerComplete, this);\n  }\n\n  levelLose() {\n    removeRunnable(this._winCheckRunnable);\n    this._state = LevelState.ResultLose;\n  }\n\n  restart() {\n    this._activeTraceIndex = 0;\n    this._traces.forEach(trace => {\n      trace.restart();\n    });\n\n    this._traces[0].activate();\n    this._state = LevelState.Restart;\n  }\n\n  restarted() {\n    this._state = LevelState.Idle;\n    this._traces[this._activeTraceIndex].activate();\n  }\n\n  initialize(levelConfig) {\n    const { levelId, traces, orbs } = levelConfig;\n\n    this._levelId = levelId;\n    this._config = levelConfig;\n\n    this._traces = this._initializeTraces(traces);\n    this._orbs = this._initializeOrbs(orbs);\n  }\n\n  destroy() {\n    removeRunnable(this._winCheckRunnable);\n    super.destroy();\n  }\n\n  _cooldownTimerComplete() {\n    this._state = LevelState.ResultWin;\n  }\n\n  _initializeTraces(tracesConfig) {\n    const traces = [];\n\n    tracesConfig.forEach(traceConfig => {\n      const traceModel = new TraceModel(traceConfig);\n      traces.push(traceModel);\n    });\n\n    return traces;\n  }\n\n  _initializeOrbs(orbsConfig) {\n    const orbs = [];\n\n    orbsConfig.forEach(orbConfig => {\n      const orbModel = new OrbModel(orbConfig);\n      orbs.push(orbModel);\n    });\n\n    return orbs;\n  }\n}\n","export class OrbModel {\n  constructor(config) {\n    this._config = config;\n  }\n\n  get config() {\n    return this._config;\n  }\n}\n","import { TraceState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\n\nexport class TraceModel extends ObservableModel {\n  constructor(config) {\n    super('TraceModel');\n\n    this._config = config;\n    this._state = TraceState.Unknown;\n\n    this.makeObservable('_state');\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  // ACTIONS\n  activate() {\n    this._state = TraceState.Active;\n  }\n\n  deactivate() {\n    this._state = TraceState.Passive;\n  }\n\n  idle() {\n    this._state = TraceState.Idle;\n  }\n\n  restart() {\n    this._state = TraceState.Passive;\n  }\n}\n","import { lego } from '@armathai/lego';\n\nconst getUUID = (() => {\n  let num = 0;\n  return (prefix = '') => {\n    num += 1;\n    const value = num < 10 ? `0${num}` : num;\n    return `${prefix}${value.toString()}`;\n  };\n})();\n\nexport class ObservableModel {\n  constructor(name) {\n    this.__name__ = name;\n    this._uuid = getUUID(this.__name__);\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  makeObservable(...properties) {\n    lego.observe.makeObservable(this, ...properties);\n  }\n\n  createObservable(property, value) {\n    lego.observe.createObservable(this, property, value);\n  }\n\n  removeObservable(...properties) {\n    lego.observe.removeObservable(this, ...properties);\n  }\n\n  initialize() {}\n\n  destroy() {}\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PlayerModel extends ObservableModel {\n  constructor() {\n    super('PlayerModel');\n\n    this._lives = CI_API.Globals.PARAMS.deaths_to_cta;\n  }\n\n  get lives() {\n    return this._lives;\n  }\n\n  updateLives(lives) {\n    this._lives = lives;\n  }\n}\n","import { AdModel } from './ad/ad-model';\nimport { GameModel } from './game/game-model';\nimport { ObservableModel } from './observable-model';\nimport { PlayerModel } from './player/player-model';\n\nclass Store extends ObservableModel {\n  constructor() {\n    super('Store');\n\n    this._ad = null;\n    this._game = null;\n    this._player = null;\n\n    this.makeObservable();\n  }\n\n  get ad() {\n    return this._ad;\n  }\n\n  set ad(value) {\n    this._ad = value;\n  }\n\n  get player() {\n    return this._player;\n  }\n\n  set player(value) {\n    this._player = value;\n  }\n\n  get game() {\n    return this._game;\n  }\n\n  set game(value) {\n    this._game = value;\n  }\n\n  // AD\n  initializeADModel() {\n    this._ad = new AdModel();\n    this._ad.initialize();\n  }\n\n  // PLAYER\n  initializePlayerModel() {\n    this._player = new PlayerModel();\n    this._player.initialize();\n  }\n\n  destroyPlayerModel() {\n    this._player.destroy();\n    this._player = null;\n  }\n\n  // GAME\n  initializeGameModel() {\n    this._game = new GameModel();\n    this._game.initialize();\n  }\n\n  destroyGameModel() {\n    this._game.destroy();\n    this._game = null;\n  }\n}\n\nexport const store = new Store();\n","import * as animationConfigs from './configs/animation-configs';\nimport * as buttonConfigs from './configs/button-configs';\nimport * as gridConfigs from './configs/grid-configs';\nimport * as imageConfigs from './configs/image-configs';\nimport * as ninepatchConfigs from './configs/ninepatch-configs';\nimport * as particlesConfigs from './configs/particles-configs';\nimport * as spineConfigs from './configs/spine-configs';\nimport * as textConfigs from './configs/text-configs';\nimport { CTAEmbedded } from './objects/cta/cta-embedded';\nimport { CTAStandard } from './objects/cta/cta-standard';\nimport * as utils from './utils';\n\nexport default {\n  animationConfigs,\n  buttonConfigs,\n  gridConfigs,\n  particlesConfigs,\n  imageConfigs,\n  ninepatchConfigs,\n  spineConfigs,\n  textConfigs,\n  utils,\n  CTAStandard,\n  CTAEmbedded\n};\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getBackgroundGridConfig } from '../../configs/grid-configs';\nimport {\n  getBackgroundLeftBottomCornerImageConfig,\n  getBackgroundLeftTopCornerImageConfig,\n  getBackgroundRightBottomCornerImageConfig,\n  getBackgroundRightTopCornerImageConfig\n} from '../../configs/image-configs';\nimport { getSparkleEmitterConfig } from '../../configs/particles-configs';\nimport { ViewEvents } from '../../events/view-events';\nimport { makeEmitter, makeImage } from '../../utils';\nimport { removeEmitter } from '../../utils/index';\n\nexport class BackgroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    lego.event.on(ViewEvents.Game.Resize, this._onResize, this);\n  }\n\n  build(config) {\n    super.build(config);\n    this._buildCornerEffects();\n    this._buildSparkleEffect();\n  }\n\n  get name() {\n    return 'BackgroundView';\n  }\n\n  getGridConfig() {\n    return getBackgroundGridConfig();\n  }\n\n  _onResize() {\n    this._sparkleEmitter && this._removeSparkleEffect();\n    this._buildSparkleEffect();\n  }\n\n  _buildCornerEffects() {\n    const leftTop = makeImage(getBackgroundLeftTopCornerImageConfig());\n    const rightTop = makeImage(getBackgroundRightTopCornerImageConfig());\n    const rightBottom = makeImage(getBackgroundRightBottomCornerImageConfig());\n    const leftBottom = makeImage(getBackgroundLeftBottomCornerImageConfig());\n    this.setChild('left-top', leftTop);\n    this.setChild('right-top', rightTop);\n    this.setChild('right-bottom', rightBottom);\n    this.setChild('left-bottom', leftBottom);\n  }\n\n  _buildSparkleEffect() {\n    this._sparkleEmitter = makeEmitter(getSparkleEmitterConfig(this));\n  }\n\n  _removeSparkleEffect() {\n    removeEmitter(this._sparkleEmitter);\n    this._sparkleEmitter = null;\n  }\n}\n","import { getCtaEmbeddedPlayButtonConfig } from '../../configs/button-configs';\nimport { getCTAEmbeddedGridConfig } from '../../configs/grid-configs';\nimport { getCtaEmbeddedPopupBgPatchConfig } from '../../configs/ninepatch-configs';\nimport { getCTALootBoxSpineConfig, Spines } from '../../configs/spine-configs';\nimport { getCtaEmbeddedSubtitleTextConfig, getCtaEmbeddedTitleTextConfig } from '../../configs/text-configs';\nimport {\n  getCtaEmbeddedPopupBgImageSize,\n  getGameBounds,\n  makeNinePatch,\n  makeSpine,\n  makeText,\n  postRunnable\n} from '../../utils';\nimport { CTAView } from './cta-view';\n\nconst getBoxScale = () => {\n  return LP(0.65, 1);\n};\n\nconst getBoxYRatio = () => {\n  return 0.1;\n};\n\nclass Popup extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n    this.add((this._bg = this._buildBg()));\n    this.add((this._box = this._buildBox()));\n    this._updateBoxTransform();\n  }\n\n  rebuild() {\n    const { width, height } = getCtaEmbeddedPopupBgImageSize();\n    this._bg.resize(width, height);\n    this._box.visible = false;\n    postRunnable(() => {\n      this._box.visible = true;\n      this._updateBoxTransform();\n    });\n    this._title && this._title.destroy();\n    this.add((this._title = this._buildTitle()));\n    this._subtitle && this._subtitle.destroy();\n    this.add((this._subtitle = this._buildSubtitle()));\n  }\n\n  _buildBg() {\n    const bg = makeNinePatch(getCtaEmbeddedPopupBgPatchConfig());\n    return bg;\n  }\n\n  _buildBox() {\n    const spine = makeSpine(getCTALootBoxSpineConfig());\n    spine.setToSetupPose();\n    const cta = spine.setAnimationByName(0, Spines.CTALootBox.Animations.CTA, false);\n    cta.onComplete = () => {\n      spine.setAnimationByName(0, Spines.CTALootBox.Animations.CTAIdle, true);\n    };\n    return spine;\n  }\n\n  _buildTitle() {\n    const title = makeText(getCtaEmbeddedTitleTextConfig());\n    title.anchor.set(0.5);\n    title.y = this._bg.height * LP(0.35, 0.33);\n    return title;\n  }\n\n  _buildSubtitle() {\n    const subtitle = makeText(getCtaEmbeddedSubtitleTextConfig());\n    subtitle.anchor.set(0.5);\n    subtitle.y = this._title.y + subtitle.height * LP(0.9, 1.2);\n    return subtitle;\n  }\n\n  _updateBoxTransform() {\n    this._box.y = this._bg.height * getBoxYRatio();\n    this._box.scale.set(getBoxScale());\n  }\n}\n\nexport class CTAEmbedded extends CTAView {\n  constructor() {\n    super();\n    this.build();\n  }\n\n  getGridConfig() {\n    return getCTAEmbeddedGridConfig();\n  }\n\n  build() {\n    super.build(this.getGridConfig(), 0);\n    this._buildPopup();\n    this.setChild('btn', this.buildPlayButton(getCtaEmbeddedPlayButtonConfig()));\n  }\n\n  show() {\n    const { x, width } = getGameBounds();\n    this.game.add.tween(this).from({ x: x + width + this.width / 2 }, 800, Phaser.Easing.Cubic.InOut, true);\n  }\n\n  rebuild(config) {\n    // this._tutorialView && this._tutorialView.rebuild();\n    this._popup.rebuild();\n    super.rebuild(config);\n  }\n\n  _buildPopup() {\n    this.setChild('popup', (this._popup = new Popup()));\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { AdStatus } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport moduleBindings from '../../module-bindings';\n\nexport class CtaModule extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.bindings = moduleBindings;\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  getGridConfig() {\n    return new Error('function getGridConfig() is not implemented');\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n  }\n\n  build() {\n    super.build(this.getGridConfig());\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this.build();\n        break;\n      case AdStatus.Game:\n        this.removeChildren();\n        break;\n      default:\n    }\n  }\n}\n","import { getCtaStandardPlayButtonConfig } from '../../configs/button-configs';\nimport { getCTAStandardGridConfig } from '../../configs/grid-configs';\nimport { getCtaStandardTitleTextConfig } from '../../configs/text-configs';\nimport { getGameBounds, makeText } from '../../utils';\nimport { CTAView } from './cta-view';\n\nexport class CTAStandard extends CTAView {\n  constructor() {\n    super();\n    this.build();\n  }\n\n  show() {\n    const { x, y, width, height } = getGameBounds();\n\n    this._title.alpha = 1;\n    this._playButton.alpha = 1;\n\n    this.game.make\n      .tween(this._title)\n      .from({ x: x + width + this._title.width / 2 }, 500, Phaser.Easing.Back.Out, true, 300);\n    this.game.make\n      .tween(this._playButton)\n      .from({ y: y + height + this._playButton.height / 2 }, 300, Phaser.Easing.Back.Out, true, 800);\n  }\n\n  getGridConfig() {\n    return getCTAStandardGridConfig();\n  }\n\n  build() {\n    super.build(this.getGridConfig(), 0.9);\n    this._buildTitle();\n    this._buildPlayButton();\n  }\n\n  _buildPlayButton() {\n    const btn = this.buildPlayButton(getCtaStandardPlayButtonConfig());\n    btn.alpha = 0;\n    this.setChild('btn', (this._playButton = btn));\n  }\n\n  _buildTitle() {\n    const title = makeText(getCtaStandardTitleTextConfig());\n    title.alpha = 0;\n    this.setChild('title', (this._title = title));\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { InputPriority } from '../../constants';\nimport { ViewEvents } from '../../events/view-events';\nimport { makePixel } from '../../utils';\nimport { Button } from '../../utils/button/button';\n\nexport class CTAView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this._blocker = null;\n  }\n\n  show() {\n    //\n  }\n\n  getGridConfig() {\n    return new Error('function getGridConfig() is not implemented');\n  }\n\n  buildPlayButton(config) {\n    return this._buildButton(config, this._onPlayClick);\n  }\n\n  buildRetryButton(config) {\n    return this._buildButton(config, this._onRetryClick);\n  }\n\n  build(config, blockerAlpha = 0.5) {\n    super.build(config);\n    this._buildBlocker(blockerAlpha);\n  }\n\n  _buildBlocker(alpha) {\n    this._blocker = makePixel({ alpha });\n    this._blocker.inputEnabled = true;\n    this._blocker.input.priorityID = InputPriority.Cta;\n    this._blocker.name = this.name;\n    this.setChild('blocker', this._blocker);\n\n    if (CI_API.Globals.PARAMS.cta_scrn_clickable) {\n      this._blocker.events.onInputDown.add(this._onScreenClick, this);\n    }\n  }\n\n  _buildButton(config, callback) {\n    const btn = new Button(config);\n    btn.onClick.add(callback, this);\n    return btn;\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.CtaView.ScreenClick);\n  }\n\n  _onPlayClick() {\n    lego.event.emit(ViewEvents.CtaView.PlayClick);\n  }\n\n  _onRetryClick() {\n    lego.event.emit(ViewEvents.CtaView.RetryClick);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getForegroundGridConfig } from '../../configs/grid-configs';\nimport { AdStatus } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { HintView } from './hint-view';\nimport { LogoView } from './logo-view';\nimport { SoundView } from './sound-view';\nimport { TutorialView } from './tutorial-view';\n\nexport class ForegroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    lego.event\n      .on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this)\n      .on(ModelEvents.SoundModel.IconUpdate, this._onSoundIconUpdate, this)\n      .on(ModelEvents.AdModel.HintUpdate, this._onHintUpdate, this)\n      .on(ModelEvents.AdModel.TutorialUpdate, this._onTutorialUpdate, this);\n  }\n\n  get name() {\n    return 'ForegroundView';\n  }\n\n  getGridConfig() {\n    return getForegroundGridConfig();\n  }\n\n  rebuild(config) {\n    this._tutorialView && this._tutorialView.rebuild();\n    super.rebuild(config);\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Game:\n        this._build();\n        break;\n      case AdStatus.Cta:\n        // this._build();\n        CI_API.Globals.PARAMS.cta_scrn_version === 'standard' && this._moveLogo();\n        break;\n      default:\n    }\n  }\n\n  _onSoundIconUpdate(value) {\n    value && this._buildSoundIcon();\n  }\n\n  _build() {\n    this._buildLogo();\n  }\n\n  _moveLogo() {\n    const { x, y } = this._logoView.position;\n    const { x: scaleX, y: scaleY } = this._logoView.scale;\n\n    this.setChild('logo_cta', this._logoView);\n    this.game.add.tween(this._logoView).from({ x, y }, 300, Phaser.Easing.Cubic.Out, true);\n    this.game.add.tween(this._logoView.scale).from({ x: scaleX, y: scaleY }, 300, Phaser.Easing.Cubic.Out, true);\n  }\n\n  // LOGO\n  _buildLogo() {\n    this.setChild('logo', (this._logoView = new LogoView()));\n  }\n\n  // SOUND\n  _buildSoundIcon() {\n    this.setChild('sound', (this._soundView = new SoundView()));\n  }\n\n  // TUTORIAL\n  _onTutorialUpdate(tutorial) {\n    tutorial ? this._buildTutorial() : this._destroyTutorial();\n  }\n\n  _buildTutorial() {\n    this._tutorialView = new TutorialView();\n    this._tutorialView.onSequenceReady.add(this._onTutorialSequenceReady, this);\n  }\n\n  _onTutorialSequenceReady() {\n    this.setChild('tutorial', this._tutorialView);\n  }\n\n  _destroyTutorial() {\n    this._tutorialView.destroy();\n  }\n\n  // HINT\n  _onHintUpdate(hint) {\n    hint ? this._buildHint() : this._destroyHint();\n  }\n\n  _buildHint() {\n    this.addChild((this._hintView = new HintView()));\n  }\n\n  _destroyHint() {\n    this._hintView.destroy();\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Animations, getHandAnimationConfig } from '../../configs/animation-configs';\nimport { GameState, LevelState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { getGameBounds, makeAnimation } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class HintView extends Container {\n  constructor() {\n    super();\n\n    lego.event.on(ModelEvents.HintModel.VisibleUpdate, this._onHintVisibleUpdate, this);\n\n    this._build();\n\n    this._hide();\n  }\n\n  destroy() {\n    lego.event.off(ModelEvents.HintModel.VisibleUpdate, this._onHintVisibleUpdate, this);\n\n    super.destroy();\n  }\n\n  _build() {\n    const handAnimation = makeAnimation(getHandAnimationConfig(0, 0));\n    this.addChild((this._animation = handAnimation));\n  }\n\n  _onHintVisibleUpdate(visible) {\n    visible ? this._show() : this._hide();\n  }\n\n  _show() {\n    const { width, height } = getGameBounds();\n\n    if (store.game.state === GameState.ShowLoot) {\n      this._startHint(new Phaser.Point(...LP([width * 0.38, height * 0.65], [width * 0.3, height * 0.55])));\n      return;\n    }\n\n    if (!store.game.currentLevel) {\n      lego.event.emit(ViewEvents.HintView.NoHintPlace);\n      return;\n    }\n\n    const { state } = store.game.currentLevel;\n    if (state !== LevelState.Idle) {\n      lego.event.emit(ViewEvents.HintView.NoHintPlace);\n      return;\n    }\n\n    this._startHint(new Phaser.Point(width * 0.1, height * 0.2));\n  }\n\n  _hide() {\n    this.game.tweens.removeFrom(this.scale);\n    this.visible = false;\n  }\n\n  _startHint(pos) {\n    this.position.set(pos.x, pos.y);\n    this._animation.play(Animations.Hand.Click);\n\n    this.game.tweens.removeFrom(this);\n    this.alpha = 1;\n    this.game.add.tween(this).from({ alpha: 0 }, 400, Phaser.Easing.Cubic.InOut, true);\n    this.visible = true;\n  }\n}\n","import { ASSETS } from '../../constants';\n\nexport class LogoView extends Phaser.Sprite {\n  constructor() {\n    super(CI_API.game, 0, 0, ASSETS, 'ui/logo.png');\n\n    this.name = 'LogoView';\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { InputPriority, SoundState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { Container } from '../../utils/container';\n\nexport class SoundView extends Container {\n  constructor() {\n    super();\n\n    this._onBtn = null;\n    this._offBtn = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.SoundModel.StateUpdate, this._onSoundStateUpdate, this);\n  }\n\n  _onSoundStateUpdate(value) {\n    switch (value) {\n      case SoundState.On:\n        this._onBtn.visible = true;\n        this._offBtn.visible = false;\n        this.game.sound.volume = 1;\n        break;\n      case SoundState.Off:\n        this._onBtn.visible = false;\n        this._offBtn.visible = true;\n        this.game.sound.volume = 0;\n        break;\n      default:\n    }\n  }\n\n  _build() {\n    this._onBtn = imageLoader.button(0, 0, 'ui/sound_on.png', this._off, this);\n    this._offBtn = imageLoader.button(0, 0, 'ui/sound_off.png', this._on, this);\n\n    this._onBtn.name = 'mute_button_on';\n    this._offBtn.name = 'mute_button_off';\n\n    this._onBtn.input.priorityID = InputPriority.Foreground;\n    this._offBtn.input.priorityID = InputPriority.Foreground;\n\n    this.addMultiple([this._onBtn, this._offBtn]);\n  }\n\n  _on() {\n    lego.event.emit(ViewEvents.SoundView.Click, 'on');\n  }\n\n  _off() {\n    lego.event.emit(ViewEvents.SoundView.Click, 'off');\n  }\n}\n","import { getTutorialBgImageConfig } from '../../configs/ninepatch-configs';\nimport { getTutorialTextConfig } from '../../configs/text-configs';\nimport { fitText, makeNinePatch, makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class TutorialSequenceView extends Container {\n  constructor(config) {\n    super();\n    this._config = config;\n    this._showTween = null;\n    this._hideTween = null;\n    this.alpha = 0;\n\n    this.rebuild();\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._showTween);\n    this.game.tweens.remove(this._hideTween);\n\n    super.destroy();\n  }\n\n  show() {\n    return (this._showTween = this.game.add.tween(this).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true));\n  }\n\n  hide() {\n    return (this._hideTween = this.game.add.tween(this).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true));\n  }\n\n  _buildBg() {\n    return makeNinePatch(getTutorialBgImageConfig());\n  }\n\n  _buildLabel(text) {\n    const { width, height } = this._bg;\n\n    const label = makeText(getTutorialTextConfig(text));\n    label.anchor.set(0.5);\n    fitText(label, width * 0.9, height * 0.9);\n\n    return label;\n  }\n\n  rebuild() {\n    this._bg && this._bg.destroy();\n    this._label && this._label.destroy();\n    this.addChild((this._bg = this._buildBg()));\n    this.addChild((this._label = this._buildLabel(this._config.text)));\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { Container } from '../../utils/container';\nimport { TutorialSequenceView } from './tutorial-sequence-view';\n\nexport class TutorialView extends Container {\n  constructor() {\n    super();\n\n    this._current = null;\n    this.onSequenceReady = new Phaser.Signal();\n\n    lego.event.on(ModelEvents.TutorialModel.CurrentUpdate, this._onTutorialCurrentUpdate, this);\n    lego.event.on(ModelEvents.TutorialSequenceModel.CompleteUpdate, this._onTutorialCurrentCompleteUpdate, this);\n  }\n\n  rebuild() {\n    this._current && this._current.rebuild();\n  }\n\n  destroy(destroyChildren, soft) {\n    this._switchScreenInput(false);\n\n    super.destroy(destroyChildren, soft);\n  }\n\n  _onTutorialCurrentUpdate(sequence) {\n    if (!sequence) {\n      return;\n    }\n\n    this._buildSequence(sequence);\n    this.onSequenceReady.dispatch();\n  }\n\n  _onTutorialCurrentCompleteUpdate(complete) {\n    if (!complete) {\n      return;\n    }\n\n    this._switchScreenInput(false);\n    this._current.hide().onComplete.addOnce(\n      current => {\n        current.destroy();\n        lego.event.emit(ViewEvents.TutorialView.SequenceHideComplete);\n      },\n      null,\n      1,\n      this._current\n    );\n    this._current = null;\n  }\n\n  _buildSequence(sequence) {\n    const { clickable } = sequence.config;\n    this._current = new TutorialSequenceView(sequence.config);\n    this._current.show().onComplete.addOnce(() => {\n      this._switchScreenInput(clickable);\n    });\n\n    this.addChild(this._current);\n  }\n\n  _switchScreenInput(enable) {\n    this.game.input.onDown.remove(this._onScreenClick, this);\n\n    enable && this.game.input.onDown.addOnce(this._onScreenClick, this);\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.TutorialView.ScreenClick);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getGameGridConfig } from '../../configs/grid-configs';\nimport { GameState, InputPriority, LevelState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { getGameBounds, makePixel } from '../../utils';\nimport { LevelView } from './level/level-view';\nimport MetronomeComponent from './level/metronome-component';\nimport { LootBoxView } from './loot-box-view';\n\nexport class GameView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    this._currentLevelView = null;\n    this._prevLevelView = null;\n\n    lego.event.on(ModelEvents.GameModel.StateUpdate, this._onGameStateUpdate, this);\n    lego.event.on(ModelEvents.LevelModel.StateUpdate, this._onLevelStateUpdate, this);\n    lego.event.on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisibleUpdate, this);\n  }\n\n  get name() {\n    return 'GameView';\n  }\n\n  getGridConfig() {\n    return getGameGridConfig();\n  }\n\n  build(config) {\n    super.build(config);\n    this._buildMetronome();\n    this._buildHitArea();\n  }\n\n  rebuild(config) {\n    this._currentLevelView && this._currentLevelView.rebuild();\n    this._lootBox && this._lootBox.rebuild();\n    this._resizeHitArea();\n    super.rebuild(config);\n  }\n\n  _onGameStateUpdate(state) {\n    switch (state) {\n      case GameState.ShowLoot:\n        this._buildLootBox();\n        break;\n      case GameState.HideLoot:\n        this._lootBox && this._lootBox.hide();\n        break;\n      case GameState.CreateLevel:\n        this._createLevel();\n        break;\n      case GameState.Idle:\n        //\n        break;\n      case GameState.DestroyLevel:\n        this._destroyLevel();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _onLevelStateUpdate(state) {\n    this._removeInputListener();\n\n    switch (state) {\n      case LevelState.Cooldown:\n        this._metronome.show();\n        break;\n      case LevelState.ResultLose:\n      case LevelState.ResultWin:\n      case LevelState.Restart:\n        this._metronome.hide();\n        break;\n      case LevelState.Idle:\n        this._addInputListener();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _onCtaVisibleUpdate(value) {\n    if (value) {\n      this._metronome.hide();\n    }\n  }\n\n  _addInputListener() {\n    this._hitArea.events.onInputDown.add(this._onScreenClick, this);\n  }\n\n  _removeInputListener() {\n    this._hitArea.events.onInputDown.remove(this._onScreenClick, this);\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.GameView.Click);\n  }\n\n  _resizeHitArea() {\n    const { x, y, width, height } = getGameBounds();\n    this._hitArea.position.set(x, y);\n    this._hitArea.width = width;\n    this._hitArea.height = height;\n  }\n\n  _buildHitArea() {\n    const { x, y, width, height } = getGameBounds();\n    this._hitArea = makePixel({ alpha: 0, x, y, width, height });\n    this._hitArea.inputEnabled = true;\n    this._hitArea.input.priorityID = InputPriority.Game;\n    this._hitArea.name = 'screen';\n\n    this.addChild((this._hitArea = this._hitArea));\n  }\n\n  _buildMetronome() {\n    const metronome = new MetronomeComponent();\n    this.setChild('metronome', (this._metronome = metronome));\n  }\n\n  _createLevel() {\n    const { currentLevelId } = store.game;\n    const levelModel = store.game.getLevelById(currentLevelId);\n\n    this._prevLevelView = this._currentLevelView;\n    this._currentLevelView = this._makeLevel(levelModel);\n\n    lego.event.emit(ViewEvents.GameView.LevelCreated, currentLevelId);\n  }\n\n  _destroyLevel() {\n    const { levelId } = this._prevLevelView;\n\n    this._prevLevelView.destroy();\n    this._prevLevelView = null;\n\n    lego.event.emit(ViewEvents.GameView.LevelDestroyed, levelId);\n  }\n\n  _makeLevel(levelModel) {\n    const { uuid, config } = levelModel;\n    const level = new LevelView(uuid, config);\n    this.setChild('level', level);\n\n    return level;\n  }\n\n  _buildLootBox() {\n    this.setChild('loot_box', (this._lootBox = new LootBoxView()));\n    this._lootBox.onDestroyed.addOnce(() => {\n      this._lootBox = null;\n    });\n  }\n}\n","import { getHexagonArrowImageConfig, getInnerHexagonImageConfig } from '../../../configs/image-configs';\nimport { ASSETS } from '../../../constants';\nimport { makeImage } from '../../../utils';\n\nexport class HexagonComponent extends Phaser.Sprite {\n  constructor(arrowConfig) {\n    super(CI_API.game, 0, 0, ASSETS, `game/hexagon.png`);\n    this.anchor.set(0.5);\n\n    this._config = arrowConfig;\n\n    this._build();\n    this._startIdleAnimations();\n  }\n\n  show(force = false) {\n    this.game.tweens.removeFrom(this);\n    if (force) {\n      this.visible = true;\n      this.alpha = 1;\n    } else {\n      this.visible = true;\n      this.game.add.tween(this).to({ alpha: 1 }, 400, Phaser.Easing.Cubic.InOut, true);\n    }\n  }\n\n  hide(force = false) {\n    this.game.tweens.removeFrom(this);\n    if (force) {\n      this.visible = false;\n      this.alpha = 0;\n    } else {\n      this.game.add\n        .tween(this)\n        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.InOut, true)\n        .onComplete.addOnce(() => {\n          this.visible = false;\n        });\n    }\n  }\n\n  _build() {\n    this._buildArrow();\n    this._buildInnerHexagon();\n  }\n\n  _buildArrow() {\n    const { angle } = this._config;\n    const arrow = makeImage(getHexagonArrowImageConfig());\n    arrow.anchor.set(0.5, 1);\n    arrow.y = -35;\n    arrow.angle = angle;\n\n    this.addChild((this._arrow = arrow));\n  }\n\n  _buildInnerHexagon() {\n    const innerHexagon = makeImage(getInnerHexagonImageConfig());\n    this.addChild((this._innerHexagon = innerHexagon));\n  }\n\n  _startIdleAnimations() {\n    this._startArrowPulsation();\n    this._startInnerHexagonPulsation();\n  }\n\n  _startArrowPulsation() {\n    this.game.add\n      .tween(this._arrow)\n      .to({ alpha: 0.6 }, 400, Phaser.Easing.Sinusoidal.InOut, true, 0, -1, true).universal = true;\n  }\n\n  _startInnerHexagonPulsation() {\n    this.game.add\n      .tween(this._innerHexagon)\n      .to({ alpha: 0.3 }, 400, Phaser.Easing.Sinusoidal.InOut, true, 0, -1, true).universal = true;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { LevelState, OrbType } from '../../../constants';\n// import LayoutUtils from '../../../display/lu/layout-utils-general';\nimport { ModelEvents } from '../../../events/model-events';\nimport { ViewEvents } from '../../../events/view-events';\nimport { store } from '../../../models/store';\nimport { getGameBounds, loopRunnable, removeRunnable } from '../../../utils';\nimport { Container } from '../../../utils/container';\nimport { MoveFunctions } from '../../../utils/game/move-functions';\nimport { OrbComponent } from './orb-component';\nimport { TraceView } from './trace-view';\n\nexport class LevelView extends Container {\n  constructor(uuid, config) {\n    super();\n\n    this._uuid = uuid;\n    this._config = config;\n    this._levelId = config.levelId;\n    this._traces = [];\n    this._orbs = [];\n    this._collidedOrbs = [];\n\n    lego.event.on(ModelEvents.LevelModel.StateUpdate, this._onLevelStateUpdate, this);\n    lego.event.on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisible, this);\n\n    this._setLevelAngle();\n\n    this._buildTraces();\n    this._buildOrbs();\n  }\n\n  get name() {\n    return 'LevelView';\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  get levelId() {\n    return this._levelId;\n  }\n\n  rebuild() {\n    this._setLevelAngle();\n  }\n\n  _setLevelAngle() {\n    const { l, p } = this._config.levelAngle;\n    this.angle = LP(l, p);\n  }\n\n  destroy() {\n    this.game.tweens.removeFrom(this);\n    super.destroy();\n  }\n\n  _onLevelStateUpdate(state, prevState, uuid) {\n    if (this._uuid !== uuid) {\n      return;\n    }\n\n    switch (state) {\n      case LevelState.Show:\n        this._show();\n        break;\n      case LevelState.Hide:\n        this._hide().onComplete.add(() => {\n          lego.event.emit(ViewEvents.LevelView.HideComplete, this._levelId);\n        });\n        break;\n      case LevelState.Idle:\n        break;\n      case LevelState.Cooldown:\n        this._startCheckCollision();\n        break;\n      case LevelState.ResultLose:\n        this._dropOrbs();\n        break;\n      case LevelState.ResultWin:\n        this._stopCheckCollision();\n        this._startOrbsHighlight();\n        break;\n      case LevelState.ActivateOrb:\n        this._activateOrb();\n        lego.event.emit(ViewEvents.LevelView.OrbActivated);\n        break;\n      case LevelState.Restart:\n        this._restartView();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _onCtaVisible(value) {\n    if (value && CI_API.Globals.PARAMS.cta_scrn_version === 'embedded') {\n      this._hide().onComplete.add(() => {\n        this.destroy();\n      });\n    }\n  }\n\n  _restartView() {\n    this._collidedOrbs.length = 0;\n\n    this._orbs.forEach((orbView, index) => {\n      const { x, y } = this.toLocal(this._traces[index].getHexagonGlobalPosition(), null);\n\n      orbView.position.set(x, y);\n      orbView.hide(true);\n    });\n\n    lego.event.emit(ViewEvents.LevelView.RestartComplete, this._levelId);\n  }\n\n  _startCheckCollision() {\n    this._collisionRunnable = loopRunnable(26, () => {\n      for (let i = 0; i < this._orbs.length; i++) {\n        for (let j = 0; j < this._orbs.length; j++) {\n          if (this._orbs[i] === this._orbs[j]) {\n            continue;\n          }\n\n          if (this._orbs[i].position.distance(this._orbs[j]) < OrbType[CI_API.Globals.PARAMS.which_orb].radius) {\n            this._collidedOrbs.push(this._orbs[i], this._orbs[j]);\n            this._stopCheckCollision();\n            this._deactivateOrbs();\n            lego.event.emit(ViewEvents.LevelView.OrbsCollisionStart);\n            return;\n          }\n        }\n      }\n    });\n  }\n\n  _stopCheckCollision() {\n    removeRunnable(this._collisionRunnable);\n  }\n\n  _startOrbsHighlight() {\n    this._orbs.forEach(orb => {\n      orb.showWin();\n    });\n  }\n\n  _show() {\n    const { x, width } = getGameBounds();\n\n    this.game.add\n      .tween(this)\n      .from({ x: x + width + this.width / 2 }, 800, Phaser.Easing.Cubic.InOut, true)\n      .onComplete.add(() => {\n        lego.event.emit(ViewEvents.LevelView.ShowComplete, this._levelId);\n      });\n  }\n\n  _hide() {\n    const { x } = getGameBounds();\n\n    return this.game.add.tween(this).to({ x: x - this.width }, 800, Phaser.Easing.Cubic.InOut, true);\n  }\n\n  _activateOrb() {\n    const { activeTraceIndex, orbs } = store.game.currentLevel;\n    const { moveFunction } = orbs[activeTraceIndex].config;\n\n    const orbView = this._orbs[activeTraceIndex];\n    const traceView = this._traces[activeTraceIndex];\n    orbView.show();\n    MoveFunctions[moveFunction](orbView, traceView);\n  }\n\n  _deactivateOrbs() {\n    this._orbs.forEach(orb => {\n      this.game.tweens.removeFrom(orb);\n    });\n  }\n\n  _dropOrbs() {\n    const { height } = getGameBounds();\n\n    const unusedBalls = this._orbs.filter(orb => {\n      for (let i = 0; i < this._collidedOrbs.length; i++) {\n        if (orb === this._collidedOrbs[i]) return false;\n      }\n\n      return true;\n    });\n\n    unusedBalls.forEach(b => {\n      this.game.make.tween(b).to(\n        {\n          y: this.angle === 0 ? height : b.y,\n          x: this.angle === 0 ? b.x : height\n        },\n        1000,\n        null,\n        true\n      );\n    });\n\n    const collidePoints = [\n      new Phaser.Point(\n        this._collidedOrbs[0].x - this._collidedOrbs[1].x,\n        this._collidedOrbs[0].y - this._collidedOrbs[1].y\n      ),\n      new Phaser.Point(\n        this._collidedOrbs[1].x - this._collidedOrbs[0].x,\n        this._collidedOrbs[1].y - this._collidedOrbs[0].y\n      )\n    ];\n\n    let lastDropTween;\n\n    for (let i = 0; i < this._collidedOrbs.length; i++) {\n      const xArray = [\n        this._collidedOrbs[i].x + collidePoints[i].x * 2,\n        this._collidedOrbs[i].x + collidePoints[i].x * 3,\n        this._collidedOrbs[i].x + collidePoints[i].x * 5\n      ];\n      const yArray = [this._collidedOrbs[i].y + collidePoints[i].y * 2];\n\n      yArray.push(height);\n\n      lastDropTween = this.game.make\n        .tween(this._collidedOrbs[i])\n        .to(\n          {\n            x: this.angle === 0 ? xArray : yArray,\n            y: this.angle === 0 ? yArray : xArray\n          },\n          1000,\n          null,\n          true\n        )\n        .interpolation(Phaser.Math.bezierInterpolation);\n    }\n\n    lastDropTween.onComplete.add(() => {\n      lego.event.emit(ViewEvents.LevelView.OrbsDropComplete);\n    });\n  }\n\n  _buildTraces() {\n    const { traces } = store.game.getLevelByUuid(this._uuid);\n\n    traces.forEach(traceModel => {\n      const { uuid, config } = traceModel;\n      const { angle, x, y, hexagon } = config;\n\n      const trace = new TraceView(uuid, hexagon, config);\n      trace.angle = angle;\n      trace.position.set(x, y);\n      trace.deactivate(true);\n      this._traces.push(trace);\n      this.addChild(trace);\n    });\n  }\n\n  _buildOrbs() {\n    const { orbs } = store.game.getLevelByUuid(this._uuid);\n    orbs.forEach((orb, index) => {\n      const { x, y } = this.toLocal(this._traces[index].getHexagonGlobalPosition(), null);\n\n      const orbView = new OrbComponent();\n      orbView.position.set(x, y);\n      orbView.hide(true);\n      this._orbs.push(orbView);\n      this.addChild(orbView);\n    });\n  }\n}\n","import { getMetronomeImageConfig, getMetronomePendulumImageConfig } from '../../../configs/image-configs';\nimport { getMetronomeTextConfig } from '../../../configs/text-configs';\nimport { COOLDOWN_TIME } from '../../../constants';\nimport { loopRunnable, makeImage, makeText, removeRunnable } from '../../../utils';\nimport { Container } from '../../../utils/container';\n\nexport default class MetronomeComponent extends Container {\n  constructor() {\n    super();\n    this._pendulum = null;\n\n    this._build();\n\n    this.hide(true);\n  }\n\n  show() {\n    this._resetView();\n\n    this.game.add.tween(this).to({ alpha: 1 }, 400, Phaser.Easing.Cubic.InOut, true);\n    this._startTickAnimation();\n  }\n\n  hide(force = false) {\n    if (force) {\n      this.alpha = 0;\n      this._resetView();\n    } else {\n      this.game.add\n        .tween(this)\n        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.InOut, true)\n        .onComplete.add(() => {\n          this._resetView();\n        });\n    }\n  }\n\n  _startTickAnimation() {\n    this.game.make.tween(this._pendulum).to({ angle: [-15, 0, 15, 0] }, 1000, null, true, 0, -1).universal = true;\n\n    let time = COOLDOWN_TIME / 1000;\n\n    this._cooldownRunnable = loopRunnable(1000, () => {\n      time = Math.max(time - 1, 0);\n      this._updateText(`${time}`);\n    });\n  }\n\n  _resetView() {\n    this.game.tweens.removeFrom(this._pendulum);\n    this._updateText(`${COOLDOWN_TIME / 1000}`);\n    this._pendulum.angle = 0;\n    removeRunnable(this._cooldownRunnable);\n  }\n\n  _updateText(text) {\n    this._countdownTimeText.setText({\n      text: text,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n  }\n\n  _build() {\n    this._buildTicker();\n    this._buildMetronomePendulum();\n    this._buildLabel();\n  }\n\n  _buildTicker() {\n    const ticker = makeImage(getMetronomeImageConfig());\n    ticker.anchor.set(0.5);\n    this.add(ticker);\n  }\n\n  _buildMetronomePendulum() {\n    const pendulum = makeImage(getMetronomePendulumImageConfig());\n    pendulum.anchor.set(0.5, 1);\n    pendulum.position.set(0, 17);\n    this.add((this._pendulum = pendulum));\n  }\n\n  _buildLabel() {\n    const label = makeText(getMetronomeTextConfig());\n    label.position.set(0, 50);\n    label.anchor.set(0.5);\n    this.add((this._countdownTimeText = label));\n  }\n}\n","import { getOrbImageConfig } from '../../../configs/image-configs';\nimport { getOrbEmitter2Config } from '../../../configs/particles-configs';\nimport { ASSETS, OrbType } from '../../../constants';\nimport { getViewByProperty, makeEmitter, makeImage } from '../../../utils';\nimport { sample } from '../../../utils/array/sample';\nimport { Container } from '../../../utils/container';\nimport { removeEmitter } from '../../../utils/index';\nimport WinStar from './win-star';\n\nconst HighlightColors = ['0xdbcd35'];\n\nclass OrbParticleComponent extends Container {\n  constructor() {\n    super();\n\n    const gameView = getViewByProperty('name', 'GameView');\n\n    this._sparkleEmitter2 = makeEmitter(getOrbEmitter2Config(gameView));\n  }\n\n  update() {\n    this._updatePositionEmitter(this._sparkleEmitter2, getOrbEmitter2Config());\n  }\n\n  _updatePositionEmitter(emitter, config) {\n    const { key = ASSETS, config: emitterConfig } = config;\n    emitter.emit(key, this.worldPosition.x, this.worldPosition.y, emitterConfig);\n  }\n\n  destroy() {\n    removeEmitter(this._sparkleEmitter2);\n    this._sparkleEmitter2 = null;\n    super.destroy();\n  }\n}\n\nexport class OrbComponent extends Phaser.Sprite {\n  constructor() {\n    const { frame, radius } = OrbType[CI_API.Globals.PARAMS.which_orb];\n    super(CI_API.game, 0, 0);\n\n    this._radius = radius;\n\n    this._build(frame);\n  }\n\n  get radius() {\n    return this._radius;\n  }\n\n  update() {\n    super.update();\n    this._particle && this._particle.update();\n  }\n\n  getRotation() {\n    return this._orb.rotation;\n  }\n\n  showWin() {\n    this.game.make\n      .tween(this._winStar)\n      .to({ alpha: 1 }, 800, null, true)\n      .onComplete.addOnce(() => {\n        this.game.make.tween(this._winStar).to({ alpha: [0.7, 0.4, 0.7] }, 500, null, true, 0, -1);\n      });\n\n    this._winStar.play();\n    this.game.make\n      .tween(this._winStar.scale)\n      .to(\n        { x: this.scale.x - 0.3, y: this.scale.y - 0.3 },\n        this.game.rnd.between(800, 1200),\n        Phaser.Easing.Sinusoidal.In,\n        true,\n        0,\n        -1,\n        true\n      );\n  }\n\n  setRotation(rotation) {\n    this._orb.rotation = rotation;\n  }\n\n  show(force = false) {\n    if (force) {\n      this.visible = true;\n      this.alpha = 1;\n    } else {\n      this.visible = true;\n      this.game.add.tween(this).to({ alpha: 1 }, 400, Phaser.Easing.Cubic.InOut, true);\n    }\n    this._addParticle();\n  }\n\n  hide(force = false) {\n    if (force) {\n      this.visible = false;\n      this.alpha = 0;\n    } else {\n      this.game.add\n        .tween(this)\n        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.InOut, true)\n        .onComplete.add(() => {\n          this.visible = false;\n        });\n    }\n    this._particle && (this._particle.destroy(), (this._particle = null));\n  }\n\n  _addParticle() {\n    const particleComponent = new OrbParticleComponent();\n    this.addChild((this._particle = particleComponent));\n  }\n\n  _build(frame) {\n    this._buildOrb(frame);\n    this._buildWinStar();\n  }\n\n  _buildWinStar() {\n    this._winStar = new WinStar(sample(HighlightColors));\n    this.addChild(this._winStar);\n  }\n\n  _buildOrb(frame) {\n    const img = makeImage(getOrbImageConfig(frame));\n    img.anchor.set(0.5);\n    this.addChild((this._orb = img));\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getTraceImageConfig } from '../../../configs/image-configs';\nimport { TraceState } from '../../../constants';\nimport { ModelEvents } from '../../../events/model-events';\nimport { makeImage } from '../../../utils';\nimport { Container } from '../../../utils/container';\nimport { HexagonComponent } from './hexagon-component';\n\nexport class TraceView extends Container {\n  constructor(uuid, hexagonConfig, config) {\n    super();\n\n    this._uuid = uuid;\n    this._config = config;\n    const { framePassive, frameActive } = this.config;\n\n    lego.event.on(ModelEvents.TraceModel.StateUpdate, this._onStateUpdate, this);\n\n    this._build(framePassive, frameActive, hexagonConfig);\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  getHexagonGlobalPosition() {\n    return this.toGlobal(this._hexagon.position);\n  }\n\n  activate() {\n    this.alpha = 1;\n    this._passive.visible = false;\n    this._active.visible = true;\n    this._hexagon.show();\n  }\n\n  deactivate(force = false) {\n    this.alpha = 0.5;\n    this._passive.visible = true;\n    this._active.visible = false;\n    this._hexagon.hide(force);\n  }\n\n  idle() {\n    this.alpha = 1;\n    this._passive.visible = false;\n    this._active.visible = true;\n  }\n\n  _onStateUpdate(state, oldState, uuid) {\n    if (uuid !== this._uuid) {\n      return;\n    }\n\n    switch (state) {\n      case TraceState.Active:\n        this.activate();\n        break;\n      case TraceState.Passive:\n        this.deactivate();\n        break;\n      case TraceState.Idle:\n        this.idle();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _build(framePassive, frameActive, hexagonConfig) {\n    this._buildPassiveFrame(framePassive);\n    this._buildActiveFrame(frameActive);\n    this._buildHexagon(hexagonConfig);\n  }\n\n  _buildPassiveFrame(frame) {\n    const img = makeImage(getTraceImageConfig(frame));\n    this.addChild((this._passive = img));\n  }\n\n  _buildActiveFrame(frame) {\n    const img = makeImage(getTraceImageConfig(frame));\n    this.addChild((this._active = img));\n  }\n\n  _buildHexagon(config) {\n    const { x, y, angle, arrow } = config;\n\n    const hexagon = new HexagonComponent(arrow);\n    hexagon.position.set(x, y);\n    hexagon.angle = angle;\n    this.addChild((this._hexagon = hexagon));\n  }\n}\n","import { Animations, getHighlightAnimationConfig } from '../../../configs/animation-configs';\nimport { makeAnimation } from '../../../utils';\n\nexport default class WinStar extends Phaser.Group {\n  constructor(color) {\n    super(CI_API.game);\n\n    this._color = color;\n    this._createView();\n    this.alpha = 0;\n  }\n\n  _createView() {\n    for (let i = 0; i < 4; i++) {\n      const starRay = makeAnimation(getHighlightAnimationConfig(0, 0));\n      starRay.anchor.set(0.5, 1);\n      starRay.angle = 90 * i;\n      starRay.tint = this._color;\n      this.add(starRay);\n    }\n  }\n\n  play() {\n    this.children.forEach(child => {\n      child.animations.play(Animations.Highlight.Idle);\n    });\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getLootBoxPopupBgPatchConfig } from '../../configs/ninepatch-configs';\nimport { getIntroLootBoxSpineConfig, Spines } from '../../configs/spine-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { getGameBounds, makeNinePatch, makeSpine, postRunnable } from '../../utils';\nimport { Container } from '../../utils/container';\n\nconst getBoxScale = () => {\n  return LP(0.65, 1);\n};\n\nconst getBoxYRatio = () => {\n  return 0.26;\n};\n\nexport class LootBoxView extends Container {\n  constructor(uuid, config) {\n    super();\n    this._uuid = uuid;\n\n    lego.event.on(ModelEvents.CtaModel.PreVisibleUpdate, this._onCtaPreVisibleUpdate, this);\n    lego.event.once(ViewEvents.Game.UserInteraction, this._onUserInteraction, this);\n    this.onDestroyed = new Phaser.Signal();\n\n    this._build();\n  }\n\n  get name() {\n    return 'LootBoxView';\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  destroy() {\n    this.game.tweens.removeFrom(this);\n    super.destroy();\n  }\n\n  rebuild() {\n    const { width, height } = getLootBoxPopupBgPatchConfig();\n    this._bg.resize(width, height);\n    this._box.visible = false;\n    postRunnable(() => {\n      this._box.visible = true;\n      this._updateBoxTransform();\n    });\n  }\n\n  _onCtaPreVisibleUpdate(value) {\n    if (value) {\n      this.hide();\n    }\n  }\n\n  _onUserInteraction() {\n    lego.event.emit(ViewEvents.LootBoxView.Click);\n  }\n\n  hide() {\n    if (this._hideTween) {\n      return;\n    }\n\n    const { x } = getGameBounds();\n    this.onDestroyed.dispatch();\n    this._hideTween = this.game.add\n      .tween(this)\n      .to({ x: x - this.width / 2 }, 800, Phaser.Easing.Cubic.InOut, true)\n      .onComplete.add(() => {\n        this.destroy();\n      });\n  }\n\n  _build() {\n    this.add((this._bg = this._buildBg()));\n    this.add((this._box = this._buildBox()));\n    this._box.setToSetupPose();\n    this._box.setSkinByName(Spines.IntroLootBox.Skins[CI_API.Globals.PARAMS.which_orb]);\n    this._updateBoxTransform();\n    const intro = this._box.setAnimationByName(0, Spines.IntroLootBox.Animations.Intro, false);\n    intro.onComplete = () => {\n      this._box.setAnimationByName(0, Spines.IntroLootBox.Animations.IntroIdle, true);\n    };\n  }\n\n  _buildBg() {\n    return makeNinePatch(getLootBoxPopupBgPatchConfig());\n  }\n\n  _buildBox() {\n    const spine = makeSpine(getIntroLootBoxSpineConfig());\n    return spine;\n  }\n\n  _updateBoxTransform() {\n    this._box.y = this._bg.height * getBoxYRatio();\n    this._box.scale.set(getBoxScale());\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getMainGridConfig } from '../configs/grid-configs';\nimport { AdStatus } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ResizablePhaser2Grid } from '../utils/resizable-phaser2-grid';\nimport { BackgroundView } from './background/background-view';\nimport { CtaModule } from './cta/cta-module';\nimport { ForegroundView } from './foreground/foreground-view';\nimport { GameView } from './game/game-view';\nimport { UIView } from './ui/ui-view';\n\nexport class MainView extends ResizablePhaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    this.build();\n\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  get name() {\n    return 'MainView';\n  }\n\n  getGridConfig() {\n    return getMainGridConfig();\n  }\n\n  build() {\n    super.build(this.getGridConfig());\n\n    this.setChild('main', new BackgroundView());\n    this.setChild('main', new GameView());\n    this.setChild('main', new UIView());\n    // console.warn((this._ctaView = CI_API.CTA.Instantiate(Phaser2Grid, moduleBindings)));\n    this.setChild('main', (this._ctaView = CI_API.CTA.Instantiate(CtaModule)));\n    this.setChild('main', new ForegroundView());\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        // this.rebuildChild(this._ctaView);\n        break;\n      default:\n    }\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getPersistentCtaButtonConfig } from '../../configs/button-configs';\nimport { ViewEvents } from '../../events/view-events';\nimport { Button } from '../../utils/button/button';\n\nexport class PersistentCTAView extends Button {\n  constructor() {\n    super(getPersistentCtaButtonConfig());\n    this.onClick.add(this._onClick, this);\n  }\n\n  _onClick() {\n    lego.event.emit(ViewEvents.PersistentCtaView.Click);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getUIGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { PersistentCTAView } from './persistent-cta-view';\n\nexport class UIView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    lego.event.on(ModelEvents.AdModel.PersistentCtaUpdate, this._onPersistentCtaUpdate, this);\n  }\n\n  get name() {\n    return 'UIView';\n  }\n\n  getGridConfig() {\n    return getUIGridConfig();\n  }\n\n  // PERSISTENT\n  _onPersistentCtaUpdate(persistentCta) {\n    persistentCta ? this._buildPersistentCta() : this._destroyPersistentCta();\n  }\n\n  _buildPersistentCta() {\n    this.setChild('p_cta', (this._persistentCtaView = new PersistentCTAView()));\n  }\n\n  _destroyPersistentCta() {\n    this._persistentCtaView.destroy();\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nconst toSnakeCase = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('_');\n\nexport class AnalyticsObservant {\n  constructor() {\n    lego.event\n      .on(ViewEvents.CtaView.ScreenClick, this._onCtaScreenClick, this)\n      .on(ViewEvents.CtaView.PlayClick, this._onCtaPlayClick, this)\n      .on(ViewEvents.PersistentCtaView.Click, this._onPersistentCtaClick, this)\n      .on(ModelEvents.TutorialModel.CompleteUpdate, this._onTutorialCompleteUpdate, this)\n      .on(ModelEvents.AdModel.ViewStateUpdate, this._onViewStateUpdate, this)\n      .on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this)\n      .on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisibleUpdate, this);\n  }\n\n  _onCtaScreenClick() {\n    analytics.logClick('cta_click', 'cta_overlay');\n  }\n\n  _onCtaPlayClick() {\n    analytics.logClick('cta_click', 'cta_button');\n  }\n\n  _onPersistentCtaClick() {\n    analytics.logClick('cta_click', 'persistent_cta_button');\n  }\n\n  _onTutorialCompleteUpdate(complete) {\n    if (complete) {\n      analytics.logProgress('tutorial', 'complete');\n    }\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Restart:\n        this._logCtaOverride();\n        break;\n      default:\n    }\n  }\n  _onCtaVisibleUpdate(visible) {\n    if (!visible) {\n      return;\n    }\n\n    this._logCta();\n  }\n\n  _logCtaOverride() {\n    analytics.logProgress('cta_override', 'restart');\n  }\n\n  _logCta() {\n    switch (store.ad.cta.reason) {\n      case GameOverReasons.Idled:\n        this._logIdledCta();\n        break;\n      case GameOverReasons.ItemsToCtaReached:\n        this._logItemsToCtaReached();\n        break;\n      case GameOverReasons.DeathsToCtaReached:\n        this._logDeathsToCtaReached();\n        break;\n      default:\n        throw new Error(`Unknown CTA reason`);\n    }\n  }\n\n  _logIdledCta() {\n    const { currentLevelId, levels } = store.game;\n    analytics.logProgress('items_left', `${levels.length - (currentLevelId - 1)}`);\n  }\n\n  _logItemsToCtaReached() {\n    analytics.logProgress('items_to_cta', '');\n  }\n\n  _logDeathsToCtaReached() {\n    const { currentLevelId, levels } = store.game;\n    analytics.logProgress('items_left', `${levels.length - (currentLevelId - 1)}`);\n  }\n\n  _onViewStateUpdate(state) {\n    switch (state) {\n      case AdViewState.Create:\n        CI_API.game.input.onDown.addOnce(this._onGameDown, this);\n        lego.event.off(ModelEvents.AdModel.ViewStateUpdate, this._onViewStateUpdate, this);\n        break;\n      default:\n    }\n  }\n\n  _onGameDown(pointer) {\n    if (!pointer.targetObject || !pointer.targetObject.sprite) {\n      analytics.logClick('first_interaction_click', 'unknown');\n      return;\n    }\n    analytics.logClick('first_interaction_click', toSnakeCase(pointer.targetObject.sprite.name));\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\n\nexport class SoundObservant {\n  constructor() {\n    lego.event.on(ModelEvents.LoadModel.CompleteUpdate, this._onLoadCompleteUpdate, this);\n    lego.event.once(ViewEvents.Game.UserInteraction, this._playGameTheme, this);\n  }\n\n  _onLoadCompleteUpdate(complete) {\n    if (!complete) {\n      return;\n    }\n\n    this._sound = soundLoader.addAudioSprite('audio');\n  }\n\n  _playGameTheme() {\n    this._play('game-theme', 1);\n  }\n\n  _play(id, volume) {\n    this._sound.play(id, volume);\n  }\n\n  _stop(id) {\n    this._sound.stop(id);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nexport class WrapperObservant {\n  constructor() {\n    lego.event\n      .on(ModelEvents.LoadModel.ProgressUpdate, this._onLoadProgress, this)\n      .on(ModelEvents.LoadModel.CompleteUpdate, this._onLoadComplete, this)\n      .on(ModelEvents.AdModel.ViewStateUpdate, this._onViewStateUpdate, this)\n      .on(ViewEvents.PersistentCtaView.Click, this._clickGo, this)\n      .on(ViewEvents.CtaView.ScreenClick, this._clickGo, this)\n      .on(ViewEvents.CtaView.PlayClick, this._clickGo, this)\n      .on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisibleUpdate, this)\n      .on(ViewEvents.Game.UserInteraction, this._markInteraction, this);\n  }\n\n  _onLoadProgress(progress) {\n    wrapper_load_progress(progress);\n  }\n\n  _onLoadComplete() {\n    wrapper_preload_complete();\n  }\n\n  _onViewStateUpdate(state) {\n    state === AdViewState.Create && this._hideSplash();\n  }\n\n  _hideSplash() {\n    wrapper_hide_splash();\n  }\n\n  _clickGo() {\n    wrapper_click_go();\n  }\n\n  _markInteraction() {\n    wrapper_mark_interaction();\n  }\n\n  _onCtaVisibleUpdate(visible) {\n    if (!visible) {\n      return;\n    }\n\n    if (store.ad.cta.reason === GameOverReasons.Unknown) {\n      console.error('Please provide game over reason');\n    }\n\n    wrapper_mark_cta(store.ad.cta.reason);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState } from '../constants';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\nimport { MainView } from '../objects/main-view';\nimport { manageOrientedTweens } from '../utils';\n\nexport class GameState extends Phaser.State {\n  constructor() {\n    super();\n\n    this._adModel = store.ad;\n    this._mainView = null;\n  }\n\n  init() {\n    super.init();\n\n    store.ad.viewState = AdViewState.Init;\n  }\n\n  preload(game) {\n    super.preload(game);\n\n    store.ad.viewState = AdViewState.Preload;\n  }\n\n  create(game) {\n    super.create(game);\n\n    this._mainView = new MainView();\n\n    this.input.onDown.add(() => {\n      lego.event.emit(ViewEvents.Game.UserInteraction);\n    });\n\n    // @ts-ignore\n    this.game.world.handleResize = orientation => {\n      manageOrientedTweens();\n      lego.event.emit(ViewEvents.Game.Resize, orientation);\n    };\n\n    store.ad.viewState = AdViewState.Create;\n  }\n\n  shutdown(game) {\n    store.ad.viewState = AdViewState.ShutDown;\n\n    super.shutdown(game);\n  }\n\n  update() {\n    const { Globals, game } = CI_API;\n\n    super.update(game);\n\n    if (ad_state === 'live' && this._adModel.status !== AdStatus.Cta) {\n      if (game.time.totalElapsedSeconds() - Globals.LAST_INTERACTION_TIME > Globals.PARAMS.cta_on_idle_time * 0.001) {\n        lego.event.emit(ViewEvents.GameState.CtaIdleTime);\n      }\n    }\n  }\n\n  victory(reason) {\n    //\n  }\n\n  defeat(reason) {\n    //\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Spines } from '../configs/spine-configs';\nimport LU from '../display/layout-utils';\nimport { ViewEvents } from '../events/view-events';\nimport '../kernel/atlas-rescale';\nimport '../kernel/multiple-atlas';\nimport { store } from '../models/store';\n\nexport class PreloaderState extends Phaser.State {\n  init() {\n    if (this.game && this.game.device && this.game.device.touch) {\n      this.game.input.mouse.stop();\n    }\n    // this.stage.backgroundColor = '#010101';\n    this.stage.disableVisibilityChange = true;\n\n    const parentDiv = document.getElementById(LU.CONTAINER_NAME);\n    parentDiv.style.backgroundImage = 'radial-gradient(#3d0269, #1e0a3b)';\n\n    LU.init(this.game, true);\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * Enable handlers and use imageLoader to preload assets\n   *\n   * @name preload\n   * @function\n   * @returns {void}\n   */\n  preload() {\n    utils.enableHandlers(this.game);\n\n    imageLoader.registerGame(this.game);\n    /**\n     * Loading assets and modules due to xp-assets.json file params\n     */\n    xp.loadAssets({\n      spine: [Spines.IntroLootBox.Key, Spines.CTALootBox.Key]\n    });\n    if (CI_API.Globals.PARAMS.sound) {\n      this.preloadAudio();\n    }\n  }\n\n  preloadAudio() {\n    soundLoader.registerGame(this.game);\n    soundLoader.loadAudioSprite(\n      'audio',\n      `${CI_API.Globals.WEB_ROOT}/audio/audio.mp3`,\n      `${CI_API.Globals.WEB_ROOT}/embed/audio.json`\n    );\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   *\n   * @name create\n   * @function\n   * @returns {void}\n   */\n  create() {\n    store.ad.load.complete = true;\n  }\n\n  /**\n   * @name loadUpdate\n   * @function\n   * @returns {void}\n   */\n  loadUpdate() {\n    store.ad.load.progress = this.game.load.progress;\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * ad_state being set to live is important for partnerships\n   *\n   * @name update\n   * @function\n   * @returns {void}\n   */\n  update() {\n    if (ad_state === 'ready') {\n      ad_state = 'live';\n\n      lego.event.emit(ViewEvents.Ad.Live);\n    }\n  }\n}\n","localization.registerStrings({\n  \"DON'T LET THE ORBS TOUCH!\": {\n    en: \"DON'T LET THE ORBS TOUCH!\"\n  },\n  'YOU GOT A NEW ORB! TRY IT OUT!': {\n    en: 'YOU GOT A NEW ORB! TRY IT OUT!'\n  },\n  'GREAT JOB!': {\n    en: 'GREAT JOB!'\n  },\n  'PICK YOUR NEW ORB!': {\n    en: 'PICK YOUR NEW ORB!'\n  },\n  cta_btn_persistent_text: {\n    en: 'DOWNLOAD NOW'\n  },\n  cta_btn_embedded_text: {\n    en: 'NEXT LEVEL'\n  },\n  'Play Now': {\n    en: 'Play Now'\n  },\n  Play: {\n    en: 'Play'\n  },\n  'Download Now': {\n    en: 'Download Now'\n  },\n  Download: {\n    en: 'Download'\n  },\n  Continue: {\n    en: 'Continue'\n  },\n  'KEEP PLAYING! TRY MORE FUN LEVELS!': {\n    en: 'KEEP PLAYING!\\nTRY MORE FUN LEVELS!'\n  }\n});\n","export const sample = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n","import { fitText, makeImage, makeNinePatch, makeText } from '..';\nimport { InputHandler } from './input-handler';\n\nclass AbstractButton extends InputHandler {\n  constructor({ states, input }) {\n    super();\n\n    this.onClick = new Phaser.Signal();\n    this.states = this.createStates(states);\n    this.inputArea = this.createHitArea(input);\n\n    this.switchEnable(true);\n  }\n\n  switchEnable(value) {\n    super.switchInput(value);\n\n    this.setState('up');\n\n    if (value === false) {\n      this.setState('disable');\n    }\n  }\n\n  // override\n  onDown(target, pointer) {\n    this.setState('down');\n  }\n\n  // override\n  onUp(target, pointer, isOver) {\n    this.setState('up');\n\n    if (isOver) {\n      this.onClick.dispatch(this);\n    }\n  }\n\n  createStates({ up, down, disable } = {}) {\n    return {\n      up: up && this.createState(up),\n      down: down && this.createState(down),\n      disable: disable && this.createState(disable)\n    };\n  }\n\n  // abstract\n  createState(config) {\n    throw new Error('createState abstract function is not implemented');\n  }\n\n  setState(key) {\n    if (!this.states[key]) {\n      return;\n    }\n\n    for (let prop in this.states) {\n      if (this.states.hasOwnProperty(prop) && this.states[prop]) {\n        this.states[prop].visible = false;\n      }\n    }\n\n    this.states[key].visible = true;\n  }\n}\n\nexport class Button extends AbstractButton {\n  createState(config) {\n    const state = new Phaser.Group(this.game);\n\n    const { bg, label } = config;\n\n    // FRAME\n    const bgObj = bg.width && bg.height ? makeNinePatch(bg) : makeImage(bg);\n    state.add(bgObj);\n\n    // LABEL\n    if (label) {\n      const labelObj = makeText(label);\n      labelObj.anchor.set(0.5);\n      state.add(labelObj);\n\n      fitText(labelObj, bgObj.width * 0.9, bgObj.height * 0.9);\n    }\n\n    return this.add(state);\n  }\n}\n","export class InputHandler extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n\n    this.inputArea = null;\n  }\n\n  get enabled() {\n    return this.inputArea.input.enabled;\n  }\n\n  switchInput(value) {\n    this.inputArea.input.reset();\n    this.inputArea.input.enabled = value;\n  }\n\n  onDown(target, pointer) {}\n\n  onUp(target, pointer, isOver) {}\n\n  onOver(target, pointer) {}\n\n  createHitArea({ name, shape, priority } = {}) {\n    const gr = this.game.make.graphics();\n    gr.beginFill(0xffffff, 0);\n    gr.drawShape(shape || new Phaser.Rectangle(0, 0, this.width, this.height));\n    gr.endFill();\n\n    gr.inputEnabled = true;\n    gr.input['name'] = name;\n    gr.name = name;\n    gr.input.priorityID = priority || 0;\n    gr.events.onInputDown.add(this.onDown, this);\n    gr.events.onInputUp.add(this.onUp, this);\n    gr.events.onInputOver.add(this.onOver, this);\n    gr.centerX = this.centerX;\n    gr.centerY = this.centerY;\n\n    this.add(gr);\n\n    return gr;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\n\nexport class Container extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n  }\n\n  destroy(destroyChildren = true, soft = false) {\n    lego.event.removeListenersOf(this);\n\n    super.destroy(destroyChildren, soft);\n  }\n}\n\nPhaser2Grid.prototype.destroy = Container.prototype.destroy;\n","export const MoveFunctions = {\n  _makeSinTween: function(target, xs, ys) {\n    const twn = CI_API.game.make.tween(target).to({ x: xs, y: ys }, 1500, null, true);\n    twn.universal = true;\n    twn.onComplete.addOnce(() => {\n      xs.reverse();\n      ys.reverse();\n      this._makeSinTween(target, xs, ys);\n    });\n    twn.onUpdateCallback(tw => {\n      this._updateTargetAngle(target, tw);\n    });\n  },\n\n  _updateTargetAngle: function(target, tween) {\n    const {\n      previousPosition: { x: px, y: py },\n      position\n    } = tween.target;\n    const localPos = target.parent.toLocal({ x: px, y: py }, null);\n    const angle = Phaser.Math.angleBetweenPoints(position, localPos);\n\n    target.setRotation(angle - Math.PI / 2);\n  },\n\n  leftSinusoidalMove: function(target) {\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0, l = 50; i <= l; i++) {\n      const r = ((Math.PI * 2) / l) * i;\n      xs.push(Math.cos(r) * -110);\n      ys.push((-684 / l) * i + 684 / 2);\n    }\n\n    this._makeSinTween(target, xs, ys);\n  },\n\n  rightSinusoidalMove: function(target) {\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0, l = 50; i <= l; i++) {\n      const r = ((Math.PI * 2) / l) * i;\n      xs.push(Math.cos(r) * 110);\n      ys.push((684 / l) * i - 684 / 2);\n    }\n\n    this._makeSinTween(target, xs, ys);\n  },\n\n  leftCircleMove: function(target, shape) {\n    target._angle = 0;\n\n    const twn = CI_API.game.make.tween(target).to({ _angle: Math.PI * 2 }, 1500, null, true, 0, -1);\n\n    twn.universal = true;\n\n    twn.onUpdateCallback(() => {\n      target.setRotation(target._angle);\n      target.x = shape.x - Math.cos(target._angle) * shape.config.radius;\n      target.y = shape.y - Math.sin(target._angle) * shape.config.radius;\n    });\n  },\n\n  rightCircleMove: function(target, shape) {\n    target._angle = 0;\n\n    const twn = CI_API.game.make.tween(target).to({ _angle: Math.PI * 2 }, 1500, null, true, 0, -1);\n\n    twn.universal = true;\n\n    twn.onUpdateCallback(() => {\n      target.setRotation(target._angle - Math.PI);\n      target.x = shape.x + Math.cos(target._angle) * shape.config.radius;\n      target.y = shape.y + Math.sin(target._angle) * shape.config.radius;\n    });\n  },\n\n  rightLineMove: function(target) {\n    target.setRotation(Math.PI / 2);\n\n    const twn = CI_API.game.make.tween(target).to({ x: 430 }, 1500, null, true, 0, -1, true);\n\n    twn.universal = true;\n\n    twn.onLoop.add(() => {\n      target.setRotation(target.getRotation() + Math.PI);\n    });\n  },\n\n  downLineMove: function(target) {\n    target.setRotation(Math.PI);\n\n    const twn = CI_API.game.make.tween(target).to({ y: 285 }, 1500, null, true, 0, -1, true);\n\n    twn.universal = true;\n\n    twn.onLoop.add(() => {\n      target.setRotation(target.getRotation() + Math.PI);\n    });\n  }\n};\n","import { ASSETS } from '../constants';\nimport { objectKeys } from './object/object-keys';\nimport { UniversalTween } from './tween/universal-tween';\n\nfunction updateTextSize(textGameObject, fontSize) {\n  const styleRef = textGameObject.style;\n  styleRef.fontSize = fontSize;\n  textGameObject.setStyle(styleRef);\n}\n\nexport const delayRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.add(delay, runnable, context, ...args);\n};\n\nexport const removeRunnable = runnable => {\n  return CI_API.game.time.events.remove(runnable);\n};\n\nexport const loopRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.loop(delay, runnable, context, ...args);\n};\n\nexport const postRunnable = (runnable, context, ...args) => {\n  delayRunnable(CI_API.game.time.physicsElapsedMS, runnable, context, ...args);\n};\n\nexport function fitText(textGameObject, width, height) {\n  if (textGameObject.__defaultFontSize__) {\n    updateTextSize(textGameObject, textGameObject.__defaultFontSize__);\n  }\n\n  const { fontSize, width: textWidth, height: textHeight } = textGameObject;\n  const ratioW = width ? width / textWidth : 1;\n  const ratioH = height ? height / textHeight : 1;\n  const ratio = Math.min(Math.min(ratioW, ratioH), 1);\n\n  if (typeof fontSize === 'number') {\n    const newFontSize = fontSize * ratio;\n    updateTextSize(textGameObject, newFontSize);\n  }\n}\n\nexport const getGameBounds = () => {\n  const { width, height } = CI_API.game;\n\n  return new Phaser.Rectangle(0, 0, width, height);\n};\n\nexport function tweenNumber(config) {\n  const {\n    from,\n    to,\n    duration,\n    onUpdate = () => {},\n    onComplete = () => {},\n    onStart = () => {},\n    context,\n    step = 1\n  } = config;\n  let localStep = 0;\n  const tweenObj = { from, to };\n  const t = CI_API.game.add.tween(tweenObj).to({ from: to }, duration, Phaser.Easing.Sinusoidal.Out, true);\n  t.onStart.addOnce(() => {\n    onStart.call(context);\n  });\n  t.onUpdateCallback(tween => {\n    localStep += 1;\n    if (localStep === step) {\n      onUpdate.call(context, tween.target.from);\n      localStep = 0;\n    }\n  });\n  t.onComplete.addOnce(() => {\n    tweenObj.from = to;\n    onUpdate.call(context, tweenObj.from);\n    onComplete.call(context);\n  });\n  return t;\n}\n\nexport function getViewByProperty(prop, value, parent) {\n  const { children } = parent || CI_API.game.world;\n\n  if (!children || children.length === 0) {\n    return null;\n  }\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    if (child[prop] === value) {\n      return child;\n    }\n\n    const view = getViewByProperty(prop, value, child);\n    if (view) {\n      return view;\n    }\n  }\n\n  return null;\n}\n\nexport function makeText(config) {\n  const { text, style = {}, x = 0, y = 0 } = config;\n  const { shadow, gradient, lineSpacing = 0, fontSize } = style;\n\n  const label = CI_API.game.add.text(x, y, text, style);\n  label.lineSpacing = lineSpacing;\n\n  if (fontSize) {\n    label.__defaultFontSize__ = fontSize;\n  }\n\n  if (shadow) {\n    const { x: shadowX, y: shadowY, color, blur, shadowStroke, shadowFill } = shadow;\n    label.setShadow(shadowX, shadowY, color, blur, shadowStroke, shadowFill);\n  }\n\n  if (gradient) {\n    //  Here we create a linear gradient on the Text context.\n    //  This uses the exact same method of creating a gradient as you do on a normal Canvas context.\n    const grd = label.context.createLinearGradient(0, 0, 0, label.height);\n    gradient.forEach((g, index) => {\n      grd.addColorStop(index, g);\n    });\n    label.fill = grd;\n  }\n\n  return label;\n}\n\nexport function makeSpine(config) {\n  const { key, x = 0, y = 0, scalingVariant } = config;\n  return CI_API.game.add.spine(x, y, key, scalingVariant);\n}\n\nexport function makeAnimation(config) {\n  const { key = ASSETS, x = 0, y = 0, data } = config;\n  const animation = CI_API.game.add.sprite(x, y, key);\n  data.forEach(d => {\n    const { name, prefix, start, stop, suffix, zeroPad, frameRate, loop } = d;\n    animation.animations.add(\n      name,\n      Phaser.Animation.generateFrameNames(prefix, start, stop, suffix, zeroPad),\n      frameRate,\n      loop\n    );\n  });\n  return animation;\n}\n\nexport function makeImage(config) {\n  const {\n    frame,\n    key = ASSETS,\n    x = 0,\n    y = 0,\n    tint,\n    scale = { x: 1, y: 1 },\n    anchor = { x: 0.5, y: 0.5 },\n    rotation = 0\n  } = config;\n  const { x: sx, y: sy } = scale;\n  const { x: ax, y: ay } = anchor;\n\n  const img = CI_API.game.make.sprite(x, y, key, frame);\n\n  if (tint) img.tint = tint;\n  img.scale.set(sx, sy);\n  img.anchor.set(ax, ay);\n  img.rotation = rotation;\n\n  return img;\n}\n\nexport function makeNinePatch(config) {\n  const { frame, key = ASSETS, x = 0, y = 0, width, height, tint, anchor = { x: 0.5, y: 0.5 } } = config;\n  const { x: ax, y: ay } = anchor;\n  const ninePatch = CI_API.game.add.ninePatch(x, y, key, frame, width, height);\n  if (tint) ninePatch.tint = tint;\n  ninePatch.anchor.set(ax, ay);\n\n  return ninePatch;\n}\n\nexport function makeEmitter(config) {\n  const { key = ASSETS, parent, x = 0, y = 0, config: emitterConfig, force = { x: 0, y: 0 } } = config;\n  const emitter = CI_API.game.particleStorm.createEmitter();\n  emitter.addToWorld(parent);\n  emitter.force.set(force.x, force.y);\n  emitter.emit(key, x, y, emitterConfig);\n\n  return emitter;\n}\n\nexport function removeEmitter(emitter) {\n  emitter.enabled = false;\n  CI_API.game.particleStorm.removeEmitter(emitter);\n  emitter.destroy();\n}\n\nexport const makePixel = (() => {\n  let texture = null;\n\n  return config => {\n    if (!texture) {\n      texture = CI_API.game.make\n        .graphics(0, 0)\n        .beginFill(0xffffff)\n        .drawRect(0, 0, 4, 4)\n        .endFill()\n        .generateTexture();\n    }\n    const { x = 0, y = 0, width, height, alpha = 1, tint = 0x0 } = config;\n    const pixel = CI_API.game.make.sprite(x, y, texture);\n    pixel.width = width;\n    pixel.height = height;\n    pixel.tint = tint;\n    pixel.alpha = alpha;\n\n    return pixel;\n  };\n})();\n\nexport function updateUniversalTweenData(tw) {\n  const { timeline } = tw;\n  const vEnd = tw.getPropertiesEndValue();\n  const vStart = tw.getPropertiesStartValue();\n\n  timeline.forEach((tl, index) => {\n    tw.updateTweenData('vEnd', vEnd, index);\n    tw.updateTweenData('vStart', vStart, index);\n  });\n\n  tw.resume();\n}\n\nexport function completeTween(tw) {\n  const { timeline, target } = tw;\n  tw.stop();\n  CI_API.game.tweens.removeFrom(target);\n\n  timeline.forEach(tl => {\n    // @ts-ignore\n    const { vEnd, vStart, yoyo } = tl;\n    const keys = objectKeys(vEnd);\n\n    keys.forEach(k => {\n      target[k] = yoyo ? vStart[k] : vEnd[k];\n    });\n  });\n\n  tw.onComplete.dispatch();\n}\n\nexport function manageOrientedTweens() {\n  const tweens = CI_API.game.tweens.getAll();\n  tweens.forEach(tw => {\n    if (tw instanceof UniversalTween) {\n      updateUniversalTweenData(tw);\n\n      return;\n    }\n\n    // @ts-ignore\n    if (tw.universal === true) {\n      tw.resume();\n\n      return;\n    }\n\n    completeTween(tw);\n  });\n}\n\nexport function makeUniversalTween(config) {\n  const {\n    target,\n    startValues,\n    endValues,\n    context,\n    duration: duration = 1000,\n    easing: easing = null,\n    autoStart: autoStart = false,\n    delay: delay = 0,\n    repeat: repeat = 0,\n    yoyo: yoyo = false,\n    from: from = false\n  } = config;\n\n  const sValues = from ? endValues : startValues;\n  const eValues = from ? startValues : endValues;\n\n  const tw = new UniversalTween(target, sValues, eValues, context);\n  tw.to(eValues.call(context), duration, easing, autoStart, delay, repeat, yoyo);\n\n  return tw;\n}\n\nexport function getRelativeTransform(source, destination) {\n  return { scale: getRelativeScale(source, destination), position: getRelativePosition(source, destination) };\n}\n\nexport function getRelativeScale(source, destination) {\n  const { width: sourceWidth, height: sourceHeight } = source.getLocalBounds();\n  const { width: destinationWidth, height: destinationHeight } = destination.getBounds();\n\n  return new Phaser.Point(\n    destinationWidth / (sourceWidth * source.parent.worldScale.x),\n    destinationHeight / (sourceHeight * source.parent.worldScale.y)\n  );\n}\n\nexport function getRelativePosition(source, destination) {\n  return source.parent.toLocal(destination.parent.toGlobal(destination.position));\n}\n\nexport function getTutorialBgImageSize() {\n  return LP({ width: 500, height: 77 }, { width: 500, height: 140 });\n}\n\nexport function getCtaEmbeddedPopupBgImageSize() {\n  return LP({ width: 350, height: 464 }, { width: 478, height: 730 });\n}\n\nexport function getLootBoxPopupBgImageSize() {\n  return LP({ width: 320, height: 422 }, { width: 478, height: 600 });\n}\n\nexport function isFat() {\n  const { width, height } = getGameBounds();\n  return Math.min(width, height) / Math.max(width, height) > 0.6;\n}\n\nexport function FT(value1, value2) {\n  if (isFat()) {\n    return value1;\n  }\n\n  return value2;\n}\n","export const objectKeys = object => {\n  const keys = [];\n  Object.entries(object).forEach(entry => {\n    const key = entry[0];\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      keys.push(key);\n    }\n  });\n  return keys;\n};\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { ViewEvents } from '../events/view-events';\n\nexport class ResizablePhaser2Grid extends Phaser2Grid {\n  constructor(game) {\n    super(game);\n\n    lego.event.on(ViewEvents.Game.Resize, this.onResize, this);\n  }\n\n  onResize() {\n    // @ts-ignore\n    this.rebuild(this.getGridConfig());\n  }\n\n  getGridConfig() {\n    throw new Error(`Method \"getGridConfig\" is not implement.`);\n  }\n}\n","export class UniversalTween extends Phaser.Tween {\n  constructor(target, startValues, endValues, context) {\n    super(target, CI_API.game, CI_API.game.tweens);\n    this.__context__ = context;\n    this.getStartValues = startValues;\n    this.getEndValues = endValues;\n  }\n\n  getPropertiesStartValue() {\n    super.start();\n    return this.getStartValues.call(this.__context__);\n  }\n\n  getPropertiesEndValue() {\n    return this.getEndValues.call(this.__context__);\n  }\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"./Types\");\nvar Point_1 = require(\"./utils/geom/Point\");\nvar Rect_1 = require(\"./utils/geom/Rect\");\nvar Utils_1 = require(\"./utils/Utils\");\nvar Cell = /** @class */ (function () {\n    /**\n     * @param config Input configuration object.\n     */\n    function Cell(config) {\n        var name = config.name, bounds = config.bounds, cells = config.cells, scale = config.scale, align = config.align, padding = config.padding, offset = config.offset;\n        this._config = config;\n        this._name = this._getName(name);\n        this._scale = this._getScale(scale);\n        this._align = this._getAlign(align);\n        this._offset = this._getOffset(offset);\n        this._contents = this._getContents();\n        this._bounds = this._getBounds(bounds);\n        this._padding = this._buildPadding(this._getPadding(padding));\n        this._cells = this._buildCells(this._getCells(cells));\n    }\n    Object.defineProperty(Cell.prototype, \"config\", {\n        /**\n         * @description Configuration object reference passed in constructor\n         * @returns {ICellConfig} configuration object\n         */\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"name\", {\n        /**\n         * @description Cell name defined in configuration object\n         * @returns {string} cell name\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"cells\", {\n        /**\n         * @description Array of child cells\n         * @returns {Cell[]} child cells\n         */\n        get: function () {\n            return this._cells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"bounds\", {\n        /**\n         * @description Bounds area in pixels\n         * @returns {Rect} bounds area\n         */\n        get: function () {\n            return this._bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"padding\", {\n        /**\n         * @description Padding area in pixels\n         * @returns {Rect} padding area\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"scale\", {\n        /**\n         * @description Scale type, used to scale contents\n         * @returns {CellScale} scale type\n         */\n        get: function () {\n            return this._scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"align\", {\n        /**\n         * @description Align type, used to align contents\n         * @returns {CellAlign} align type\n         */\n        get: function () {\n            return this._align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"contents\", {\n        /**\n         * @description Contents\n         * @returns {T[]} cell contents\n         */\n        get: function () {\n            return this._contents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"area\", {\n        /**\n         * @description Cell bounds considered paddings\n         * @returns {Rect} Rectangle considered paddings\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"offset\", {\n        /**\n         * @description Cell offset\n         * @returns {Point} cell offset\n         */\n        get: function () {\n            return this._offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @description Returns cells way down of the tree, recursively\n     * @returns {Cell[]} Array of cells\n     */\n    Cell.prototype.getCells = function () {\n        var cells = [];\n        cells.push(this);\n        this._cells.forEach(function (cell) { return cells.push.apply(cells, __spread(cell.getCells())); });\n        return cells;\n    };\n    /**\n     * @description Returns cell based on given name\n     * @param name The name of the cell\n     * @returns {Cell | undefined}\n     */\n    Cell.prototype.getCellByName = function (name) {\n        return this.getCells().find(function (cell) { return cell._name === name; });\n    };\n    Cell.prototype.getCellByContent = function (content) {\n        return this.getCells().find(function (cell) { return cell.contents.includes(content); });\n    };\n    Cell.prototype._getName = function (rawName) {\n        return rawName;\n    };\n    Cell.prototype._getScale = function (rawScale) {\n        return rawScale || Types_1.CellScale.Fit;\n    };\n    Cell.prototype._getAlign = function (rawAlign) {\n        return rawAlign || Types_1.CellAlign.Center;\n    };\n    Cell.prototype._getOffset = function (rawOffset) {\n        return rawOffset ? new Point_1.Point(rawOffset.x || 0, rawOffset.y || 0) : new Point_1.Point(0, 0);\n    };\n    Cell.prototype._getContents = function () {\n        return new Array(0);\n    };\n    Cell.prototype._getCells = function (rawCells) {\n        return rawCells || new Array(0);\n    };\n    Cell.prototype._getBounds = function (rawBounds) {\n        var b = rawBounds ? Utils_1.rawToRect(rawBounds) : new Rect_1.Rect(0, 0, Cell.MIN_SIZE, Cell.MIN_SIZE);\n        var o = this.offset;\n        return new Rect_1.Rect(b.x + o.x, b.y + o.y, b.width, b.height);\n    };\n    Cell.prototype._getPadding = function (rawPadding) {\n        return rawPadding\n            ? typeof rawPadding === 'number'\n                ? Utils_1.numberToRect(rawPadding)\n                : Utils_1.fillRect(rawPadding)\n            : new Rect_1.Rect(0, 0, 1, 1);\n    };\n    Cell.prototype._buildPadding = function (padding) {\n        var px = padding.x, py = padding.y, pw = padding.width, ph = padding.height;\n        var _a = this._bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        return new Rect_1.Rect(bx + px * bw, by + py * bh, bw * pw, bh * ph);\n    };\n    Cell.prototype._buildCells = function (rawCells) {\n        var e_1, _a;\n        var cells = [];\n        var _b = this.area, bw = _b.width, bh = _b.height, bl = _b.left, br = _b.right, bt = _b.top, bb = _b.bottom;\n        try {\n            for (var rawCells_1 = __values(rawCells), rawCells_1_1 = rawCells_1.next(); !rawCells_1_1.done; rawCells_1_1 = rawCells_1.next()) {\n                var rawCell = rawCells_1_1.value;\n                var _c = rawCell.bounds, bounds = _c === void 0 ? new Rect_1.Rect(0, 0, 0, 0) : _c;\n                var configBounds = __assign({}, bounds);\n                bounds.x =\n                    bounds.x !== undefined\n                        ? typeof bounds.x === 'string'\n                            ? bl + Utils_1.px2number(bounds.x)\n                            : bl + bounds.x * bw\n                        : Math.max.apply(Math, __spread([bl], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.right;\n                        })));\n                bounds.y =\n                    bounds.y !== undefined\n                        ? typeof bounds.y === 'string'\n                            ? bt + Utils_1.px2number(bounds.y)\n                            : bt + bounds.y * bh\n                        : Math.max.apply(Math, __spread([bt], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.bottom;\n                        })));\n                bounds.width =\n                    bounds.width !== undefined\n                        ? typeof bounds.width === 'string'\n                            ? Utils_1.px2number(bounds.width)\n                            : bounds.width * bw\n                        : br - bounds.x;\n                bounds.height =\n                    bounds.height !== undefined\n                        ? typeof bounds.height === 'string'\n                            ? Utils_1.px2number(bounds.height)\n                            : bounds.height * bh\n                        : bb - bounds.y;\n                var cell = new Cell(rawCell);\n                cell.config.bounds = configBounds;\n                cells.push(cell);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rawCells_1_1 && !rawCells_1_1.done && (_a = rawCells_1.return)) _a.call(rawCells_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return cells;\n    };\n    Cell.MIN_SIZE = 1 / Number.MAX_SAFE_INTEGER;\n    return Cell;\n}());\nexports.Cell = Cell;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CellScale;\n(function (CellScale) {\n    CellScale[CellScale[\"None\"] = 1] = \"None\";\n    CellScale[CellScale[\"Fit\"] = 2] = \"Fit\";\n    CellScale[CellScale[\"Fill\"] = 3] = \"Fill\";\n    CellScale[CellScale[\"ShowAll\"] = 4] = \"ShowAll\";\n    CellScale[CellScale[\"Envelop\"] = 5] = \"Envelop\";\n    CellScale[CellScale[\"Custom\"] = 6] = \"Custom\";\n})(CellScale = exports.CellScale || (exports.CellScale = {}));\nvar CellAlign;\n(function (CellAlign) {\n    CellAlign[CellAlign[\"None\"] = 1] = \"None\";\n    CellAlign[CellAlign[\"Center\"] = 2] = \"Center\";\n    CellAlign[CellAlign[\"CenterTop\"] = 3] = \"CenterTop\";\n    CellAlign[CellAlign[\"CenterBottom\"] = 4] = \"CenterBottom\";\n    CellAlign[CellAlign[\"LeftCenter\"] = 5] = \"LeftCenter\";\n    CellAlign[CellAlign[\"LeftTop\"] = 6] = \"LeftTop\";\n    CellAlign[CellAlign[\"LeftBottom\"] = 7] = \"LeftBottom\";\n    CellAlign[CellAlign[\"RightCenter\"] = 8] = \"RightCenter\";\n    CellAlign[CellAlign[\"RightTop\"] = 9] = \"RightTop\";\n    CellAlign[CellAlign[\"RightBottom\"] = 10] = \"RightBottom\";\n})(CellAlign = exports.CellAlign || (exports.CellAlign = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Cell_1 = require(\"./Cell\");\nexports.Cell = Cell_1.Cell;\nvar Types_1 = require(\"./Types\");\nexports.CellAlign = Types_1.CellAlign;\nexports.CellScale = Types_1.CellScale;\nvar Point_1 = require(\"./utils/geom/Point\");\nexports.Point = Point_1.Point;\nvar Rect_1 = require(\"./utils/geom/Rect\");\nexports.Rect = Rect_1.Rect;\nvar Utils_1 = require(\"./utils/Utils\");\nexports.align = Utils_1.align;\nexports.fit = Utils_1.fit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"../Types\");\nvar Point_1 = require(\"./geom/Point\");\nvar Rect_1 = require(\"./geom/Rect\");\nfunction rawToRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 0 : _d, _e = _a.height, height = _e === void 0 ? 0 : _e;\n    return new Rect_1.Rect(typeof x === 'string' ? px2number(x) : x, typeof y === 'string' ? px2number(y) : y, typeof width === 'string' ? px2number(width) : width, typeof height === 'string' ? px2number(height) : height);\n}\nexports.rawToRect = rawToRect;\nfunction numberToRect(value) {\n    return new Rect_1.Rect(value, value, 1 - 2 * value, 1 - 2 * value);\n}\nexports.numberToRect = numberToRect;\nfunction fillRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 1 - (x ? x : 0) : _d, _e = _a.height, height = _e === void 0 ? 1 - (y ? y : 0) : _e;\n    return new Rect_1.Rect(x, y, width, height);\n}\nexports.fillRect = fillRect;\nfunction px2number(value) {\n    return parseInt(value, 10);\n}\nexports.px2number = px2number;\n/**\n * @description Represents scale difference needed to scale first dimension compared with second based on scale type\n * @param d1 Dimension to scale\n * @param d2 Dimension to compare with\n * @param scaleType Scale type\n * @returns {Point}\n */\nfunction fit(d1, d2, scaleType) {\n    switch (scaleType) {\n        case Types_1.CellScale.Fit:\n            return _fit(d1, d2);\n        case Types_1.CellScale.Fill:\n            return _fill(d1, d2);\n        case Types_1.CellScale.ShowAll:\n            return _showAll(d1, d2);\n        case Types_1.CellScale.Envelop:\n            return _envelop(d1, d2);\n        case Types_1.CellScale.None:\n            return new Point_1.Point(1, 1);\n        default:\n            throw new Error(\"Unknown scale type: \" + scaleType);\n    }\n}\nexports.fit = fit;\n/**\n * @description Represents position difference needed to align dimension in rect based on align type\n * @param dimension Dimension to align\n * @param rect Rect to align to\n * @param alignType Align type\n * @returns {Point}\n */\nfunction align(dimension, rect, alignType) {\n    var w1 = dimension.width, h1 = dimension.height;\n    var x2 = rect.x, y2 = rect.y, w2 = rect.width, h2 = rect.height;\n    var pos = new Point_1.Point(x2, y2);\n    switch (alignType) {\n        case Types_1.CellAlign.Center:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.CenterTop:\n            return pos.set(x2 + (w2 - w1) / 2, y2);\n        case Types_1.CellAlign.CenterBottom:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1));\n        case Types_1.CellAlign.LeftCenter:\n            return pos.set(x2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.LeftTop:\n            return pos;\n        case Types_1.CellAlign.LeftBottom:\n            return pos.set(x2, y2 + (h2 - h1));\n        case Types_1.CellAlign.RightCenter:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.RightTop:\n            return pos.set(x2 + (w2 - w1), y2);\n        case Types_1.CellAlign.RightBottom:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1));\n        case Types_1.CellAlign.None:\n            return pos;\n        default:\n            throw new Error(\"Unknown align: \" + align);\n    }\n}\nexports.align = align;\nfunction _fit(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return s < 1 ? new Point_1.Point(s, s) : new Point_1.Point(1, 1);\n}\nfunction _showAll(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _envelop(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.max(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _fill(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    return new Point_1.Point(w2 / w1, h2 / h1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a Point in 2D space, with an | x, y | component.\n */\nvar Point = /** @class */ (function () {\n    /**\n     *\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * @description Set the x and y coordinates of the point to the given values.\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    Point.prototype.set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Encapsulates a 2D rectangle with an | x, y, width, height | component\n */\nvar Rect = /** @class */ (function () {\n    /**\n     *\n     * @param x The X coordinate of the top left corner of the Rectangle.\n     * @param y The Y coordinate of the top left corner of the Rectangle.\n     * @param width The width of the Rectangle.\n     * @param height The height of the Rectangle.\n     */\n    function Rect(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Rect.prototype, \"left\", {\n        /**\n         * @description The x coordinate of the left of the Rectangle.\n         */\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"right\", {\n        /**\n         * @description The sum of the x and width properties.\n         */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"top\", {\n        /**\n         * @description The y coordinate of the top of the Rectangle.\n         */\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottom\", {\n        /**\n         * @description The sum of the y and height properties.\n         */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Rect;\n}());\nexports.Rect = Rect;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nvar Command = /** @class */ (function () {\n    function Command() {\n        this._guards = [];\n        this._payloads = [];\n    }\n    Command.prototype.on = function (event, command) {\n        index_1.lego.event.on(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.once = function (event, command) {\n        index_1.lego.event.once(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.off = function (event, command) {\n        var ll = index_1.lego.event.getListeners(event);\n        // @ts-ignore\n        var found = ll.find(function (l) { return l.callback.__command === command; });\n        if (!found) {\n            return this;\n        }\n        index_1.lego.event.off(event, found.callback);\n        return this;\n    };\n    Command.prototype.execute = function () {\n        var e_1, _a;\n        var commands = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            commands[_i] = arguments[_i];\n        }\n        var _b = this, _guards = _b._guards, _payloads = _b._payloads;\n        var passed = !_guards.length || !_guards.find(function (guard) { return !guard.apply(undefined, _payloads); });\n        if (passed) {\n            try {\n                for (var commands_1 = __values(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {\n                    var c = commands_1_1.value;\n                    this._execute.apply(this, __spread([c], _payloads));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            this._resetGuardsAndPayloads();\n        }\n        return this;\n    };\n    Command.prototype.payload = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._payloads = args;\n        return this;\n    };\n    Command.prototype.guard = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._guards = args;\n        return this;\n    };\n    Command.prototype._execute = function (command) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this._resetGuardsAndPayloads();\n        command.apply(undefined, args);\n    };\n    Command.prototype._resetGuardsAndPayloads = function () {\n        this.guard().payload();\n    };\n    Command.prototype._getEventCallback = function (command) {\n        return Object.defineProperties(this._execute.bind(this, command), {\n            __command: { value: command },\n        });\n    };\n    return Command;\n}());\nexports.Command = Command;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map_1 = require(\"./utils/Map\");\nvar Emitter = /** @class */ (function () {\n    function Emitter() {\n        this._events = new Map_1.Map();\n    }\n    Emitter.prototype.getListeners = function (event) {\n        return this._events.get(event) || [];\n    };\n    Emitter.prototype.on = function (name, callback, context) {\n        this._addListener(name, callback, context, false);\n        return this;\n    };\n    Emitter.prototype.once = function (name, callback, context) {\n        this._addListener(name, callback, context, true);\n        return this;\n    };\n    Emitter.prototype.off = function (name, callback, context) {\n        this._removeListener(name, callback, context);\n        return this;\n    };\n    Emitter.prototype.emit = function (name) {\n        var e_1, _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        var llCopy = __spread(ll);\n        try {\n            for (var llCopy_1 = __values(llCopy), llCopy_1_1 = llCopy_1.next(); !llCopy_1_1.done; llCopy_1_1 = llCopy_1.next()) {\n                var l = llCopy_1_1.value;\n                var callback = l.callback, context = l.context, once = l.once;\n                if (once) {\n                    this._removeListener(name, callback, context);\n                }\n                callback.apply(context, args);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (llCopy_1_1 && !llCopy_1_1.done && (_a = llCopy_1.return)) _a.call(llCopy_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Emitter.prototype.removeListenersOf = function (context) {\n        var keys = this._events.keys();\n        for (var i = keys.length - 1; i >= 0; i -= 1) {\n            var name = keys[i];\n            var ll = this.getListeners(name);\n            for (var j = ll.length - 1; j >= 0; j -= 1) {\n                var l = ll[j];\n                if (l.context === context) {\n                    this._removeListener(name, l.callback, context);\n                }\n            }\n        }\n    };\n    Emitter.prototype._addListener = function (name, callback, context, once) {\n        var ll = this.getListeners(name);\n        var l = { callback: callback, context: context, once: once };\n        !ll.length ? this._events.set(name, [l]) : ll.push(l);\n    };\n    Emitter.prototype._removeListener = function (name, callback, context) {\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        for (var i = ll.length - 1; i >= 0; i -= 1) {\n            var l = ll[i];\n            var clb = l.callback, ctx = l.context;\n            if (clb === callback && ctx === context) {\n                ll.splice(i, 1);\n                break;\n            }\n        }\n        if (!ll.length) {\n            this._events.delete(name);\n        }\n    };\n    return Emitter;\n}());\nexports.Emitter = Emitter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Command_1 = require(\"./Command\");\nvar Emitter_1 = require(\"./Emitter\");\nvar Observe_1 = require(\"./Observe\");\nvar Lego = /** @class */ (function () {\n    function Lego() {\n        this.observe = new Observe_1.Observe();\n        this.event = new Emitter_1.Emitter();\n        this.command = new Command_1.Command();\n    }\n    return Lego;\n}());\nexports.Lego = Lego;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nfunction adjustEventName(str) {\n    var clean = str.replace(/[^0-9a-z-A-Z]/g, '').replace(/ +/, ' ');\n    return \"\" + clean.charAt(0).toUpperCase() + clean.slice(1);\n}\nvar Observe = /** @class */ (function () {\n    function Observe() {\n    }\n    Observe.prototype.makeObservable = function (obj) {\n        var e_1, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {\n                var prop = props_1_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    this.createObservable(obj, prop, value);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Observe.prototype.removeObservable = function (obj) {\n        var e_2, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {\n                var prop = props_2_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    Object.defineProperty(obj, prop, {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true,\n                        value: value,\n                    });\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    Observe.prototype.createObservable = function (obj, prop, value) {\n        var eventName = \"\" + obj.__name__ + adjustEventName(prop) + \"Update\";\n        var oldValue = value;\n        var newValue = oldValue;\n        Object.defineProperty(obj, prop, {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return newValue;\n            },\n            set: function (val) {\n                if (val === newValue) {\n                    return;\n                }\n                oldValue = newValue;\n                newValue = val;\n                index_1.lego.event.emit(eventName, newValue, oldValue, obj.uuid);\n            },\n        });\n    };\n    return Observe;\n}());\nexports.Observe = Observe;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lego_1 = require(\"./Lego\");\nvar Utils_1 = require(\"./utils/Utils\");\nexports.not = Utils_1.not;\nexports.lego = new Lego_1.Lego();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map = /** @class */ (function () {\n    function Map() {\n    }\n    Map.prototype.get = function (key) {\n        // @ts-ignore\n        return this[key];\n    };\n    Map.prototype.keys = function () {\n        return Object.keys(this);\n    };\n    Map.prototype.values = function () {\n        var _this = this;\n        var keys = this.keys();\n        // @ts-ignore\n        return keys.map(function (k) { return _this[k]; });\n    };\n    Map.prototype.set = function (key, value) {\n        // @ts-ignore\n        this[key] = value;\n    };\n    Map.prototype.delete = function (key) {\n        var v = this.get(key);\n        // @ts-ignore\n        delete this[key];\n        return v;\n    };\n    Map.prototype.forEach = function (fn) {\n        var _this = this;\n        Object.keys(this).forEach(function (prop, index) { return fn(prop, _this.get(prop), index); });\n    };\n    return Map;\n}());\nexports.Map = Map;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction not(fn) {\n    var wrappedFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return !fn.apply(void 0, __spread(args));\n    };\n    var upperCaseName = fn.name.charAt(0).toUpperCase() + fn.name.slice(1);\n    Object.defineProperties(wrappedFn, {\n        name: { value: \"not\" + upperCaseName },\n    });\n    return wrappedFn;\n}\nexports.not = not;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Debugger = exports.Debug = void 0;\nvar Debug = /** @class */ (function () {\n    function Debug(parent) {\n        this._parent = parent;\n    }\n    Debug.prototype.bringToTop = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._parent.bringToTop(this._debugger);\n    };\n    Debug.prototype.draw = function (cell, lineWidth, parentDebug) {\n        var _this = this;\n        if (lineWidth === void 0) { lineWidth = 10; }\n        var _a = cell.bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        var _b = cell.area, px = _b.x, py = _b.y, pw = _b.width, ph = _b.height;\n        var _c = cell.config.debug, debug = _c === void 0 ? parentDebug : _c;\n        if (debug) {\n            if (this._debugger === undefined) {\n                // Init debugger\n                this._debugger = new Debugger(this._parent.game);\n                this._parent.add(this._debugger);\n            }\n            var color = debug.color, fill = debug.fill;\n            // Draw content area\n            fill\n                ? this._debugger.fillRect(px, py, pw, ph, lineWidth * 0.8, color)\n                : this._debugger.strokeRect(px, py, pw, ph, lineWidth * 0.8, color);\n            // Draw cell bounds\n            this._debugger.strokeRect(bx, by, bw, bh, lineWidth, color);\n        }\n        cell.cells.forEach(function (el) { return _this.draw(el, lineWidth * 0.7, debug); });\n    };\n    Debug.prototype.clear = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.clear();\n    };\n    Debug.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.fillRect(x, y, w, h, lineWidth, color);\n    };\n    Debug.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.strokeRect(x, y, w, h, lineWidth, color);\n    };\n    return Debug;\n}());\nexports.Debug = Debug;\n// tslint:disable-next-line: max-classes-per-file\nvar Debugger = /** @class */ (function (_super) {\n    __extends(Debugger, _super);\n    function Debugger() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Debugger.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.drawRect(x, y, w, h);\n    };\n    Debugger.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.beginFill(color, 0.4);\n        this.drawRect(x, y, w, h);\n        this.endFill();\n    };\n    Debugger.DEFAULT_COLOR = 0xffffff;\n    return Debugger;\n}(Phaser.Graphics));\nexports.Debugger = Debugger;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Phaser2Grid = void 0;\nvar grid_core_1 = require(\"@armathai/grid-core\");\nvar Debugger_1 = require(\"./Debugger\");\nvar Phaser2Grid = /** @class */ (function (_super) {\n    __extends(Phaser2Grid, _super);\n    function Phaser2Grid(game) {\n        var _this = _super.call(this, game) || this;\n        _this._debug = new Debugger_1.Debug(_this);\n        return _this;\n    }\n    Phaser2Grid.prototype.getCellByName = function (name) {\n        return this.grid.getCellByName(name);\n    };\n    Phaser2Grid.prototype.getCellByContent = function (content) {\n        return this.grid.getCellByContent(content);\n    };\n    /**\n     * @description Rebuilds Grid. Destroys existing grid and creates new one based on given or existing configuration\n     * @param config Input configuration object. Can be empty, to build with existing configuration\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.rebuild = function (config) {\n        var _this = this;\n        // saves cells references before destroying grid\n        var cells = this.grid.getCells();\n        // creates new grid\n        this._internalBuild(config || this.grid.config);\n        // sets old cells contents in new grid cells\n        cells.forEach(function (cell) { return cell.contents.forEach(function (content) { return _this._rebuildContent(cell.name, content); }); });\n    };\n    /**\n     * @description Creates Grid object based on input configuration object\n     * @param config Input configuration object.\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.build = function (config) {\n        this._internalBuild(config);\n    };\n    /**\n     * @description Adds the given Game Object, to this Container.\n     * @param cellName Cell name which will hold given child as content\n     * @param child The Game Object, to add to the Container.\n     * @param config Configuration object, which will be merged with cell configuration\n     * @returns {this}\n     */\n    Phaser2Grid.prototype.setChild = function (cellName, child) {\n        this.addChild(child);\n        this._patchChildDestroy(child, cellName);\n        this._rebuildContent(cellName, child);\n        if (child.postBuild !== undefined) {\n            child.postBuild();\n        }\n        this._debug.bringToTop();\n        return this;\n    };\n    Phaser2Grid.prototype.rebuildChild = function (child, cellName) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with \" + child);\n        }\n        if (cellName === undefined) {\n            cellName = cell.name;\n        }\n        this._removeContent(child);\n        this._rebuildContent(cellName, child);\n        return this;\n    };\n    Phaser2Grid.prototype._patchChildDestroy = function (child, cellName) {\n        var _this = this;\n        var childDestroy = child.destroy;\n        child.destroy = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            childDestroy.call.apply(childDestroy, __spread([child], args));\n            _this._removeContent(child);\n        };\n    };\n    Phaser2Grid.prototype._internalBuild = function (config) {\n        this.grid = new grid_core_1.Cell(config);\n        this._debug.clear();\n        this._debug.draw(this.grid);\n    };\n    Phaser2Grid.prototype._rebuildContent = function (cellName, child) {\n        var cell = this.grid.getCellByName(cellName);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with name \" + cellName);\n        }\n        this._removeContent(child);\n        this._addContent(child, cell);\n        this._resetContent(child, cell);\n        this._adjustContent(child, cell);\n    };\n    Phaser2Grid.prototype._addContent = function (child, cell) {\n        cell.contents.push(child);\n    };\n    Phaser2Grid.prototype._removeContent = function (child) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            return;\n        }\n        cell.contents.splice(cell.contents.indexOf(child), 1);\n    };\n    Phaser2Grid.prototype._adjustContent = function (child, cell) {\n        child instanceof Phaser2Grid ? this._adjustGridChild(child, cell) : this._adjustChild(child, cell);\n    };\n    Phaser2Grid.prototype._adjustGridChild = function (child, cell) {\n        var gridConfig = child.getGridConfig();\n        gridConfig.bounds = cell.area;\n        child.rebuild(gridConfig);\n    };\n    Phaser2Grid.prototype._adjustChild = function (child, cell) {\n        var childBounds = child.getBounds();\n        this._scaleContent(child, cell, childBounds);\n        this._positionContent(child, cell, childBounds);\n    };\n    Phaser2Grid.prototype._scaleContent = function (child, cell, childBounds) {\n        switch (cell.scale) {\n            case grid_core_1.CellScale.None:\n                break;\n            case grid_core_1.CellScale.Custom:\n                if (!child.resize) {\n                    throw new Error('resize() function does not implemented');\n                }\n                child.resize(cell.area.width, cell.area.height);\n                break;\n            default:\n                var childDimensions = {\n                    width: childBounds.width / child.worldScale.x,\n                    height: childBounds.height / child.worldScale.y,\n                };\n                var scale = grid_core_1.fit(childDimensions, cell.area, cell.scale);\n                child.scale.set(scale.x, scale.y);\n        }\n    };\n    Phaser2Grid.prototype._positionContent = function (child, cell, childBounds) {\n        var childDimensions = {\n            width: (childBounds.width / child.worldScale.x) * child.scale.x,\n            height: (childBounds.height / child.worldScale.y) * child.scale.y,\n        };\n        var pos = grid_core_1.align(childDimensions, cell.area, cell.align);\n        child.position.set(pos.x, pos.y);\n        child.x -= (childBounds.x / child.worldScale.x) * child.scale.x;\n        child.y -= (childBounds.y / child.worldScale.y) * child.scale.y;\n    };\n    Phaser2Grid.prototype._resetContent = function (child, cell) {\n        child.position.set(0, 0);\n        if (cell.scale !== grid_core_1.CellScale.None) {\n            child.scale.set(1, 1);\n        }\n        child.updateTransform();\n    };\n    return Phaser2Grid;\n}(Phaser.Group));\nexports.Phaser2Grid = Phaser2Grid;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grid_core_1 = require(\"@armathai/grid-core\");\nObject.defineProperty(exports, \"CellAlign\", { enumerable: true, get: function () { return grid_core_1.CellAlign; } });\nObject.defineProperty(exports, \"CellScale\", { enumerable: true, get: function () { return grid_core_1.CellScale; } });\nvar Phaser2Grid_1 = require(\"./Phaser2Grid\");\nObject.defineProperty(exports, \"Phaser2Grid\", { enumerable: true, get: function () { return Phaser2Grid_1.Phaser2Grid; } });\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatch = void 0;\nvar NinePatch = /** @class */ (function (_super) {\n    __extends(NinePatch, _super);\n    function NinePatch(game, x, y, key, frame, width, height, data) {\n        var _this = _super.call(this, game, x, y, key, frame) || this;\n        /**\n         * The eventual sizes of the container\n         */\n        _this.localWidth = 1;\n        _this.localHeight = 1;\n        _this.localWidth = width;\n        _this.localHeight = height;\n        _this.setPatchesData(key, frame, data);\n        _this.render();\n        return _this;\n    }\n    /**\n     * Changes the base texture the Game Object is using. The old texture is removed and the new one is referenced or fetched from the Cache.\n     *\n     * If your Game Object is using a frame from a texture atlas and you just wish to change to another frame, then see the `frame` or `frameName` properties instead.\n     *\n     * You should only use `loadTexture` if you want to replace the base texture entirely.\n     *\n     * Calling this method causes a WebGL texture update, so use sparingly or in low-intensity portions of your game, or if you know the new texture is already on the GPU.\n     *\n     * You can use the new const `Phaser.PENDING_ATLAS` as the texture key for any sprite.\n     * Doing this then sets the key to be the `frame` argument (the frame is set to zero).\n     *\n     * This allows you to create sprites using `load.image` during development, and then change them\n     * to use a Texture Atlas later in development by simply searching your code for 'PENDING_ATLAS'\n     * and swapping it to be the key of the atlas data.\n     *\n     * Note: You cannot use a RenderTexture as a texture for a TileSprite.\n     *\n     * @param key This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache Image entry, or an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n     * @param frame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.\n     * @param stopAnimation If an animation is already playing on this Sprite you can choose to stop it or let it carry on playing. - Default: true\n     */\n    NinePatch.prototype.loadTexture = function (key, frame, stopAnimation) {\n        this.baseFrameName = frame;\n        _super.prototype.loadTexture.call(this, key, frame, stopAnimation);\n        this.baseTexture = this.texture.baseTexture;\n        this.setBaseFrame(this.texture.frame);\n        if (this.texture) {\n            this.texture.destroy(false);\n        }\n        this.texture = new Phaser.RenderTexture(this.game, this.localWidth, this.localHeight);\n        if (this.patchesData) {\n            this.render();\n        }\n    };\n    Object.defineProperty(NinePatch.prototype, \"frameName\", {\n        /**\n         * Sets the current frame name of the texture being used to render this Game Object.\n         *\n         * To change the frame set `frameName` to the name of the new frame in the texture atlas you wish this Game Object to use,\n         * for example: `player.frameName = \"idle\"`.\n         *\n         * If the frame name given doesn't exist it will revert to the first frame found in the texture and throw a console warning.\n         *\n         * If you are using a sprite sheet then you should use the `frame` property instead.\n         *\n         * If you wish to fully replace the texture being used see `loadTexture`.\n         */\n        set: function (value) {\n            this.loadTexture(this.key, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"height\", {\n        /**\n         * The height of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localHeight;\n        },\n        set: function (value) {\n            this.resize(this.localWidth, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"width\", {\n        /**\n         * The width of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localWidth;\n        },\n        set: function (value) {\n            this.resize(value, this.localHeight);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Set the size of the container, then update all the parts\n     *\n     * @param width\n     * @param height\n     */\n    NinePatch.prototype.resize = function (width, height) {\n        this.localWidth = Math.round(width);\n        this.localHeight = Math.round(height);\n        this.render();\n    };\n    /**\n     * Override the destroy to fix PIXI leaking CanvasBuffers\n     *\n     * @param args\n     */\n    NinePatch.prototype.destroy = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        _super.prototype.destroy.call(this, args[0]);\n        this.texture.destroy(true);\n        this.baseTexture = undefined;\n        this.baseFrame = undefined;\n    };\n    NinePatch.prototype.setPatchesData = function (key, frame, data) {\n        var game = this.game;\n        this.patchesData = data || game.cache.getNinePatch(key) || game.cache.getNinePatch(frame);\n        if (!this.patchesData) {\n            throw Error('Cannot crate NinePatch without patches data.');\n        }\n    };\n    NinePatch.prototype.setBaseFrame = function (f) {\n        this.baseFrame = f;\n    };\n    /**\n     * Redraw the the current texture to adjust for the new sizes;\n     */\n    NinePatch.prototype.render = function () {\n        var renderTexture = this.texture;\n        var _a = this, localWidth = _a.localWidth, localHeight = _a.localHeight;\n        // Set a new empty texture\n        renderTexture.resize(localWidth, localHeight, true);\n        var _b = this.patchesData, top = _b.top, _c = _b.left, left = _c === void 0 ? top : _c, _d = _b.right, right = _d === void 0 ? top : _d, _e = _b.bottom, bottom = _e === void 0 ? top : _e;\n        var _f = this.baseFrame, baseFrameWidth = _f.width, baseFrameHeight = _f.height;\n        // The positions we want from the base texture\n        var textureXs = [0, left, baseFrameWidth - right, baseFrameWidth];\n        var textureYs = [0, top, baseFrameHeight - bottom, baseFrameHeight];\n        // These are the positions we need the eventual texture to have\n        var finalXs = [0, left, localWidth - right, localWidth];\n        var finalYs = [0, top, localHeight - bottom, localHeight];\n        renderTexture.clear();\n        for (var yi = 0; yi < 3; yi++) {\n            for (var xi = 0; xi < 3; xi++) {\n                var s = this.createTexturePart(textureXs[xi], // x\n                textureYs[yi], // y\n                textureXs[xi + 1] - textureXs[xi], // width\n                textureYs[yi + 1] - textureYs[yi]);\n                s.width = finalXs[xi + 1] - finalXs[xi];\n                s.height = finalYs[yi + 1] - finalYs[yi];\n                renderTexture.renderXY(s, finalXs[xi], finalYs[yi]);\n            }\n        }\n    };\n    /**\n     * Here we create a sprite part for the container based on the given input\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     * @returns {PIXI.Sprite}\n     */\n    NinePatch.prototype.createTexturePart = function (x, y, width, height) {\n        var frame = new PIXI.Rectangle(this.baseFrame.x + this.texture.frame.x + x, this.baseFrame.y + this.texture.frame.y + y, Math.max(width, 1), Math.max(height, 1));\n        return new Phaser.Sprite(this.game, 0, 0, new PIXI.Texture(this.baseTexture, frame));\n    };\n    return NinePatch;\n}(Phaser.Sprite));\nexports.NinePatch = NinePatch;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatchPlugin = void 0;\nvar NinePatch_1 = require(\"./NinePatch\");\nvar NinePatchPlugin = /** @class */ (function (_super) {\n    __extends(NinePatchPlugin, _super);\n    function NinePatchPlugin(game, parent) {\n        var _this = _super.call(this, game, parent) || this;\n        _this.addNinePatchCache();\n        _this.addNinePatchFactory();\n        _this.addNinePatchLoader();\n        return _this;\n    }\n    NinePatchPlugin.prototype.addNinePatchLoader = function () {\n        Phaser.Loader.prototype.ninePatch = function (key, url, top, left, right, bottom) {\n            var cacheData = {\n                top: top,\n            };\n            if (left) {\n                cacheData.left = left;\n            }\n            if (right) {\n                cacheData.right = right;\n            }\n            if (bottom) {\n                cacheData.bottom = bottom;\n            }\n            this.addToFileList('image', key, url);\n            this.game.cache.addNinePatch(key, cacheData);\n        };\n    };\n    /**\n     * Extends the GameObjectFactory prototype with the support of adding NinePatch. this allows us to add NinePatch methods to the game just like any other object:\n     * game.add.NinePatch();\n     */\n    NinePatchPlugin.prototype.addNinePatchFactory = function () {\n        Phaser.GameObjectFactory.prototype.ninePatch = function (x, y, key, frame, width, height, group) {\n            if (group === undefined) {\n                group = this.world;\n            }\n            var ninePatchObject = new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n            return group.add(ninePatchObject);\n        };\n        Phaser.GameObjectCreator.prototype.ninePatch = function (x, y, key, frame, width, height) {\n            return new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n        };\n    };\n    /**\n     * Extends the Phaser.Cache prototype with NinePatch properties\n     */\n    NinePatchPlugin.prototype.addNinePatchCache = function () {\n        // Create the cache space\n        Phaser.Cache.prototype.ninePatch = {};\n        // Method for adding a NinePatch dict to the cache space\n        Phaser.Cache.prototype.addNinePatch = function (key, data) {\n            this.ninePatch[key] = data;\n        };\n        // Method for fetching a NinePatch dict from the cache space\n        Phaser.Cache.prototype.getNinePatch = function (key) {\n            var data = this.ninePatch[key];\n            return data;\n        };\n    };\n    return NinePatchPlugin;\n}(Phaser.Plugin));\nexports.NinePatchPlugin = NinePatchPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NinePatch_1 = require(\"./NinePatch\");\nObject.defineProperty(exports, \"NinePatch\", { enumerable: true, get: function () { return NinePatch_1.NinePatch; } });\nvar NinePatchPlugin_1 = require(\"./NinePatchPlugin\");\nObject.defineProperty(exports, \"NinePatchPlugin\", { enumerable: true, get: function () { return NinePatchPlugin_1.NinePatchPlugin; } });\n","/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction A(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||\"-\"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+\" \"+(a.f+\"00\")+\" 300px \"+I(a.c)}function I(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function J(a){return a.a+a.f}function H(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);K(a,\"loading\")}function L(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}K(a,\"inactive\")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function N(a){u(a.c,\"body\",a.a)}function O(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+I(a.c)+\";\"+(\"font-style:\"+H(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+\",serif\",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+\",sans-serif\",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G(\"serif\",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G(\"sans-serif\",J(this.a));a=\nO(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:\"serif\",C:\"sans-serif\"},S=null;function T(){if(null===S){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.m.a.offsetWidth;this.A=q();U(this)};\nfunction la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,J(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\")]);K(b,\"fontactive\",a);this.m=!0;na(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,J(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\"));w(b.f,d,e)}K(b,\"fontinactive\",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),K(a,\"active\")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};\nfunction qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c(\"wf\",x.c,J(x).toString(),\"loading\")]);K(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}\nra.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||\"https://fast.fonts.net/jsapi\")+\"/\"+d+\".js\"+(e?\"?v=\"+e:\"\"),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+\nd]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||\"\"}var ua=\"https://fonts.googleapis.com/css\";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction wa(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}\nvar za={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Aa={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Ba={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nCa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(\",\"),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k=\"\";else{k=n[2];k=null==k||\"\"==k?\"n\":Ba[k];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Aa[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);k=[k,n].join(\"\")}}else k=\"\";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},A(this.c,(this.f.api||\"https://f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};\"function\"===typeof define&&define.amd?define(function(){return Z}):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}