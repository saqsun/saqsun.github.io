{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/commands/ad/ad-live-command.js","js/commands/ad/ad-status-update-command.js","js/commands/ad/ad-view-state-update-command.js","js/commands/ad/cta/cta-idle-time-command.js","js/commands/ad/cta/cta-previsible-update-command.js","js/commands/ad/cta/cta-visible-update-command.js","js/commands/ad/cta/destroy-cta-model-command.js","js/commands/ad/cta/initialize-cta-model-command.js","js/commands/ad/cta/items-to-cta-complete-command.js","js/commands/ad/hint/destroy-hint-model-command.js","js/commands/ad/hint/initialize-hint-model-command.js","js/commands/ad/hint/reset-hint-visibility-timer-command.js","js/commands/ad/hint/set-hint-visible-command.js","js/commands/ad/hint/update-hint-state-command.js","js/commands/ad/initialize-ad-model-command.js","js/commands/ad/map-ad-status-update-command.js","js/commands/ad/pcta/destroy-persistent-cta-model-command.js","js/commands/ad/pcta/initialize-persistent-cta-model-command.js","js/commands/ad/reset-time-command.js","js/commands/ad/set-ad-status-command.js","js/commands/ad/set-last-interaction-command.js","js/commands/ad/set-spins-to-cta-command.js","js/commands/ad/sound/destroy-sound-model-command.js","js/commands/ad/sound/initialize-sound-model-command.js","js/commands/ad/sound/set-sound-state-command.js","js/commands/ad/tutorial/complete-tutorial-sequence-command.js","js/commands/ad/tutorial/destroy-tutorial-model-command.js","js/commands/ad/tutorial/initialize-tutorial-model-command.js","js/commands/ad/tutorial/next-tutorial-sequence-command.js","js/commands/ad/tutorial/set-tutorial-complete-command.js","js/commands/ad/tutorial/tutorial-complete-command.js","js/commands/ad/tutorial/tutorial-screen-click-command.js","js/commands/ad/tutorial/tutorial-sequence-view-complete-command.js","js/commands/ad/tutorial/update-tutorial-command.js","js/commands/game-init-command.js","js/commands/game-shut-down-command.js","js/commands/game-start-command.js","js/commands/game/destroy-game-model-command.js","js/commands/game/game-status-update-command.js","js/commands/game/initialize-game-model-command.js","js/commands/game/machine/idle-slot-machine-command.js","js/commands/game/machine/reel/set-reel-state-command.js","js/commands/game/machine/set-slot-machine-state-command.js","js/commands/game/machine/set-spin-result-command.js","js/commands/game/machine/slot-machine-state-action-command.js","js/commands/game/machine/slot-machine-state-idle-command.js","js/commands/game/machine/slot-machine-state-max-speed-command.js","js/commands/game/machine/slot-machine-state-spin-command.js","js/commands/game/machine/slot-machine-state-stop-command.js","js/commands/game/machine/slot-machine-state-update-command.js","js/commands/game/machine/slot/reset-slot-command.js","js/commands/game/machine/spin-slot-machine-command.js","js/commands/game/machine/start-auto-spin-timer-command.js","js/commands/game/machine/stop-slot-machine-command.js","js/commands/game/map-playable-commands-command.js","js/commands/game/set-game-status-command.js","js/commands/game/spin/set-spin-button-active-command.js","js/commands/game/spin/set-spin-button-state-command.js","js/commands/game/spin/spin-button-active-update-command.js","js/commands/game/unmap-playable-commands-command.js","js/commands/game/update-auto-spin-command.js","js/commands/game/update-spin-button-command.js","js/commands/initialize-models-command.js","js/commands/observants/initialize-analytics-observant-command.js","js/commands/observants/initialize-sound-observant-command.js","js/commands/observants/initialize-wrapper-observant-command.js","js/commands/player/checkout-command.js","js/commands/player/destroy-player-model-command.js","js/commands/player/initialize-player-model-command.js","js/commands/player/set-balance-command.js","js/commands/player/set-bet-command.js","js/commands/resize-command.js","js/commands/retry-command.js","js/commands/shutdown-models-command.js","js/commands/startup-command.js","js/commands/states/initialize-phaser-states-command.js","js/commands/states/restart-game-state-command.js","js/commands/states/start-game-state-command.js","js/commands/view/bet-button-click-command.js","js/commands/view/effects/effects-view-spin-result-complete-command.js","js/commands/view/initialize-ninepatches-command.js","js/commands/view/machine/reel-speed-down-complete-command.js","js/commands/view/machine/reel-speed-up-complete-command.js","js/commands/view/patch-text-for-localization-command.js","js/commands/view/user-interaction-command.js","js/configs/animation-configs.js","js/configs/button-configs.js","js/configs/grid-configs.js","js/configs/grid/background-grid-configs.js","js/configs/grid/controls-grid-configs.js","js/configs/grid/cta-grid-configs.js","js/configs/grid/effects-grid-configs.js","js/configs/grid/foreground-grid-configs.js","js/configs/grid/game-grid-configs.js","js/configs/grid/main-grid-configs.js","js/configs/grid/reward-grid-configs.js","js/configs/grid/ui-grid-configs.js","js/configs/image-configs.js","js/configs/lego-config.js","js/configs/ninepatch-configs.js","js/configs/particles-configs.js","js/configs/slot-machine-config.js","js/configs/spine-configs.js","js/configs/text-configs.js","js/configs/tutorial-config.js","js/constants.js","js/display/font-loader.js","js/display/layout-utils.js","js/display/lu/layout-utils-compact.js","js/display/lu/layout-utils-general.js","js/events/model-events.js","js/events/view-events.js","js/guards/ad/ad-live-guard.js","js/guards/ad/asec-guard.js","js/guards/ad/cta-model-guard.js","js/guards/ad/cta-previsible-guard.js","js/guards/ad/cta-visible-guard.js","js/guards/ad/hint-model-guard.js","js/guards/ad/hint-param-guard.js","js/guards/ad/persistent-cta-model-guard.js","js/guards/ad/persistent-cta-param-guard.js","js/guards/ad/sound-param-guard.js","js/guards/ad/tutorial-model-guard.js","js/guards/ad/tutorial-param-guard.js","js/guards/game/auto-spin-guard.js","js/guards/game/extra-spins-guard.js","js/guards/game/first-extra-spin-guard.js","js/guards/game/first-spin-guard.js","js/guards/game/game-model-guard.js","js/guards/game/game-status-slot-guard.js","js/guards/game/last-reel-guard.js","js/guards/game/last-tutorial-guard.js","js/guards/game/spin-btn-active-guard.js","js/guards/game/spins-to-cta-guard.js","js/guards/game/stop-button-guard.js","js/guards/player/player-model-guard.js","js/kernel/atlas-rescale.js","js/kernel/globals.js","js/kernel/multiple-atlas.js","js/main.js","js/models/ad/ad-model.js","js/models/ad/cta-model.js","js/models/ad/hint-model.js","js/models/ad/load-model.js","js/models/ad/persistent-cta-model.js","js/models/ad/sound-model.js","js/models/ad/tutorial-model.js","js/models/ad/tutorial-sequence-model.js","js/models/game/game-model.js","js/models/game/machine/reel-model.js","js/models/game/machine/slot-machine-model.js","js/models/game/machine/slot-model.js","js/models/game/machine/spin-button-model.js","js/models/observable-model.js","js/models/player/player-model.js","js/models/store.js","js/module-bindings.js","js/objects/background/background-view.js","js/objects/cta/cta-view.js","js/objects/effects/big-win-behaviour.js","js/objects/effects/effects-view.js","js/objects/effects/mega-win-behaviour.js","js/objects/effects/regular-win-behaviour.js","js/objects/effects/win-behaviour.js","js/objects/foreground/foreground-view.js","js/objects/foreground/hint-view.js","js/objects/foreground/logo-view.js","js/objects/foreground/reward/reward-popup.js","js/objects/foreground/reward/reward-view.js","js/objects/foreground/sound-view.js","js/objects/foreground/tutorial-sequence-view.js","js/objects/foreground/tutorial-view.js","js/objects/game/game-view.js","js/objects/game/machine/reel-view.js","js/objects/game/machine/slot-machine-view.js","js/objects/game/machine/slot-view.js","js/objects/main-view.js","js/objects/ui/balance-view.js","js/objects/ui/bet-view.js","js/objects/ui/controls-view.js","js/objects/ui/pair-info-component.js","js/objects/ui/persistent-cta-view.js","js/objects/ui/spin-view.js","js/objects/ui/ui-view.js","js/objects/ui/win-view.js","js/observants/analytics-observant.js","js/observants/sound-observant.js","js/observants/wrapper-observant.js","js/states/game-state.js","js/states/preloader-state.js","js/strings.js","js/utils/array/last.js","js/utils/array/sample.js","js/utils/array/shuffle.js","js/utils/button/abstract-button.js","js/utils/button/button.js","js/utils/button/input-handler.js","js/utils/container.js","js/utils/emitters/coin-fall/coin-fall-emitter.js","js/utils/emitters/coin-fall/coin-fall-particle.js","js/utils/emitters/sparkle/sparkle-emitter.js","js/utils/index.js","js/utils/number/clamp.js","js/utils/number/random-int.js","js/utils/number/random-real.js","js/utils/object/object-keys.js","js/utils/resizable-phaser2-grid.js","js/utils/tween/universal-tween.js","node_modules/@armathai/grid-core/lib/Cell.js","node_modules/@armathai/grid-core/lib/Types.js","node_modules/@armathai/grid-core/lib/index.js","node_modules/@armathai/grid-core/lib/utils/Utils.js","node_modules/@armathai/grid-core/lib/utils/geom/Point.js","node_modules/@armathai/grid-core/lib/utils/geom/Rect.js","node_modules/@armathai/lego/lib/Command.js","node_modules/@armathai/lego/lib/Emitter.js","node_modules/@armathai/lego/lib/Lego.js","node_modules/@armathai/lego/lib/Observe.js","node_modules/@armathai/lego/lib/index.js","node_modules/@armathai/lego/lib/utils/Map.js","node_modules/@armathai/lego/lib/utils/Utils.js","node_modules/@armathai/phaser2-grid/lib/Debugger.js","node_modules/@armathai/phaser2-grid/lib/Phaser2Grid.js","node_modules/@armathai/phaser2-grid/lib/index.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatch.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatchPlugin.js","node_modules/@armathai/phaser2-ninepatch/lib/index.js","node_modules/webfontloader/webfontloader.js"],"names":[],"mappings":"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CNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"creative.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { lego } from '@armathai/lego';\nimport { startGameStateCommand } from '../states/start-game-state-command';\n\nexport function adLiveCommand() {\n  lego.command.execute(startGameStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../constants';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../../guards/ad/persistent-cta-model-guard';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { mapPlayableCommandsCommand } from '../game/map-playable-commands-command';\nimport { unmapPlayableCommandsCommand } from '../game/unmap-playable-commands-command';\nimport { initializeModelsCommand } from '../initialize-models-command';\nimport { restartGameStateCommand } from '../states/restart-game-state-command';\nimport { destroyHintModelCommand } from './hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './pcta/destroy-persistent-cta-model-command';\nimport { destroyTutorialModelCommand } from './tutorial/destroy-tutorial-model-command';\n\nexport function adStatusUpdateCommand(status) {\n  switch (status) {\n    case AdStatus.Game:\n      lego.command.execute(mapPlayableCommandsCommand, initializeModelsCommand);\n      break;\n\n    case AdStatus.Restart:\n      lego.command.execute(restartGameStateCommand);\n      break;\n\n    case AdStatus.PreCta:\n      lego.command\n        .execute(unmapPlayableCommandsCommand)\n\n        .guard(tutorialModelGuard)\n        .execute(destroyTutorialModelCommand)\n\n        .guard(hintModelGuard)\n        .execute(destroyHintModelCommand);\n      break;\n\n    case AdStatus.Cta:\n      lego.command.guard(persistentCtaModelGuard).execute(destroyPersistentCtaModelCommand);\n\n      break;\n\n    case AdStatus.Retry:\n      //\n      break;\n    default:\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState } from '../../constants';\nimport { gameInitCommand } from '../game-init-command';\nimport { gameShutDownCommand } from '../game-shut-down-command';\nimport { gameStartCommand } from '../game-start-command';\n\nexport function adViewStateUpdateCommand(state) {\n  switch (state) {\n    case AdViewState.Init:\n      lego.command.execute(gameInitCommand);\n      break;\n\n    case AdViewState.Create:\n      lego.command.execute(gameStartCommand);\n      break;\n\n    case AdViewState.ShutDown:\n      lego.command.execute(gameShutDownCommand);\n      break;\n\n    default:\n  }\n}\n","import { GameOverReasons } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function ctaIdleTimeCommand() {\n  store.ad.cta.show(GameOverReasons.Idled, 0);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { ctaPreVisibleGuard } from '../../../guards/ad/cta-previsible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaPreVisibleUpdateCommand() {\n  lego.command\n    .guard(ctaPreVisibleGuard)\n    .payload(AdStatus.PreCta)\n    .execute(setAdStatusCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { adLiveGuard } from '../../../guards/ad/ad-live-guard';\nimport { asecGuard } from '../../../guards/ad/asec-guard';\nimport { ctaVisibleGuard } from '../../../guards/ad/cta-visible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaVisibleUpdateCommand() {\n  lego.command\n    .guard(ctaVisibleGuard, adLiveGuard, not(asecGuard))\n    .payload(AdStatus.Cta)\n    .execute(setAdStatusCommand)\n\n    .guard(ctaVisibleGuard, not(adLiveGuard))\n    .payload(AdStatus.Restart)\n    .execute(setAdStatusCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyCtaModelCommand() {\n  store.ad.destroyCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeCtaModelCommand() {\n  store.ad.initializeCtaModel();\n}\n","import { GameOverReasons } from '../../../constants';\nimport { store } from '../../../models/store';\n\nexport function itemsToCtaCompleteCommand() {\n  store.ad.cta.show(GameOverReasons.ItemsToCtaReached, 1000);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyHintModelCommand() {\n  store.ad.destroyHintModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeHintModelCommand() {\n  store.ad.initializeHintModel();\n}\n","import { store } from '../../../models/store';\n\nexport function resetHintVisibilityTimerCommand() {\n  store.ad.hint.resetVisibilityTimer();\n}\n","import { store } from '../../../models/store';\n\nexport function setHintVisibleCommand(value) {\n  store.ad.hint.visible = value;\n}\n","import { lego } from '@armathai/lego';\nimport { spinBtnActiveGuard } from '../../../guards/game/spin-btn-active-guard';\nimport { resetHintVisibilityTimerCommand } from './reset-hint-visibility-timer-command';\nimport { setHintVisibleCommand } from './set-hint-visible-command';\n\nexport function updateHintStateCommand() {\n  lego.command\n    .payload(false)\n    .execute(setHintVisibleCommand)\n\n    .guard(spinBtnActiveGuard)\n    .execute(resetHintVisibilityTimerCommand);\n}\n","import { store } from '../../models/store';\n\nexport function initializeAdModelCommand() {\n  store.initializeADModel();\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../events/model-events';\nimport { adStatusUpdateCommand } from './ad-status-update-command';\n\nexport function mapAdStatusUpdateCommand() {\n  lego.command\n    .off(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand)\n    .on(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyPersistentCtaModelCommand() {\n  store.ad.destroyPersistentCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializePersistentCtaModelCommand() {\n  store.ad.initializePersistentCtaModel();\n}\n","export function resetTimeCommand() {\n  CI_API.game.time.reset();\n}\n","import { store } from '../../models/store';\n\nexport function setAdStatusCommand(status) {\n  store.ad.status = status;\n}\n","import Globals from '../../kernel/globals';\n\nexport function setLastInteractionCommand(value) {\n  Globals.LAST_INTERACTION_TIME = value;\n}\n","import { store } from '../../models/store';\n\nexport function setSpinsToCtaCommand() {\n  const { first_slot_spins, number_of_extra_spins } = CI_API.Globals.PARAMS;\n\n  store.game.slotMachine.spinsToCta = first_slot_spins + number_of_extra_spins;\n}\n","import { store } from '../../../models/store';\n\nexport function destroySoundModelCommand() {\n  store.ad.destroySoundModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeSoundModelCommand() {\n  store.ad.initializeSoundModel();\n}\n","import { store } from '../../../models/store';\n\nexport function setSoundStateCommand(value) {\n  store.ad.sound.state = value;\n}\n","import { store } from '../../../models/store';\n\nexport function completeTutorialSequenceCommand() {\n  store.ad.tutorial.completeSequence();\n}\n","import { store } from '../../../models/store';\n\nexport function destroyTutorialModelCommand() {\n  store.ad.destroyTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeTutorialModelCommand() {\n  store.ad.initializeTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function nextTutorialSequenceCommand() {\n  store.ad.tutorial.nextSequence();\n}\n","import { store } from '../../../models/store';\n\nexport function setTutorialCompleteCommand() {\n  store.ad.tutorial.complete = true;\n}\n","import { lego } from '@armathai/lego';\nimport { destroyTutorialModelCommand } from './destroy-tutorial-model-command';\n\nexport function tutorialCompleteCommand() {\n  lego.command.execute(destroyTutorialModelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { completeTutorialSequenceCommand } from './complete-tutorial-sequence-command';\n\nexport function tutorialScreenClickCommand() {\n  lego.command.execute(completeTutorialSequenceCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { lastTutorialGuard } from '../../../guards/game/last-tutorial-guard';\nimport { setTutorialCompleteCommand } from './set-tutorial-complete-command';\n\nexport function tutorialSequenceViewCompleteCommand() {\n  lego.command.guard(lastTutorialGuard).execute(setTutorialCompleteCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { firstExtraSpinGuard } from '../../../guards/game/first-extra-spin-guard';\nimport { firstSpinGuard } from '../../../guards/game/first-spin-guard';\nimport { nextTutorialSequenceCommand } from './next-tutorial-sequence-command';\n\nexport function updateTutorialCommand() {\n  lego.command\n    .guard(firstSpinGuard)\n    .execute(nextTutorialSequenceCommand)\n\n    .guard(firstExtraSpinGuard)\n    .execute(nextTutorialSequenceCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { resetTimeCommand } from './ad/reset-time-command';\n\nexport function gameInitCommand() {\n  lego.command.execute(resetTimeCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\nimport { setLastInteractionCommand } from './ad/set-last-interaction-command';\nimport { unmapPlayableCommandsCommand } from './game/unmap-playable-commands-command';\nimport { shutdownModelsCommand } from './shutdown-models-command';\n\nexport function gameShutDownCommand() {\n  lego.command\n    .execute(unmapPlayableCommandsCommand)\n\n    .execute(shutdownModelsCommand)\n\n    .payload(0)\n    .execute(setLastInteractionCommand)\n\n    .payload(AdStatus.Unknown)\n    .execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, GameStatus } from '../constants';\nimport { store } from '../models/store';\nimport { mapAdStatusUpdateCommand } from './ad/map-ad-status-update-command';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\nimport { idleSlotMachineCommand } from './game/machine/idle-slot-machine-command';\nimport { setGameStatusCommand } from './game/set-game-status-command';\nimport { setBetCommand } from './player/set-bet-command';\n\nexport function gameStartCommand() {\n  lego.command\n    .execute(mapAdStatusUpdateCommand)\n\n    .payload(AdStatus.Game)\n    .execute(setAdStatusCommand)\n\n    .payload(GameStatus.Slot)\n    .execute(setGameStatusCommand)\n\n    .payload(store.game.slotMachine.config.bet.min)\n    .execute(setBetCommand)\n\n    .execute(idleSlotMachineCommand);\n}\n","import { store } from '../../models/store';\n\nexport function destroyGameModelCommand() {\n  store.destroyGameModel();\n}\n","import { lego } from '@armathai/lego';\nimport { gameStatusSlotGuard } from '../../guards/game/game-status-slot-guard';\nimport { setSpinsToCtaCommand } from '../ad/set-spins-to-cta-command';\n\nexport function gameStatusUpdateCommand() {\n  lego.command.guard(gameStatusSlotGuard).execute(setSpinsToCtaCommand);\n}\n","import { store } from '../../models/store';\n\nexport function initializeGameModelCommand() {\n  store.initializeGameModel();\n}\n","import { store } from '../../../models/store';\n\nexport function idleSlotMachineCommand() {\n  store.game.slotMachine.idle();\n}\n","import { store } from '../../../../models/store';\n\nexport function setReelStateCommand(uuid, state) {\n  const reel = store.game.slotMachine.getReel(uuid);\n  reel.setState(state);\n}\n","import { store } from '../../../models/store';\n\nexport function setSlotMachineStateCommand(state) {\n  store.game.slotMachine.setState(state);\n}\n","import { store } from '../../../models/store';\n\nexport function setSpinResultCommand() {\n  store.game.slotMachine.setSpinResult(store.player.bet);\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../../models/store';\nimport { setBalanceCommand } from '../../player/set-balance-command';\n\nexport function slotMachineStateActionCommand() {\n  const { balance } = store.player;\n  const { prize } = store.game.slotMachine.spinResult;\n\n  lego.command.payload(balance + prize).execute(setBalanceCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { tutorialModelGuard } from '../../../guards/ad/tutorial-model-guard';\nimport { updateTutorialCommand } from '../../ad/tutorial/update-tutorial-command';\nimport { updateAutoSpinCommand } from '../update-auto-spin-command';\nimport { updateSpinButtonCommand } from '../update-spin-button-command';\n\nexport function slotMachineStateIdleCommand() {\n  lego.command\n    .execute(updateAutoSpinCommand)\n    .execute(updateSpinButtonCommand)\n\n    .guard(tutorialModelGuard)\n    .execute(updateTutorialCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { SpinBtnState } from '../../../constants';\nimport { extraSpinsGuard } from '../../../guards/game/extra-spins-guard';\nimport { stopButtonGuard } from '../../../guards/game/stop-button-guard';\nimport { setSpinButtonActiveCommand } from '../spin/set-spin-button-active-command';\nimport { setSpinButtonStateCommand } from '../spin/set-spin-button-state-command';\n\nexport function slotMachineStateMaxSpeedCommand() {\n  lego.command\n    .guard(not(extraSpinsGuard), stopButtonGuard)\n    .payload(SpinBtnState.Stop)\n    .execute(setSpinButtonStateCommand)\n\n    .guard(stopButtonGuard)\n    .payload(true)\n    .execute(setSpinButtonActiveCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { checkoutCommand } from '../../player/checkout-command';\nimport { setSpinButtonActiveCommand } from '../spin/set-spin-button-active-command';\n\nexport function slotMachineStateSpinCommand() {\n  lego.command\n    .execute(checkoutCommand)\n\n    .payload(false)\n    .execute(setSpinButtonActiveCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { setSpinButtonActiveCommand } from '../spin/set-spin-button-active-command';\n\nexport function slotMachineStateStopCommand() {\n  lego.command.payload(false).execute(setSpinButtonActiveCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { SlotMachineState } from '../../../constants';\nimport { slotMachineStateActionCommand } from './slot-machine-state-action-command';\nimport { slotMachineStateIdleCommand } from './slot-machine-state-idle-command';\nimport { slotMachineStateMaxSpeedCommand } from './slot-machine-state-max-speed-command';\nimport { slotMachineStateSpinCommand } from './slot-machine-state-spin-command';\nimport { slotMachineStateStopCommand } from './slot-machine-state-stop-command';\n\nexport function slotMachineStateUpdateCommand(state) {\n  switch (state) {\n    case SlotMachineState.Spin:\n      lego.command.execute(slotMachineStateSpinCommand);\n      break;\n    case SlotMachineState.MaxSpeed:\n      lego.command.execute(slotMachineStateMaxSpeedCommand);\n      break;\n    case SlotMachineState.Stop:\n      lego.command.execute(slotMachineStateStopCommand);\n      break;\n    case SlotMachineState.Action:\n      lego.command.execute(slotMachineStateActionCommand);\n      break;\n    case SlotMachineState.Idle:\n      lego.command.execute(slotMachineStateIdleCommand);\n      break;\n    default:\n  }\n}\n","import { store } from '../../../../models/store';\n\nexport function resetSlotsCommand(shuffle) {\n  store.game.slotMachine.resetSlots(shuffle);\n}\n","import { store } from '../../../models/store';\n\nexport function spinSlotMachineCommand() {\n  store.game.slotMachine.spin();\n}\n","import { store } from '../../../models/store';\n\nexport function startAutoSpinTimerCommand() {\n  store.game.slotMachine.startAutoSpinTimer();\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../../models/store';\nimport { setSpinResultCommand } from './set-spin-result-command';\n\nexport function stopSlotMachineCommand() {\n  lego.command.execute(setSpinResultCommand);\n\n  store.game.slotMachine.stop();\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function mapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.on(entry.event, entry.command));\n}\n","import { store } from '../../models/store';\n\nexport function setGameStatusCommand(status) {\n  store.game.status = status;\n}\n","import { store } from '../../../models/store';\n\nexport function setSpinButtonActiveCommand(value) {\n  store.game.spinBtn.active = value;\n}\n","import { store } from '../../../models/store';\n\nexport function setSpinButtonStateCommand(value) {\n  store.game.spinBtn.state = value;\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../../../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from '../../ad/hint/update-hint-state-command';\n\nexport function spinButtonActiveUpdateCommand() {\n  lego.command.guard(hintModelGuard).execute(updateHintStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function unmapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.off(entry.event, entry.command));\n}\n","import { lego } from '@armathai/lego';\nimport { autoSpinGuard } from '../../guards/game/auto-spin-guard';\nimport { startAutoSpinTimerCommand } from './machine/start-auto-spin-timer-command';\n\nexport function updateAutoSpinCommand() {\n  lego.command.guard(autoSpinGuard).execute(startAutoSpinTimerCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { SpinBtnState } from '../../constants';\nimport { extraSpinsGuard } from '../../guards/game/extra-spins-guard';\nimport { stopButtonGuard } from '../../guards/game/stop-button-guard';\nimport { setSpinButtonActiveCommand } from './spin/set-spin-button-active-command';\nimport { setSpinButtonStateCommand } from './spin/set-spin-button-state-command';\n\nexport function updateSpinButtonCommand() {\n  lego.command\n    .guard(extraSpinsGuard)\n    .payload(SpinBtnState.FreeSpin)\n    .execute(setSpinButtonStateCommand)\n\n    .guard(not(extraSpinsGuard), stopButtonGuard)\n    .payload(SpinBtnState.Stop)\n    .execute(setSpinButtonStateCommand)\n\n    .payload(true)\n    .execute(setSpinButtonActiveCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { hintParamGuard } from '../guards/ad/hint-param-guard';\nimport { persistentCtaParamGuard } from '../guards/ad/persistent-cta-param-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { tutorialParamGuard } from '../guards/ad/tutorial-param-guard';\nimport { initializeCtaModelCommand } from './ad/cta/initialize-cta-model-command';\nimport { initializeHintModelCommand } from './ad/hint/initialize-hint-model-command';\nimport { initializePersistentCtaModelCommand } from './ad/pcta/initialize-persistent-cta-model-command';\nimport { initializeSoundModelCommand } from './ad/sound/initialize-sound-model-command';\nimport { initializeTutorialModelCommand } from './ad/tutorial/initialize-tutorial-model-command';\nimport { initializeGameModelCommand } from './game/initialize-game-model-command';\nimport { initializePlayerModelCommand } from './player/initialize-player-model-command';\n\nexport function initializeModelsCommand() {\n  lego.command\n    .execute(initializePlayerModelCommand)\n\n    .execute(initializeGameModelCommand)\n\n    .execute(initializeCtaModelCommand)\n\n    .guard(soundParamGuard)\n    .execute(initializeSoundModelCommand)\n\n    .guard(hintParamGuard)\n    .execute(initializeHintModelCommand)\n\n    .guard(tutorialParamGuard)\n    .execute(initializeTutorialModelCommand)\n\n    .guard(persistentCtaParamGuard)\n    .execute(initializePersistentCtaModelCommand);\n}\n","import { AnalyticsObservant } from '../../observants/analytics-observant';\n\nexport function initializeAnalyticsObservantCommand() {\n  AnalyticsObservant();\n}\n","import { SoundObservant } from '../../observants/sound-observant';\n\nexport function initializeSoundObservantCommand() {\n  SoundObservant();\n}\n","import { WrapperObservant } from '../../observants/wrapper-observant';\n\nexport function initializeWrapperObservantCommand() {\n  WrapperObservant();\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../models/store';\nimport { setBalanceCommand } from './set-balance-command';\n\nexport function checkoutCommand() {\n  const { bet, balance } = store.player;\n\n  lego.command.payload(balance - bet).execute(setBalanceCommand);\n}\n","import { store } from '../../models/store';\n\nexport function destroyPlayerModelCommand() {\n  store.destroyPlayerModel();\n}\n","import { store } from '../../models/store';\n\nexport function initializePlayerModelCommand() {\n  store.initializePlayerModel();\n}\n","import { store } from '../../models/store';\n\nexport function setBalanceCommand(value) {\n  store.player.balance = value;\n}\n","import { store } from '../../models/store';\n\nexport function setBetCommand(betAmount) {\n  store.player.bet = betAmount;\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from './ad/hint/update-hint-state-command';\n\nexport function resizeCommand() {\n  lego.command.guard(hintModelGuard).execute(updateHintStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\n\nexport function retryCommand() {\n  lego.command.payload(AdStatus.Retry).execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { ctaModelGuard } from '../guards/ad/cta-model-guard';\nimport { hintModelGuard } from '../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../guards/ad/persistent-cta-model-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { tutorialModelGuard } from '../guards/ad/tutorial-model-guard';\nimport { gameModelGuard } from '../guards/game/game-model-guard';\nimport { playerModelGuard } from '../guards/player/player-model-guard';\nimport { destroyCtaModelCommand } from './ad/cta/destroy-cta-model-command';\nimport { destroyHintModelCommand } from './ad/hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './ad/pcta/destroy-persistent-cta-model-command';\nimport { destroySoundModelCommand } from './ad/sound/destroy-sound-model-command';\nimport { destroyTutorialModelCommand } from './ad/tutorial/destroy-tutorial-model-command';\nimport { destroyGameModelCommand } from './game/destroy-game-model-command';\nimport { destroyPlayerModelCommand } from './player/destroy-player-model-command';\n\nexport function shutdownModelsCommand() {\n  lego.command\n    .guard(playerModelGuard)\n    .execute(destroyPlayerModelCommand)\n\n    .guard(gameModelGuard)\n    .execute(destroyGameModelCommand)\n\n    .guard(ctaModelGuard)\n    .execute(destroyCtaModelCommand)\n\n    .guard(soundParamGuard)\n    .execute(destroySoundModelCommand)\n\n    .guard(hintModelGuard)\n    .execute(destroyHintModelCommand)\n\n    .guard(tutorialModelGuard)\n    .execute(destroyTutorialModelCommand)\n\n    .guard(persistentCtaModelGuard)\n    .execute(destroyPersistentCtaModelCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { adLiveCommand } from './ad/ad-live-command';\nimport { adViewStateUpdateCommand } from './ad/ad-view-state-update-command';\nimport { ctaIdleTimeCommand } from './ad/cta/cta-idle-time-command';\nimport { ctaVisibleUpdateCommand } from './ad/cta/cta-visible-update-command';\nimport { initializeAdModelCommand } from './ad/initialize-ad-model-command';\nimport { setSoundStateCommand } from './ad/sound/set-sound-state-command';\nimport { initializeAnalyticsObservantCommand } from './observants/initialize-analytics-observant-command';\nimport { initializeSoundObservantCommand } from './observants/initialize-sound-observant-command';\nimport { initializeWrapperObservantCommand } from './observants/initialize-wrapper-observant-command';\nimport { resizeCommand } from './resize-command';\nimport { retryCommand } from './retry-command';\nimport { initializePhaserStatesCommand } from './states/initialize-phaser-states-command';\nimport { initializeNinePatchesCommand } from './view/initialize-ninepatches-command';\nimport { patchTextForLocalizationCommand } from './view/patch-text-for-localization-command';\nimport { userInteractionCommand } from './view/user-interaction-command';\n\nexport function startupCommand() {\n  lego.command\n\n    // .execute(addOverlayCommand)\n    .execute(patchTextForLocalizationCommand)\n    .execute(initializeNinePatchesCommand)\n    // .execute(initializeParticlesCommand)\n    .execute(initializeAdModelCommand)\n    .execute(initializePhaserStatesCommand)\n    .execute(initializeWrapperObservantCommand)\n    .execute(initializeAnalyticsObservantCommand)\n\n    .guard(soundParamGuard)\n    .execute(initializeSoundObservantCommand)\n\n    .on(ViewEvents.Ad.Live, adLiveCommand)\n    .on(ViewEvents.Game.Resize, resizeCommand)\n    .on(ViewEvents.Game.UserInteraction, userInteractionCommand)\n    .on(ViewEvents.GameState.CtaIdleTime, ctaIdleTimeCommand)\n    .on(ModelEvents.AdModel.ViewStateUpdate, adViewStateUpdateCommand)\n    .on(ViewEvents.SoundView.Click, setSoundStateCommand)\n    .on(ModelEvents.CtaModel.VisibleUpdate, ctaVisibleUpdateCommand)\n    .on(ViewEvents.CtaView.RetryClick, retryCommand);\n}\n","import { PhaserState } from '../../constants';\nimport { GameState } from '../../states/game-state';\nimport { PreloaderState } from '../../states/preloader-state';\n\nexport function initializePhaserStatesCommand() {\n  const { game, states } = CI_API;\n  // @ts-ignore\n  states.preloader = CI_API.game.state.add(PhaserState.Preload, PreloaderState, false);\n  // @ts-ignore\n  states.game = CI_API.game.state.add(PhaserState.Game, GameState, false);\n  game.state.start(PhaserState.Preload);\n}\n","export function restartGameStateCommand() {\n  CI_API.game.state.restart();\n}\n","import { PhaserState } from '../../constants';\n\nexport function startGameStateCommand() {\n  CI_API.game.state.start(PhaserState.Game);\n}\n","import { lego } from '@armathai/lego';\nimport { store } from '../../models/store';\nimport { clamp } from '../../utils/number/clamp';\nimport { setBetCommand } from '../player/set-bet-command';\n\nexport function betButtonClickCommand(value) {\n  const { game, player } = store;\n  const { bet } = player;\n  const { step, max, min } = game.slotMachine.config.bet;\n\n  const clamped = clamp(bet + value * step, min, max);\n  lego.command.payload(clamped).execute(setBetCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { GameStatus } from '../../../constants';\nimport { firstExtraSpinGuard } from '../../../guards/game/first-extra-spin-guard';\nimport { spinsToCtaGuard } from '../../../guards/game/spins-to-cta-guard';\nimport { itemsToCtaCompleteCommand } from '../../ad/cta/items-to-cta-complete-command';\nimport { idleSlotMachineCommand } from '../../game/machine/idle-slot-machine-command';\nimport { setGameStatusCommand } from '../../game/set-game-status-command';\n\nexport function effectsViewSpinResultAnimationCompleteCommand() {\n  lego.command\n    .guard(spinsToCtaGuard)\n    .execute(itemsToCtaCompleteCommand)\n\n    .payload(GameStatus.Reward)\n    .guard(firstExtraSpinGuard)\n    .execute(setGameStatusCommand)\n\n    .guard(not(spinsToCtaGuard), not(firstExtraSpinGuard))\n    .execute(idleSlotMachineCommand);\n}\n","import { NinePatchPlugin } from '@armathai/phaser2-ninepatch';\nimport { ninePatches } from '../../configs/ninepatch-configs';\n\nconst addNinePatch = config => {\n  const { key, data } = config;\n  CI_API.game.cache.addNinePatch(key, data);\n};\n\nexport function initializeNinePatchesCommand() {\n  const { game } = CI_API;\n  game.plugins.add(NinePatchPlugin);\n  ninePatches.forEach(ninePatch => addNinePatch(ninePatch));\n}\n","import { lego } from '@armathai/lego';\nimport { ReelState, SlotMachineState } from '../../../constants';\nimport { lastReelGuard } from '../../../guards/game/last-reel-guard';\nimport { setReelStateCommand } from '../../game/machine/reel/set-reel-state-command';\nimport { setSlotMachineStateCommand } from '../../game/machine/set-slot-machine-state-command';\n\nexport function reelSpeedDownCompleteCommand(uuid) {\n  lego.command\n    .payload(uuid, ReelState.Idle)\n    .execute(setReelStateCommand)\n\n    .payload(SlotMachineState.Action)\n    .guard(() => lastReelGuard(uuid))\n    .execute(setSlotMachineStateCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { ReelState, SlotMachineState } from '../../../constants';\nimport { lastReelGuard } from '../../../guards/game/last-reel-guard';\nimport { stopButtonGuard } from '../../../guards/game/stop-button-guard';\nimport { setReelStateCommand } from '../../game/machine/reel/set-reel-state-command';\nimport { setSlotMachineStateCommand } from '../../game/machine/set-slot-machine-state-command';\nimport { resetSlotsCommand } from '../../game/machine/slot/reset-slot-command';\nimport { stopSlotMachineCommand } from '../../game/machine/stop-slot-machine-command';\n\nexport function reelSpeedUpCompleteCommand(uuid) {\n  lego.command\n    .payload(true)\n    .execute(resetSlotsCommand)\n\n    .payload(uuid, ReelState.MaxSpeed)\n    .execute(setReelStateCommand)\n\n    .payload(SlotMachineState.MaxSpeed)\n    .guard(() => lastReelGuard(uuid))\n    .execute(setSlotMachineStateCommand)\n\n    .payload(uuid)\n    .guard(() => lastReelGuard(uuid), not(stopButtonGuard))\n    .execute(stopSlotMachineCommand);\n}\n","/* eslint-disable no-underscore-dangle */\nexport function patchTextForLocalizationCommand() {\n  localization.has = function has(str) {\n    return !!this._strings[str];\n  };\n\n  // @ts-ignore\n  if (delete Phaser.Text.prototype._text) {\n    const localize = (newValue, macros = undefined) => {\n      if (!localization.has(newValue)) {\n        throw Error(`\"${newValue}\" is not localized.`);\n      }\n      return localization.get(newValue, macros);\n    };\n\n    Object.defineProperty(Phaser.Text.prototype, '_text', {\n      get() {\n        return this.__text || '';\n      },\n\n      set(value) {\n        if (typeof value === 'object') {\n          const { text, macros, ignoreLocalization } = value;\n          if (ignoreLocalization) {\n            this.__text = text;\n            return;\n          }\n          this.__text = localize(text, macros);\n          return;\n        }\n\n        if (value.length === 0 || !value.trim()) {\n          this.__text = value;\n          return;\n        }\n\n        this.__text = localize(value);\n      },\n      configurable: true\n    });\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { updateHintStateCommand } from '../ad/hint/update-hint-state-command';\nimport { setLastInteractionCommand } from '../ad/set-last-interaction-command';\n\nexport function userInteractionCommand() {\n  lego.command\n    .payload(CI_API.game.time.totalElapsedSeconds())\n    .execute(setLastInteractionCommand)\n\n    .guard(hintModelGuard)\n    .execute(updateHintStateCommand);\n}\n","import { ASSETS } from '../constants';\n\nexport const Animations = {\n  Coin: {\n    Fall: 'fall'\n  }\n};\n\nexport function getCoinFallAnimationConfig() {\n  return {\n    key: ASSETS,\n    data: [\n      {\n        name: Animations.Coin.Fall,\n        prefix: 'animation/coin/coin-',\n        start: 0,\n        stop: 9,\n        suffix: '.png',\n        zeroPad: 0,\n        frameRate: 60,\n        loop: true\n      }\n    ]\n  };\n}\n","import { InputPriority } from '../constants';\nimport {\n  getBetMinusBtnDisableImageConfig,\n  getBetMinusBtnDownImageConfig,\n  getBetMinusBtnUpImageConfig,\n  getBetPlusBtnDisableImageConfig,\n  getBetPlusBtnDownImageConfig,\n  getBetPlusBtnUpImageConfig\n} from './image-configs';\nimport {\n  getCtaStyle1PlayButtonNinePatchConfig,\n  getPersistentCtaButtonNinePathConfig,\n  getSpinBtnDisableNinePatchConfig,\n  getSpinBtnDownNinePatchConfig,\n  getSpinBtnUpNinePatchConfig,\n  getStopBtnDisableNinePatchConfig,\n  getStopBtnDownNinePatchConfig,\n  getStopBtnUpNinePatchConfig\n} from './ninepatch-configs';\nimport {\n  getCtaStyle1PlayButtonTextConfig,\n  getFreeSpinBtnDisableCountTextConfig,\n  getFreeSpinBtnDisableTextConfig,\n  getFreeSpinBtnDownCountTextConfig,\n  getFreeSpinBtnDownTextConfig,\n  getFreeSpinBtnUpCountTextConfig,\n  getFreeSpinBtnUpTextConfig,\n  getPersistentCtaTextConfig,\n  getSpinBtnDisableTextConfig,\n  getSpinBtnDownTextConfig,\n  getSpinBtnUpTextConfig,\n  getStopBtnDisableTextConfig,\n  getStopBtnDownTextConfig,\n  getStopBtnUpTextConfig\n} from './text-configs';\n\n// SPIN\nexport function getFreeSpinButtonConfig() {\n  return {\n    input: {\n      name: 'spin_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getSpinBtnUpNinePatchConfig(),\n        count: getFreeSpinBtnUpCountTextConfig(),\n        label: getFreeSpinBtnUpTextConfig()\n      },\n      down: {\n        bg: getSpinBtnDownNinePatchConfig(),\n        count: getFreeSpinBtnDownCountTextConfig(),\n        label: getFreeSpinBtnDownTextConfig()\n      },\n      disable: {\n        bg: getSpinBtnDisableNinePatchConfig(),\n        count: getFreeSpinBtnDisableCountTextConfig(),\n        label: getFreeSpinBtnDisableTextConfig()\n      }\n    }\n  };\n}\n\nexport function getSpinButtonConfig() {\n  return {\n    input: {\n      name: 'spin_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getSpinBtnUpNinePatchConfig(),\n        label: getSpinBtnUpTextConfig()\n      },\n      down: {\n        bg: getSpinBtnDownNinePatchConfig(),\n        label: getSpinBtnDownTextConfig()\n      },\n      disable: {\n        bg: getSpinBtnDisableNinePatchConfig(),\n        label: getSpinBtnDisableTextConfig()\n      }\n    }\n  };\n}\n\nexport function getStopButtonConfig() {\n  return {\n    input: {\n      name: 'stop_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getStopBtnUpNinePatchConfig(),\n        label: getStopBtnUpTextConfig()\n      },\n      down: {\n        bg: getStopBtnDownNinePatchConfig(),\n        label: getStopBtnDownTextConfig()\n      },\n      disable: {\n        bg: getStopBtnDisableNinePatchConfig(),\n        label: getStopBtnDisableTextConfig()\n      }\n    }\n  };\n}\n\n// PERSISTENT CTA\nexport function getPersistentCtaButtonConfig() {\n  return {\n    input: {\n      name: 'persistent_cta_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getPersistentCtaButtonNinePathConfig(),\n        label: getPersistentCtaTextConfig()\n      }\n    }\n  };\n}\n\n// CTA\nexport function getCtaStyle1PlayButtonConfig() {\n  return {\n    input: {\n      name: 'cta_play_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getCtaStyle1PlayButtonNinePatchConfig(),\n        label: getCtaStyle1PlayButtonTextConfig()\n      }\n    }\n  };\n}\n\n// CONTROLS\nexport function getBetPlusButtonConfig() {\n  return {\n    input: {\n      name: 'bet_plus_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getBetPlusBtnUpImageConfig()\n      },\n      down: {\n        bg: getBetPlusBtnDownImageConfig()\n      },\n      disable: {\n        bg: getBetPlusBtnDisableImageConfig()\n      }\n    }\n  };\n}\n\nexport function getBetMinusButtonConfig() {\n  return {\n    input: {\n      name: 'bet_minus_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getBetMinusBtnUpImageConfig()\n      },\n      down: {\n        bg: getBetMinusBtnDownImageConfig()\n      },\n      disable: {\n        bg: getBetMinusBtnDisableImageConfig()\n      }\n    }\n  };\n}\n","import { getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig } from './grid/background-grid-configs';\nimport { getControlsGridLandscapeConfig, getControlsGridPortraitConfig } from './grid/controls-grid-configs';\nimport { getCTAStyle1GridLandscapeConfig, getCTAStyle1GridPortraitConfig } from './grid/cta-grid-configs';\nimport { getEffectsGridLandscapeConfig, getEffectsGridPortraitConfig } from './grid/effects-grid-configs';\nimport { getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig } from './grid/foreground-grid-configs';\nimport { getGameGridLandscapeConfig, getGameGridPortraitConfig } from './grid/game-grid-configs';\nimport { getMainGridLandscapeConfig, getMainGridPortraitConfig } from './grid/main-grid-configs';\nimport { getRewardGridLandscapeConfig, getRewardGridPortraitConfig } from './grid/reward-grid-configs';\nimport { getUIGridLandscapeConfig, getUIGridPortraitConfig } from './grid/ui-grid-configs';\n\nexport function getMainGridConfig() {\n  return LP(getMainGridLandscapeConfig, getMainGridPortraitConfig).call(null);\n}\n\nexport function getForegroundGridConfig() {\n  return LP(getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig).call(null);\n}\n\nexport function getRewardGridConfig() {\n  return LP(getRewardGridLandscapeConfig, getRewardGridPortraitConfig).call(null);\n}\n\nexport function getBackgroundGridConfig() {\n  return LP(getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig).call(null);\n}\n\nexport function getUIGridConfig() {\n  return LP(getUIGridLandscapeConfig, getUIGridPortraitConfig).call(null);\n}\n\nexport function getControlsGridConfig() {\n  return LP(getControlsGridLandscapeConfig, getControlsGridPortraitConfig).call(null);\n}\n\nexport function getGameGridConfig() {\n  return LP(getGameGridLandscapeConfig, getGameGridPortraitConfig).call(null);\n}\n\nexport function getCTAStyle1GridConfig() {\n  return LP(getCTAStyle1GridLandscapeConfig, getCTAStyle1GridPortraitConfig).call(null);\n}\n\nexport function getEffectsGridConfig() {\n  return LP(getEffectsGridLandscapeConfig, getEffectsGridPortraitConfig).call(null);\n}\n","import { CellScale } from '@armathai/phaser2-grid';\n\nexport function getBackgroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'bg',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Envelop\n      }\n    ]\n  };\n}\n\nexport function getBackgroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'bg',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Envelop\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\n\nexport function getControlsGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xff0000 },\n    name: 'controls',\n    cells: [\n      {\n        name: 'win_bet',\n        bounds: { x: 0.038, y: 0, width: 0.26, height: 1 }\n      },\n      {\n        name: 'spin',\n        bounds: { x: 0.72, y: 0.1, width: 0.16, height: 0.8 }\n      },\n      {\n        name: 'bg',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n\nexport function getControlsGridPortraitConfig() {\n  return {\n    // debug: { color: 0xff0000 },\n    name: 'controls',\n    cells: [\n      {\n        name: 'win_bet',\n        bounds: { x: 0.07, y: 0, width: 0.52, height: 0.8 }\n      },\n      {\n        name: 'spin',\n        bounds: { x: 0.58, y: 0, width: 0.4, height: 0.8 }\n      },\n      {\n        name: 'bg',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\n\nexport function getCTAStyle1GridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'popup',\n        bounds: { x: 0, y: 0.36, width: 1, height: 0.33 }\n      },\n      {\n        name: 'play_button',\n        bounds: { x: 0 }\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n\nexport function getCTAStyle1GridPortraitConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'popup',\n        bounds: { x: 0, y: 0.36, height: 0.24 }\n      },\n      {\n        name: 'play_button',\n        bounds: { x: 0, height: 0.2 }\n      },\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'blocker',\n        scale: CellScale.Fill\n      }\n    ]\n  };\n}\n","import { CellAlign, CellScale } from '@armathai/phaser2-grid';\n\nexport function getEffectsGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'effects',\n    cells: [\n      {\n        name: 'result',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        align: CellAlign.LeftTop,\n        scale: CellScale.None\n      }\n    ]\n  };\n}\n\nexport function getEffectsGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'effects',\n    cells: [\n      {\n        name: 'result',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        align: CellAlign.LeftTop,\n        scale: CellScale.None\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\n\nexport function getForegroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.03, width: 0.17, height: 0.12 },\n        align: CellAlign.LeftTop\n      },\n      {\n        name: 'sound',\n        bounds: { x: 0, width: 0.06, height: 0.1 },\n        align: CellAlign.LeftTop,\n        offset: { x: 60, y: 20 }\n      },\n      {\n        name: 'cta_logo',\n        bounds: { x: 0.3, y: 0.1, width: 0.4, height: 0.22 }\n      }\n    ]\n  };\n}\n\nexport function getForegroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0.2, y: 0.02, width: 0.6, height: 0.15 }\n      },\n      {\n        name: 'sound',\n        bounds: { x: 0, y: 0.08, width: 0.1, height: 0.05 },\n        align: CellAlign.LeftCenter,\n        offset: { x: 20 }\n      },\n      {\n        name: 'cta_logo',\n        bounds: { x: 0.2, y: 0.1, width: 0.6, height: 0.18 }\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\n\nexport function getGameGridLandscapeConfig() {\n  const offsetY = CI_API.Globals.PARAMS.cta_btn_persistent ? -56 : -42;\n\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'machine',\n        bounds: { x: 0.15, y: 0, width: 0.7, height: 1 },\n        offset: { y: offsetY },\n        scale: CellScale.None\n      }\n    ]\n  };\n}\n\nexport function getGameGridPortraitConfig() {\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'machine',\n        bounds: { x: 0, y: 0.32, width: 1, height: 0.36 },\n        padding: -0.052\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nexport function getMainGridLandscapeConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n\nexport function getMainGridPortraitConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nexport function getRewardGridLandscapeConfig() {\n  return {\n    bounds: getGameBounds(),\n    // debug: { color: 0x2fc900 },\n    name: 'reward',\n    cells: [\n      {\n        name: 'blocker',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Fill\n      },\n      {\n        name: 'popup',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      },\n      {\n        name: 'emitter',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.None\n      }\n    ]\n  };\n}\n\nexport function getRewardGridPortraitConfig() {\n  return {\n    bounds: getGameBounds(),\n    // debug: { color: 0x2fc900 },\n    name: 'reward',\n    cells: [\n      {\n        name: 'blocker',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.Fill\n      },\n      {\n        name: 'popup',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      },\n      {\n        name: 'emitter',\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        scale: CellScale.None\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nconst getBalanceHeight = () => {\n  return LP(Math.min(0.134, 86 / getGameBounds().height), Math.min(0.09, 100 / getGameBounds().height));\n};\n\nconst getFooterHeight = () => {\n  return LP(Math.min(0.19, 120 / getGameBounds().height), Math.min(0.158, 180 / getGameBounds().height));\n};\n\nexport function getUIGridLandscapeConfig() {\n  const footerH = getFooterHeight();\n  const footerY = 1 - footerH;\n\n  const balanceH = getBalanceHeight();\n  const balanceY = 0;\n\n  const pCtaH = 0.105;\n  const pCtaY = footerY - pCtaH;\n\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'balance',\n        bounds: { x: 0, y: balanceY, width: 1, height: balanceH },\n        align: CellAlign.CenterTop,\n        offset: { y: -24 }\n      },\n      {\n        name: 'footer',\n        bounds: { x: 0, width: 1, y: footerY }\n      },\n      {\n        name: 'p_cta',\n        bounds: { x: 0, y: pCtaY, width: 1, height: pCtaH },\n        padding: { height: 0.9 }\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0.3, width: 0.4, y: footerY },\n        padding: -0.03\n      }\n    ]\n  };\n}\n\nexport function getUIGridPortraitConfig() {\n  const footerH = getFooterHeight();\n  const footerY = 1 - footerH;\n\n  const balanceH = getBalanceHeight();\n  const balanceY = 1 - (footerH + balanceH);\n\n  const pCtaH = 0.09;\n  const pCtaY = balanceY - pCtaH;\n\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'balance',\n        bounds: { x: 0, y: balanceY, width: 1, height: balanceH },\n        align: CellAlign.CenterBottom,\n        offset: { y: 8 }\n      },\n      {\n        name: 'footer',\n        bounds: { x: 0, y: footerY, width: 1, height: footerH }\n      },\n      {\n        name: 'p_cta',\n        bounds: { x: 0, y: pCtaY, width: 1, height: pCtaH }\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0, y: 0.19, width: 1, height: 0.13 },\n        padding: -0.13\n      }\n    ]\n  };\n}\n","// MAIN\nexport function getCoinImageConfig() {\n  return {\n    frame: 'animation/coin/coin-0.png'\n  };\n}\n\n// BG\nexport function getBgImageConfig() {\n  return {\n    frame: 'bg/bg.jpg'\n  };\n}\n\n// LOGO\nexport function getLogoImageConfig() {\n  return {\n    frame: 'ui/logo.png'\n  };\n}\n\nexport function getLogoGlowConfig() {\n  return {\n    y: 60,\n    x: 10,\n    frame: 'ui/logo-glow.png'\n  };\n}\n\n// CTA\nexport function getCtaOrnamentImageConfig() {\n  return {\n    frame: 'cta/cta-ornament.png'\n  };\n}\n\n// REWARD\nexport function getRewardPopupBgImageConfig() {\n  return {\n    frame: 'reward/reward-bg-part.png'\n  };\n}\n\nexport function getRewardPopupFreeSpinBgImageConfig() {\n  return {\n    y: -200,\n    frame: 'reward/free-spin-bg.png'\n  };\n}\n\n// UI\nexport function getUiOrnamentImageConfig() {\n  return {\n    frame: 'ui/ornament-1.png'\n  };\n}\n\n// MACHINE\nexport function getSlotMachineBgImageConfig() {\n  return {\n    frame: 'slot/machine-bg.png',\n    anchor: { x: 0, y: 0 }\n  };\n}\n\n// CONTROLS\nexport function getBetPlusBtnUpImageConfig() {\n  return {\n    frame: 'ui/bet-plus-btn-up.png'\n  };\n}\n\nexport function getBetPlusBtnDownImageConfig() {\n  return {\n    frame: 'ui/bet-plus-btn-down.png'\n  };\n}\n\nexport function getBetPlusBtnDisableImageConfig() {\n  return {\n    frame: 'ui/bet-plus-btn-disable.png'\n  };\n}\n\nexport function getBetMinusBtnUpImageConfig() {\n  return {\n    frame: 'ui/bet-minus-btn-up.png'\n  };\n}\n\nexport function getBetMinusBtnDownImageConfig() {\n  return {\n    frame: 'ui/bet-minus-btn-down.png'\n  };\n}\n\nexport function getBetMinusBtnDisableImageConfig() {\n  return {\n    frame: 'ui/bet-minus-btn-disable.png'\n  };\n}\n\nexport function getWinBetOrnamentImageConfig() {\n  return {\n    frame: 'ui/ornament-2.png'\n  };\n}\n","import { ctaPreVisibleUpdateCommand } from '../commands/ad/cta/cta-previsible-update-command';\nimport { tutorialCompleteCommand } from '../commands/ad/tutorial/tutorial-complete-command';\nimport { tutorialScreenClickCommand } from '../commands/ad/tutorial/tutorial-screen-click-command';\nimport { tutorialSequenceViewCompleteCommand } from '../commands/ad/tutorial/tutorial-sequence-view-complete-command';\nimport { gameStatusUpdateCommand } from '../commands/game/game-status-update-command';\nimport { idleSlotMachineCommand } from '../commands/game/machine/idle-slot-machine-command';\nimport { slotMachineStateUpdateCommand } from '../commands/game/machine/slot-machine-state-update-command';\nimport { spinSlotMachineCommand } from '../commands/game/machine/spin-slot-machine-command';\nimport { stopSlotMachineCommand } from '../commands/game/machine/stop-slot-machine-command';\nimport { spinButtonActiveUpdateCommand } from '../commands/game/spin/spin-button-active-update-command';\nimport { betButtonClickCommand } from '../commands/view/bet-button-click-command';\n// eslint-disable-next-line max-len\nimport { effectsViewSpinResultAnimationCompleteCommand } from '../commands/view/effects/effects-view-spin-result-complete-command';\nimport { reelSpeedDownCompleteCommand } from '../commands/view/machine/reel-speed-down-complete-command';\nimport { reelSpeedUpCompleteCommand } from '../commands/view/machine/reel-speed-up-complete-command';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\n\nexport const legoLoggerConfig = Object.freeze({\n  debugGuards: true,\n  debugCommand: true,\n  debugEventArguments: true,\n  debugRedundantEventFlag: true,\n  debugEvents: true,\n  fontSize: 12,\n  excludedEvents: [''],\n  padding: 1,\n  fontFamily: 'Arial'\n});\n\nexport const playCommands = Object.freeze([\n  {\n    event: ModelEvents.TutorialModel.CompleteUpdate,\n    command: tutorialCompleteCommand\n  },\n  {\n    event: ViewEvents.TutorialView.ScreenClick,\n    command: tutorialScreenClickCommand\n  },\n  {\n    event: ViewEvents.TutorialView.SequenceHideComplete,\n    command: tutorialSequenceViewCompleteCommand\n  },\n  {\n    event: ModelEvents.CtaModel.PreVisibleUpdate,\n    command: ctaPreVisibleUpdateCommand\n  },\n  {\n    event: ViewEvents.SpinView.Spin,\n    command: spinSlotMachineCommand\n  },\n  {\n    event: ViewEvents.SpinView.Stop,\n    command: stopSlotMachineCommand\n  },\n  {\n    event: ViewEvents.SlotMachineView.Spin,\n    command: spinSlotMachineCommand\n  },\n  {\n    event: ViewEvents.BetView.ButtonClick,\n    command: betButtonClickCommand\n  },\n  {\n    event: ViewEvents.ReelView.SpeedUpComplete,\n    command: reelSpeedUpCompleteCommand\n  },\n  {\n    event: ViewEvents.ReelView.SpeedDownComplete,\n    command: reelSpeedDownCompleteCommand\n  },\n  {\n    event: ModelEvents.SlotMachineModel.StateUpdate,\n    command: slotMachineStateUpdateCommand\n  },\n  {\n    event: ModelEvents.SpinButtonModel.ActiveUpdate,\n    command: spinButtonActiveUpdateCommand\n  },\n  {\n    event: ViewEvents.EffectsView.SpinResultAnimationComplete,\n    command: effectsViewSpinResultAnimationCompleteCommand\n  },\n  {\n    event: ModelEvents.GameModel.StatusUpdate,\n    command: gameStatusUpdateCommand\n  },\n  {\n    event: ViewEvents.RewardView.HideComplete,\n    command: idleSlotMachineCommand\n  }\n]);\n","import { UNCOMPRESSED_ASSETS } from '../constants';\n\nconst persistentCta = 'ui/persistent-cta.png';\nconst ctaTitleBg = 'cta/cta-title-bg.png';\nconst ctaPlayBtn = 'cta/play-btn.png';\nconst tutorialBg = 'tutorial/tutorial-bg.png';\nconst balanceBg = 'ui/balance-bg.png';\nconst winBetBg = 'ui/bet-bg.png';\nconst spinBtnUp = 'ui/spin-btn-up.png';\nconst spinBtnDown = 'ui/spin-btn-down.png';\nconst spinBtnDisable = 'ui/spin-btn-disable.png';\nconst stopBtnUp = 'ui/stop-btn-up.png';\nconst stopBtnDown = 'ui/stop-btn-down.png';\n\n// PERSISTENT\nexport function getPersistentCtaButtonNinePathConfig() {\n  return {\n    width: 264,\n    height: 80,\n    frame: persistentCta\n  };\n}\n\n// CTA\nexport function getCtaStyle1PopupTitleBgPatchConfig() {\n  return {\n    width: 350,\n    height: 92,\n    frame: ctaTitleBg\n  };\n}\n\nexport function getCtaStyle1PlayButtonNinePatchConfig() {\n  return {\n    width: 420,\n    height: 210,\n    key: UNCOMPRESSED_ASSETS,\n    frame: ctaPlayBtn\n  };\n}\n\n// TUTORIAL\nexport function getTutorialBgImageConfig() {\n  return {\n    width: 550,\n    height: 184,\n    frame: tutorialBg\n  };\n}\n\n// BALANCE\nexport function getBalanceBgNinePatchConfig() {\n  return {\n    width: 470,\n    height: 94,\n    frame: balanceBg\n  };\n}\n\n// CONTROLS\nexport function getSpinBtnUpNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: spinBtnUp\n  };\n}\n\nexport function getSpinBtnDownNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: spinBtnDown\n  };\n}\n\nexport function getSpinBtnDisableNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: spinBtnDisable\n  };\n}\n\nexport function getStopBtnUpNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: stopBtnUp\n  };\n}\n\nexport function getStopBtnDownNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: stopBtnDown\n  };\n}\n\nexport function getStopBtnDisableNinePatchConfig() {\n  return {\n    width: 182,\n    height: 92,\n    key: UNCOMPRESSED_ASSETS,\n    frame: spinBtnDisable\n  };\n}\n\nexport function getWinBetBgNinePathConfig() {\n  return {\n    width: LP(300, 330),\n    height: 92,\n    frame: winBetBg\n  };\n}\n\nexport const ninePatches = [\n  {\n    key: persistentCta,\n    data: {\n      left: 62,\n      right: 62,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: ctaTitleBg,\n    data: {\n      left: 62,\n      right: 62,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: ctaPlayBtn,\n    data: {\n      left: 84,\n      right: 84,\n      top: 75,\n      bottom: 75\n    }\n  },\n  {\n    key: tutorialBg,\n    data: {\n      left: 70,\n      right: 70,\n      top: 80,\n      bottom: 80\n    }\n  },\n  {\n    key: balanceBg,\n    data: {\n      left: 90,\n      right: 90,\n      top: 0,\n      bottom: 0\n    }\n  },\n  {\n    key: spinBtnUp,\n    data: {\n      left: 67,\n      right: 67,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: spinBtnDown,\n    data: {\n      left: 67,\n      right: 67,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: spinBtnDisable,\n    data: {\n      left: 62,\n      right: 62,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: stopBtnUp,\n    data: {\n      left: 67,\n      right: 67,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: stopBtnDown,\n    data: {\n      left: 67,\n      right: 67,\n      top: 30,\n      bottom: 30\n    }\n  },\n  {\n    key: winBetBg,\n    data: {\n      left: 124,\n      right: 42,\n      top: 0,\n      bottom: 0\n    }\n  }\n];\n","import { CoinFallParticle } from '../utils/emitters/coin-fall/coin-fall-particle';\n\nexport function getCtaCoinEmitterConfig() {\n  return {\n    area: {\n      random: true,\n      shape: new Phaser.Line(-100, -100, CI_API.game.width + 100, -100)\n    },\n    repeat: true,\n    count: 70,\n    gravity: { x: 0, y: 5 },\n    scale: { min: 1, max: 1.3 },\n    rotation: { min: Math.PI, max: 2 * Math.PI },\n    delay: { min: 0, max: 3000 },\n    duration: { min: 3000, max: 3000 },\n    velocity: { x: { min: 0, max: 0 }, y: { min: 300, max: 700 } },\n    particleClass: CoinFallParticle\n  };\n}\n\nexport function getWinCoinEmitterConfig() {\n  return {\n    area: {\n      random: true,\n      shape: new Phaser.Line(-100, -100, CI_API.game.width + 100, -100)\n    },\n    count: 50,\n    repeat: false,\n    gravity: { x: 0, y: 5 },\n    scale: { min: 1, max: 1.3 },\n    rotation: { min: Math.PI, max: 2 * Math.PI },\n    delay: { min: 0, max: 1400 },\n    duration: { min: 2000, max: 2000 },\n    velocity: { x: { min: 0, max: 0 }, y: { min: 500, max: 1000 } },\n    particleClass: CoinFallParticle\n  };\n}\n\nexport const particles = [];\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\nfunction BackOut(k) {\n  // const s = 1.70158;\n  const s = 0.8;\n  return --k * k * ((s + 1) * k + s) + 1;\n}\n\nfunction BackIn(k) {\n  // const s = 1.70158;\n  const s = 0.4;\n  return k * k * ((s + 1) * k - s);\n}\n\nexport function getSlotMachineConfig() {\n  return {\n    slotOffset: -24,\n    clickable: true,\n    speed: 1.3,\n    bet: { step: 50000, max: 400000, min: 100000 },\n    prizeFactor: { regular: 10, big: 20, mega: 30 },\n    combinations: {\n      loose: [\n        [[0], [4], [1], [3], [5]],\n        [[3], [1], [4], [0], [8]]\n      ],\n      regular: [\n        [[0], [0], [0], [0], [0]],\n        [[1], [1], [1], [1], [1]],\n        [[2], [2], [2], [2], [2]],\n        [[3], [2], [2], [2], [3]],\n        [[1], [1], [1], [1], [2]],\n        [[2], [1], [1], [1], [1]],\n        [[], [0], [1], [2], []],\n        [[], [2], [1], [0], []]\n      ],\n      big: [[[], [1], [1], [1], []]],\n      mega: [[[0, 1, 2, 3], [1], [1], [1], [0, 1, 2, 3]]]\n    },\n    mask: [\n      { x: 38, y: 34 },\n      { x: 180, y: 34 },\n      { x: 180, y: 86 },\n      { x: 600, y: 86 },\n      { x: 600, y: 34 },\n      { x: 741, y: 34 },\n      { x: 741, y: 450 },\n      { x: 600, y: 450 },\n      { x: 600, y: 396 },\n      { x: 180, y: 396 },\n      { x: 180, y: 450 },\n      { x: 38, y: 450 }\n    ],\n    spinEasing: BackIn,\n    stopEasing: BackOut,\n    reelsSpinDelay: 0,\n    reelsStopDelay: 30,\n    reels: [\n      {\n        offset: { x: 1, y: 1 },\n        slots: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n      },\n      {\n        offset: { x: 0, y: 57 },\n        slots: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n      },\n      {\n        offset: { x: 0, y: 57 },\n        slots: [2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\n      },\n      {\n        offset: { x: 0, y: 57 },\n        slots: [2, 3, 4, 5, 6, 7, 8, 9, 0, 1]\n      },\n      {\n        offset: { x: 0, y: 3 },\n        slots: [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]\n      }\n    ],\n    winSlotTypes: {\n      mega: [8, 9],\n      big: [0],\n      regular: [1, 2, 3, 4, 5, 6, 7]\n    },\n    slotDimensions: [\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 },\n      { width: 152, height: 129 }\n    ]\n  };\n}\n","export const Spines = {\n  Frame: {\n    Key: 'frame',\n    Animations: {\n      Idle: 'animation'\n    }\n  },\n  Bracelet: {\n    Key: 'bracelet',\n    Animations: {\n      Idle: 'idle',\n      Action: 'action'\n    }\n  }\n};\n\n// export function getCardSpineConfig(x, y) {\n//   return {\n//     key: Spines.Card.Key,\n//     x,\n//     y\n//   };\n// }\n\nexport const SlotSpineMap = Object.freeze([\n  'free_spin',\n  'bracelet',\n  'symbol',\n  'shield',\n  'necklace',\n  'leaf',\n  'wild',\n  'crown',\n  'cleopatra',\n  'caesar'\n]);\n","import { FONT1, SpinStopMap } from '../constants';\n\n// CTA\nexport function getCtaStyle1PlayButtonTextConfig() {\n  return {\n    text: CI_API.Globals.PARAMS.cta_btn_text,\n    y: 2,\n    style: {\n      font: FONT1,\n      fontSize: 34,\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#174417',\n      strokeThickness: 2,\n      lineSpacing: -10,\n      shadow: {\n        x: 1,\n        y: 1,\n        color: '#153615',\n        blur: 4,\n        shadowStroke: true,\n        shadowFill: true\n      }\n    }\n  };\n}\n\nexport function getCtaStyle1PopupTitleTextConfig() {\n  return {\n    text: 'big_win',\n    y: 3,\n    style: {\n      font: FONT1,\n      fontSize: 52,\n      fontWeight: 900,\n      fill: '#ffffff',\n      stroke: '#012646',\n      strokeThickness: 4,\n      align: 'center'\n    }\n  };\n}\n\nexport function getCtaStyle1PopupSubtitleTextConfig() {\n  return {\n    x: 45,\n    text: {\n      text: ``,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 65,\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#012646',\n      strokeThickness: 6\n    }\n  };\n}\n\n// TUTORIAL\nexport function getTutorial1TextConfig() {\n  const { first_slot_auto, tutorial_text } = CI_API.Globals.PARAMS;\n  const text = first_slot_auto ? SpinStopMap[tutorial_text] : tutorial_text;\n\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: LP(30, 26),\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4,\n      align: 'center',\n      lineSpacing: -5,\n      wordWrap: true,\n      wordWrapWidth: 580\n    }\n  };\n}\n\nexport function getTutorial2TextConfig() {\n  return {\n    text: {\n      text: `tutorial_text_2`,\n      macros: { '{{0}}': CI_API.Globals.PARAMS.number_of_extra_spins },\n      ignoreLocalization: false,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: LP(40, 30),\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4,\n      wordWrap: true,\n      wordWrapWidth: 580\n    }\n  };\n}\n\n// REWARD\nexport function getRewardPopupCountTextConfig(text) {\n  return {\n    x: -2,\n    text: {\n      text: `${text}`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 72,\n      fontWeight: 900,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getRewardPopupTitleTextConfig() {\n  return {\n    x: 0,\n    y: 106,\n    text: 'free_spins',\n    style: {\n      font: FONT1,\n      fontSize: 46,\n      fontWeight: 900,\n      fill: '#ffffff',\n      align: 'center',\n      stroke: '#01d4ac',\n      strokeThickness: 4,\n      shadow: {\n        x: 1,\n        y: 1,\n        color: '#00f3b4',\n        blur: 4,\n        shadowStroke: true,\n        shadowFill: true\n      },\n      gradient: [\n        {\n          color: '#02a26e',\n          percent: 0\n        },\n        // {\n        //   color: '#00e9b3',\n        //   percent: 0.25\n        // },\n        {\n          color: '#00e9b3',\n          percent: 0.5\n        },\n        {\n          color: '#02a26e',\n          percent: 1\n        }\n      ],\n      wordWrap: true,\n      wordWrapWidth: 200,\n      lineSpacing: -12\n    }\n  };\n}\n\n// BALANCE\nexport function getBalanceLabelTextConfig(text) {\n  return {\n    text: {\n      text: `${text}`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    y: 8,\n    style: {\n      font: FONT1,\n      fontSize: 32,\n      fontWeight: 800,\n      fill: '#ffffff'\n    }\n  };\n}\n\n// SPIN\nfunction getSpinBtnTextConfigBase() {\n  return {\n    text: 'spin',\n    y: 2,\n    style: {\n      font: FONT1,\n      fontSize: 45,\n      fontWeight: 900,\n      fill: '#ffffff',\n      stroke: '#141420',\n      strokeThickness: 4\n    }\n  };\n}\n\nexport function getSpinBtnUpTextConfig() {\n  return getSpinBtnTextConfigBase();\n}\n\nexport function getSpinBtnDownTextConfig() {\n  const config = getSpinBtnTextConfigBase();\n  config.y = 4;\n\n  return config;\n}\n\nexport function getSpinBtnDisableTextConfig() {\n  const config = getSpinBtnTextConfigBase();\n  config.style.fill = '#dadada';\n  config.style.stroke = '#5e5e6c';\n\n  return config;\n}\n\nfunction getStopBtnTextConfigBase() {\n  return {\n    text: 'stop',\n    y: 2,\n    style: {\n      font: FONT1,\n      fontSize: 45,\n      fontWeight: 900,\n      fill: '#ffffff',\n      stroke: '#4c0505',\n      strokeThickness: 4\n    }\n  };\n}\n\nexport function getStopBtnUpTextConfig() {\n  return getStopBtnTextConfigBase();\n}\n\nexport function getStopBtnDownTextConfig() {\n  const config = getStopBtnTextConfigBase();\n  config.y = 4;\n\n  return config;\n}\n\nexport function getStopBtnDisableTextConfig() {\n  const config = getStopBtnTextConfigBase();\n  config.style.fill = '#dadada';\n  config.style.stroke = '#5e5e6c';\n\n  return config;\n}\n\nfunction getFreeSpinBtnTextConfigBase() {\n  return {\n    text: 'free_spins',\n    y: 2,\n    style: {\n      stroke: '#000a46',\n      strokeThickness: 4,\n      font: FONT1,\n      fontSize: 22,\n      fill: '#ffffff',\n      gradient: [\n        {\n          color: '#ffffff',\n          percent: 0\n        },\n        {\n          color: '#9e9e9e',\n          percent: 1\n        }\n      ]\n    }\n  };\n}\n\nexport function getFreeSpinBtnUpTextConfig() {\n  const config = getFreeSpinBtnTextConfigBase();\n\n  return config;\n}\n\nexport function getFreeSpinBtnDownTextConfig() {\n  const config = getFreeSpinBtnTextConfigBase();\n  config.y = 4;\n\n  return config;\n}\n\nexport function getFreeSpinBtnDisableTextConfig() {\n  const config = getFreeSpinBtnTextConfigBase();\n  config.style.fill = '#dadada';\n  config.style.stroke = '#5e5e6c';\n  return config;\n}\n\nexport function getFreeSpinBtnCountTextConfig() {\n  return {\n    text: {\n      text: ``,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      stroke: '#000a46',\n      strokeThickness: 4,\n      font: FONT1,\n      fontSize: 26,\n      fill: '#ffffff',\n      gradient: [\n        {\n          color: '#ffffff',\n          percent: 0\n        },\n        {\n          color: '#9e9e9e',\n          percent: 1\n        }\n      ]\n    }\n  };\n}\n\nexport function getFreeSpinBtnUpCountTextConfig() {\n  const config = getFreeSpinBtnCountTextConfig();\n\n  return config;\n}\n\nexport function getFreeSpinBtnDownCountTextConfig() {\n  const config = getFreeSpinBtnCountTextConfig();\n  config.y = 2;\n\n  return config;\n}\n\nexport function getFreeSpinBtnDisableCountTextConfig() {\n  const config = getFreeSpinBtnCountTextConfig();\n  config.style.fill = '#dadada';\n  config.style.stroke = '#5e5e6c';\n\n  return config;\n}\n\n// PERSISTENT\nexport function getPersistentCtaTextConfig() {\n  return {\n    text: 'cta_btn_persistent_text',\n    y: 1,\n    style: {\n      font: FONT1,\n      fontSize: 40,\n      fontWeight: 700,\n      fill: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 4,\n      shadow: {\n        x: 1,\n        y: 1,\n        color: '#c48eff',\n        blur: 8,\n        shadowStroke: true,\n        shadowFill: true\n      }\n    }\n  };\n}\n\n// CONTROLS\nexport function getWinLabelTextConfig() {\n  return {\n    text: 'win',\n    style: {\n      font: FONT1,\n      fontSize: 19,\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#00000c',\n      strokeThickness: 3,\n      gradient: [\n        {\n          color: '#f5b867',\n          percent: 0\n        },\n        {\n          color: '#bf6b11',\n          percent: 1\n        }\n      ]\n    }\n  };\n}\n\nexport function getWinTextConfig() {\n  return {\n    text: {\n      text: ``,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 22,\n      fontWeight: 600,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getBetLabelTextConfig() {\n  return {\n    text: 'bet',\n    style: {\n      font: FONT1,\n      fontSize: 19,\n      fontWeight: 800,\n      fill: '#ffffff',\n      stroke: '#00000c',\n      strokeThickness: 3,\n      gradient: [\n        {\n          color: '#f5b867',\n          percent: 0\n        },\n        {\n          color: '#bf6b11',\n          percent: 1\n        }\n      ]\n    }\n  };\n}\n\nexport function getBetTextConfig() {\n  return {\n    text: {\n      text: ``,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 22,\n      fontWeight: 600,\n      fill: '#ffffff'\n    }\n  };\n}\n","import { getTutorial1TextConfig, getTutorial2TextConfig } from './text-configs';\n\nexport function getTutorialConfig() {\n  return [\n    { text: getTutorial1TextConfig, duration: Infinity },\n    { text: getTutorial2TextConfig, duration: 4000 }\n  ];\n}\n","export const FONT1 = 'PTSerif-Regular';\n\nexport const ASSETS = 'assets_png';\nexport const UNCOMPRESSED_ASSETS = 'assets_png_unc_';\n\nexport const AdState = Object.freeze({\n  Ready: 'ready',\n  Live: 'live',\n  Idle: 'idle'\n});\n\nexport const AdStatus = Object.freeze({\n  Unknown: 'unknown',\n  Game: 'game',\n  PreCta: 'pre_cta',\n  Cta: 'cta',\n  Retry: 'retry',\n  Restart: 'restart'\n});\n\nexport const GameStatus = Object.freeze({\n  Unknown: 'unknown',\n  Slot: 'slot',\n  Reward: 'reward'\n});\n\nexport const PhaserState = Object.freeze({\n  Preload: 'PreloaderState',\n  Game: 'GameState'\n});\n\nexport const AdViewState = Object.freeze({\n  Unknown: 'unknown',\n  Init: 'Init',\n  Preload: 'Preload',\n  Create: 'Create',\n  ShutDown: 'ShutDown'\n});\n\nexport const SoundState = Object.freeze({\n  Unknown: 'unknown',\n  On: 'on',\n  Off: 'off'\n});\n\nexport const InputPriority = Object.freeze({\n  Game: 10,\n  Reward: 20,\n  Cta: 30,\n  Foreground: 40\n});\n\nexport const GameOverReasons = Object.freeze({\n  Unknown: 'unknown',\n  Idled: 'idled',\n  ItemsToCtaReached: 'items_to_cta_reached'\n});\n\nexport const SlotMachineState = Object.freeze({\n  Idle: 'idle',\n  Spin: 'spin',\n  MaxSpeed: 'max_speed',\n  Action: 'action',\n  Stop: 'stop'\n});\n\nexport const ReelState = Object.freeze({\n  Idle: 'idle',\n  Spin: 'spin',\n  MaxSpeed: 'max_speed',\n  Stop: 'stop'\n});\n\nexport const SlotState = Object.freeze({\n  Idle: 'idle',\n  Animation: 'animation'\n});\n\nexport const SpinResultType = Object.freeze({\n  Big: 'big',\n  Regular: 'regular',\n  Mega: 'mega',\n  Loose: 'loose'\n});\n\nexport const SpinBtnState = Object.freeze({\n  Spin: 'spin',\n  Stop: 'stop',\n  FreeSpin: 'free_spin'\n});\n\nexport const SpinStopMap = Object.freeze({\n  'Spin to earn your prize!': 'Stop to earn your prize!',\n  'Spin and test your luck!': 'Stop and test your luck!',\n  \"You're so close to the jackpot! Spin and test your luck!\": \"You're so close to the jackpot! Stop and test your luck!\"\n});\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\nimport Loader from 'webfontloader';\n\n/**\n * Fontloader ...\n *\n * @copyright CrossInstall 2018\n * @module FontLoader\n */\nconst FontLoader = {};\n\n/**\n * Non-web fonts: Provide local otf font file in /texture_sheets/ <br>\n * Provided font files must contain no spaces and avoid uppercase characters <br>\n *\n * @name fontsToLoad\n * @returns {object}\n */\nFontLoader.FONTS_TO_LOAD = {\n  families: ad_fonts_to_load ? ad_fonts_to_load.split(',') : []\n};\n\nFontLoader.TIMEOUT = 4000;\n\nFontLoader.LOADED_FONTS = [];\nFontLoader.FAILED_FONTS = [];\nFontLoader.AD_FONTS_READY = false;\n\n/**\n * - Inner Methods - <br> <br>\n * active - This event is triggered when the fonts have rendered <br>\n * inactive - This event is triggered when linked fonts is unsupported or no fonts could be loaded <br>\n * fontactive - This event is triggered once for each font that renders <br>\n * fontinactive - This event is triggered if the font can't be loaded <br>\n *\n * @name loadFonts\n * @param function callback\n * @function\n */\nFontLoader.loadFonts = function(callback) {\n  const fontConfig = {\n    custom: FontLoader.FONTS_TO_LOAD,\n\n    timeout: FontLoader.TIMEOUT,\n\n    active() {\n      if (document.readyState == 'complete') {\n        if (callback) callback();\n      } else {\n        window.addEventListener('load', function() {\n          if (callback) callback();\n        });\n      }\n      FontLoader.AD_FONTS_READY = true;\n\n      console.log(`Custom fonts loaded: ${FontLoader.LOADED_FONTS}`);\n    },\n    inactive() {\n      if (callback) callback();\n      if (FontLoader.FAILED_FONTS.length) console.warn(`One or more fonts failed to load: ${FontLoader.FAILED_FONTS}`);\n    },\n\n    fontactive(familyName) {\n      // This event is triggered once for each font that renders.\n      FontLoader.LOADED_FONTS[FontLoader.LOADED_FONTS.length] = familyName;\n\n      const newDiv = document.createElement('font-div');\n      newDiv.id = familyName;\n      newDiv.style.fontFamily = familyName;\n      newDiv.style.position = 'absolute';\n      newDiv.style.visibility = 'hidden';\n      newDiv.innerHTML = 'Hello world.';\n      document.body.appendChild(newDiv);\n    },\n    fontinactive(familyName, fvd) {\n      FontLoader.FAILED_FONTS[FontLoader.FAILED_FONTS.length] = familyName;\n      console.warn(`failed ${familyName} ${fvd}`);\n    }\n  };\n\n  /* Load with fontConfig */\n  Loader.load(fontConfig);\n};\n\nexport default FontLoader;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global CI_API, ad_orientation */\nimport LUG from './lu/layout-utils-general';\nimport LUC from './lu/layout-utils-compact';\n\n// Trigger to load old ('general') or 'compact' (with universal orientation support) Layout Utils\nconst useUniversalOrientation = true;\n\n// TODO Temporary disable handleOrientation methods\nconst disableIncorrectOrientationHandling = () => {\n  if (Utils.prototype.handleIncorrectOrientation) {\n    Utils.prototype.handleIncorrectOrientation = () => {};\n  }\n\n  if (Utils.prototype.handleCorrectOrientation) {\n    Utils.prototype.handleCorrectOrientation = () => {};\n  }\n};\n\nconst LU = useUniversalOrientation ? LUC : LUG;\n\nif (useUniversalOrientation) disableIncorrectOrientationHandling();\n\nexport default LU;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\nclass LayoutUtilsCompact {\n  constructor() {\n    this.CONTAINER_NAME = 'creative';\n  }\n\n  // Init method should be called only once, to avoid size check requestAnimationFrame duplicates,\n  // and other Phaser's properties refresh.\n  init(game, isUniversal = true) {\n    this.mGame = game;\n    this.mIsUniversal = isUniversal;\n    this.mHeaderNode = document.getElementById('ad_header') || { clientHeight: 0 };\n    this.mOrientationNode = document.getElementById('orientation') || { style: {} };\n    game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;\n\n    // If universal then override default LP method. New LP method checks real\n    // device orientation instead of getting it from 'ad_orientation' tag param.\n    if (isUniversal) {\n      window.LP = (landscape, portrait) => (window.innerWidth > window.innerHeight ? landscape : portrait);\n    }\n\n    this.sizeCheck();\n    this.refresh();\n  }\n\n  get isPortrait() {\n    return LP(false, true);\n  }\n\n  get isLandscape() {\n    return LP(true, false);\n  }\n\n  sizeCheck() {\n    const maxCheckTime = 750;\n    let startTime = null;\n\n    let tempWidth = 0;\n    let tempHeight = 0;\n    let handleId = null;\n\n    const check = timestamp => {\n      if (!startTime) startTime = timestamp;\n\n      if (tempWidth !== window.innerWidth || tempHeight !== window.innerHeight) {\n        this.refresh();\n        this.resizeCall(this.mGame.world);\n\n        tempWidth = window.innerWidth;\n        tempHeight = window.innerHeight;\n      }\n\n      if (timestamp - startTime < maxCheckTime) {\n        window.cancelAnimationFrame(handleId);\n        handleId = window.requestAnimationFrame(check);\n      }\n    };\n\n    window.cancelAnimationFrame(handleId);\n    handleId = window.requestAnimationFrame(check);\n\n    window.addEventListener('resize', e => {\n      startTime = null;\n      check(0);\n    });\n  }\n\n  // Recursively calls resize handler for each sprite in gameObject tree\n  resizeCall(gameObject) {\n    gameObject.handleResize && gameObject.handleResize(LP('landscape', 'portrait'));\n    gameObject.children.forEach(this.resizeCall, this);\n  }\n\n  refresh() {\n    const { mGame: game, mOrientationNode: orientationNode, mIsUniversal: isUniversal, mHeaderNode: headerNode } = this;\n\n    // Lets try to keep world within 960x640 range\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    const mw = LP((windowWidth * 640) / windowHeight, (windowWidth * 960) / windowHeight);\n    const mh = LP((windowHeight * 960) / windowWidth, (windowHeight * 640) / windowWidth);\n    const scaleFactor = Math.max(mw / windowWidth, mh / windowHeight);\n\n    const width = windowWidth * scaleFactor;\n    const height = windowHeight * scaleFactor;\n\n    // Notify phaser\n    game.scale.setGameSize(width, height);\n    game.scale.setUserScale(1 / scaleFactor, 1 / scaleFactor);\n    game.scale.refresh();\n\n    CI_API._orientationBlocker = null;\n    orientationNode.style.display = isUniversal || LP(width > height, width < height) ? 'none !important' : 'block';\n\n    // Refresh must be called at least once before read this property\n    // Also this property can return a zero in a feature\n    game.headerHeight = headerNode.clientHeight * scaleFactor;\n    // game.scaleFactor = this.scaleFactor = scaleFactor;\n\n    game.visibleHeight = height - game.headerHeight;\n  }\n\n  _throwError() {\n    throw new Error('Please, check do you really need to use multi-orientation layout-utils version');\n  }\n\n  refreshViewDimmensions() {\n    this._throwError();\n  }\n\n  getHeaderHeight() {\n    this._throwError();\n  }\n\n  fitIntoRect() {\n    this._throwError();\n  }\n\n  centerIntoView() {\n    this._throwError();\n  }\n}\n\nexport default new LayoutUtilsCompact();\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/**\n * @file A set of utils functions to work with multi-resolution.\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n */\n\nclass LayoutUtils {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n\n  static init(game) {\n    const state = game.state.states[game.state.current];\n\n    utils.scaleCreative();\n    utils.attachResizeListener(state);\n  }\n\n  static resizeCall() {\n    return null;\n  }\n\n  static getDevicePixelRatio() {\n    let ratio = 1;\n\n    if (\n      window.screen.systemXDPI !== undefined &&\n      window.screen.logicalXDPI !== undefined &&\n      window.screen.systemXDPI > window.screen.logicalXDPI\n    )\n      ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    else if (window.devicePixelRatio !== undefined) ratio = window.devicePixelRatio;\n\n    return ratio * LayoutUtils.RENDER_RESOLUTION;\n  }\n\n  static getHeaderHeight() {\n    return LayoutUtils.HEADER_ELEMENT.clientHeight * LayoutUtils.getDevicePixelRatio() * LayoutUtils.INVS;\n  }\n\n  static refreshViewDimmensions() {\n    LayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n    LayoutUtils.HEADER_ELEMENT = document.getElementById('ad_header');\n\n    LayoutUtils.VIEW_WIDTH = document.body.clientWidth * LayoutUtils.getDevicePixelRatio();\n    LayoutUtils.VIEW_HEIGHT = document.body.clientHeight * LayoutUtils.getDevicePixelRatio();\n\n    if (LayoutUtils.IS_LANDSCAPE) {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_WIDTH;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_HEIGHT;\n    } else {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_HEIGHT;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_WIDTH;\n    }\n\n    const scaleX = LayoutUtils.VIEW_WIDTH / LayoutUtils.BASE_WIDTH;\n    const scaleY = LayoutUtils.VIEW_HEIGHT / LayoutUtils.BASE_HEIGHT;\n\n    LayoutUtils.S = Math.min(scaleX, scaleY);\n    LayoutUtils.INVS = 1 / LayoutUtils.S;\n\n    LayoutUtils.LEFT_OFFSET =\n      -(LayoutUtils.VIEW_WIDTH / 2 - (LayoutUtils.BASE_WIDTH / 2) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.RIGHT_OFFSET = -LayoutUtils.LEFT_OFFSET + LayoutUtils.BASE_WIDTH;\n    LayoutUtils.TOP_OFFSET =\n      -(LayoutUtils.VIEW_HEIGHT / 2 - (LayoutUtils.BASE_HEIGHT / 2) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.BOTTOM_OFFSET = -LayoutUtils.TOP_OFFSET + LayoutUtils.BASE_HEIGHT;\n    LayoutUtils.FULL_GAME_WIDTH = LayoutUtils.RIGHT_OFFSET - LayoutUtils.LEFT_OFFSET;\n    LayoutUtils.FULL_GAME_HEIGHT = LayoutUtils.BOTTOM_OFFSET - LayoutUtils.TOP_OFFSET;\n\n    LayoutUtils.ASPECT_RATIO = Math.round((LayoutUtils.VIEW_HEIGHT / LayoutUtils.VIEW_WIDTH) * 100) / 100; // TODO: check landscape\n\n    // console.log('[' + LayoutUtils.MODULE_NAME + ']', 'orientation:', ad_orientation, 'view-size:', LayoutUtils.VIEW_SIZE, 'left-offset:', LayoutUtils.LEFT_OFFSET, 'right-offset:', LayoutUtils.RIGHT_OFFSET, 'top-offset:', LayoutUtils.TOP_OFFSET, 'bottom-offset:', LayoutUtils.BOTTOM_OFFSET, 'aspect:', LayoutUtils.ASPECT_RATIO);\n    LayoutUtils.fixCanvasSize(true);\n  }\n\n  static fixCanvasSize(r = true) {\n    if (r) {\n      setTimeout(function() {\n        LayoutUtils.fixCanvasSize(false);\n      }, 100);\n      return;\n    }\n\n    window.scrollTo(0, 1);\n  }\n\n  static centerIntoView(object) {\n    object.scale.set(LayoutUtils.S);\n    object.x = LayoutUtils.VIEW_WIDTH / 2 - (LayoutUtils.BASE_WIDTH / 2) * LayoutUtils.S;\n    object.y = LayoutUtils.VIEW_HEIGHT / 2 - (LayoutUtils.BASE_HEIGHT / 2) * LayoutUtils.S;\n  }\n\n  static fitIntoRect(sprite, bounds, fillRect, align, spriteBounds) {\n    const wD = spriteBounds ? spriteBounds.width / sprite.scale.x : sprite.width / sprite.scale.x;\n    const hD = spriteBounds ? spriteBounds.height / sprite.scale.y : sprite.height / sprite.scale.y;\n\n    const wR = bounds.width;\n    const hR = bounds.height;\n\n    const sX = wR / wD;\n    const sY = hR / hD;\n\n    const rD = wD / hD;\n    const rR = wR / hR;\n\n    const sH = fillRect ? sY : sX;\n    const sV = fillRect ? sX : sY;\n\n    const s = rD >= rR ? sH : sV;\n    const w = wD * s;\n    const h = hD * s;\n\n    let tX = 0.0;\n    let tY = 0.0;\n\n    switch (align) {\n      case 'left':\n      case 'topLeft':\n      case 'bottomLeft':\n        tX = 0.0;\n        break;\n\n      case 'right':\n      case 'topRight':\n      case 'bottomRight':\n        tX = w - wR;\n        break;\n\n      default:\n        tX = 0.5 * (w - wR);\n    }\n\n    switch (align) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        tY = 0.0;\n        break;\n\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        tY = h - hR;\n        break;\n\n      default:\n        tY = 0.5 * (h - hR);\n    }\n\n    sprite.x = bounds.x - tX;\n    sprite.y = bounds.y - tY;\n    sprite.scale.set(s);\n  }\n}\n\n// Hum hum! 1 = 1:1 to device size. 0.5 means 50% to device pixel density. Make it smaller only if you need to get few more FPS.\nLayoutUtils.RENDER_RESOLUTION = 1;\n\n// MR related\nLayoutUtils.CONTAINER_NAME = 'creative';\nLayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n\nLayoutUtils.DEFAULT_BASE_WIDTH = 960;\nLayoutUtils.DEFAULT_BASE_HEIGHT = 640;\n\nLayoutUtils.BASE_WIDTH = 960;\nLayoutUtils.BASE_HEIGHT = 640;\n\nLayoutUtils.ASPECT_RATIO = 0;\nLayoutUtils.S = 1; // SCALE\nLayoutUtils.INVS = 1 / LayoutUtils.S; // SCALE INVERTED\nLayoutUtils.VIEW_WIDTH = 0;\nLayoutUtils.VIEW_HEIGHT = 0;\n\nLayoutUtils.LEFT_OFFSET = 0;\nLayoutUtils.RIGHT_OFFSET = 0;\nLayoutUtils.TOP_OFFSET = 0;\nLayoutUtils.BOTTOM_OFFSET = 0;\n\nLayoutUtils.IS_LANDSCAPE = ad_orientation === 'landscape';\nLayoutUtils.IS_PORTRAIT = !LayoutUtils.IS_LANDSCAPE;\n\n// Fake\nLayoutUtils.MODULE_NAME = 'LayoutUtils';\nexport default LayoutUtils;\n","export const ModelEvents = Object.freeze({\n  AdModel: {\n    StatusUpdate: 'AdModelStatusUpdate',\n    ViewStateUpdate: 'AdModelViewStateUpdate',\n    LoadUpdate: 'AdModelLoadUpdate',\n    HintUpdate: 'AdModelHintUpdate',\n    TutorialUpdate: 'AdModelTutorialUpdate',\n    PersistentCtaUpdate: 'AdModelPersistentCtaUpdate',\n    CtaUpdate: 'AdModelCtaUpdate',\n    SoundUpdate: 'AdModelSoundUpdate'\n  },\n  CtaModel: {\n    ReasonUpdate: 'CtaModelReasonUpdate',\n    PreVisibleUpdate: 'CtaModelPreVisibleUpdate',\n    VisibleUpdate: 'CtaModelVisibleUpdate'\n  },\n  HintModel: {\n    VisibleUpdate: 'HintModelVisibleUpdate'\n  },\n  LoadModel: {\n    ProgressUpdate: 'LoadModelProgressUpdate',\n    CompleteUpdate: 'LoadModelCompleteUpdate'\n  },\n  SoundModel: {\n    StateUpdate: 'SoundModelStateUpdate',\n    IconUpdate: 'SoundModelIconUpdate'\n  },\n  TutorialModel: {\n    CompleteUpdate: 'TutorialModelCompleteUpdate',\n    SequencesUpdate: 'TutorialModelSequencesUpdate',\n    CurrentUpdate: 'TutorialModelCurrentUpdate'\n  },\n  TutorialSequenceModel: {\n    ConfigUpdate: 'TutorialSequenceModelConfigUpdate',\n    CompleteUpdate: 'TutorialSequenceModelCompleteUpdate'\n  },\n  GameModel: {\n    SlotMachineUpdate: 'GameModelSlotMachineUpdate',\n    SpinBtnUpdate: 'GameModelSpinBtnUpdate',\n    StatusUpdate: 'GameModelStatusUpdate'\n  },\n  ReelModel: {\n    ConfigUpdate: 'ReelModelConfigUpdate',\n    SlotsUpdate: 'ReelModelSlotsUpdate',\n    StateUpdate: 'ReelModelStateUpdate'\n  },\n  SlotMachineModel: {\n    ConfigUpdate: 'SlotMachineModelConfigUpdate',\n    ReelsUpdate: 'SlotMachineModelReelsUpdate',\n    StateUpdate: 'SlotMachineModelStateUpdate',\n    SpinResultUpdate: 'SlotMachineModelSpinResultUpdate',\n    SpinsCountUpdate: 'SlotMachineModelSpinsCountUpdate',\n    SpinsToCtaUpdate: 'SlotMachineModelSpinsToCtaUpdate'\n  },\n  SlotModel: {\n    TypeUpdate: 'SlotModelTypeUpdate',\n    StateUpdate: 'SlotModelStateUpdate'\n  },\n  SpinButtonModel: {\n    StateUpdate: 'SpinButtonModelStateUpdate',\n    ActiveUpdate: 'SpinButtonModelActiveUpdate'\n  },\n  ObservableModel: {\n    UuidUpdate: 'ObservableModelUuidUpdate'\n  },\n  PlayerModel: {\n    ProfitUpdate: 'PlayerModelProfitUpdate',\n    BalanceUpdate: 'PlayerModelBalanceUpdate',\n    BetUpdate: 'PlayerModelBetUpdate'\n  },\n  Store: {\n    AdUpdate: 'StoreAdUpdate',\n    PlayerUpdate: 'StorePlayerUpdate',\n    GameUpdate: 'StoreGameUpdate'\n  }\n});\n","export const ViewEvents = Object.freeze({\n  Ad: {\n    Live: 'AdLive'\n  },\n  Game: {\n    Resize: 'GameResize',\n    UserInteraction: 'UserInteraction',\n    CtaIdleTime: 'CtaIdleTime'\n  },\n  GameState: {\n    CtaIdleTime: 'GameStateCtaIdleTime'\n  },\n  SoundView: {\n    Click: 'SoundViewClick'\n  },\n  TutorialView: {\n    ScreenClick: 'TutorialViewScreenClick',\n    SequenceHideComplete: 'TutorialViewSequenceHideComplete'\n  },\n  PersistentCtaView: {\n    Click: 'PersistentCtaViewClick'\n  },\n  CtaView: {\n    ScreenClick: 'CtaViewScreenClick',\n    PlayClick: 'CtaViewPlayClick',\n    RetryClick: 'CtaViewRetryClick',\n    ScoreTweenStart: 'CtaViewScoreTweenStart',\n    ScoreTweenComplete: 'CtaViewScoreTweenComplete'\n  },\n  SlotMachineView: {\n    Ready: 'SlotMachineViewReady',\n    Spin: 'SlotMachineViewSpin',\n    LooseStateHandled: 'SlotMachineViewLooseStateHandled'\n  },\n  ReelView: {\n    SpeedUpComplete: 'ReelViewSpeedUpComplete',\n    SpeedDownComplete: 'ReelViewSpeedDownComplete'\n  },\n  RewardView: {\n    HideComplete: 'RewardViewHideComplete',\n    ShowStart: 'RewardViewShowStart'\n  },\n  EffectsView: {\n    SpinResultAnimationStart: 'EffectsViewSpinResultAnimationStart',\n    SpinResultAnimationComplete: 'EffectsViewSpinResultAnimationComplete'\n  },\n  SpinView: {\n    Spin: 'SpinViewSpin',\n    Stop: 'SpinViewStop'\n  },\n  WinView: {\n    ScoreTweenStart: 'WinViewScoreTweenStart',\n    ScoreTweenComplete: 'WinViewScoreTweenComplete'\n  },\n  BetView: {\n    ButtonClick: 'BetViewButtonClick'\n  }\n});\n","import { AdState } from '../../constants';\n\nexport function adLiveGuard() {\n  return ad_state === AdState.Live;\n}\n","export function asecGuard() {\n  return ad_exchange === 'tapjoy' && window.TJ_API && window.TJ_API.directives && !window.TJ_API.directives.showEndCard;\n}\n","import { store } from '../../models/store';\n\nexport function ctaModelGuard() {\n  return store.ad.cta;\n}\n","import { store } from '../../models/store';\n\nexport function ctaPreVisibleGuard() {\n  return store.ad.cta.preVisible;\n}\n","import { store } from '../../models/store';\n\nexport function ctaVisibleGuard() {\n  return store.ad.cta.visible;\n}\n","import { store } from '../../models/store';\n\nexport function hintModelGuard() {\n  return store.ad.hint;\n}\n","export function hintParamGuard() {\n  return CI_API.Globals.PARAMS.hint;\n}\n","import { store } from '../../models/store';\n\nexport function persistentCtaModelGuard() {\n  return store.ad.persistentCta;\n}\n","export function persistentCtaParamGuard() {\n  return CI_API.Globals.PARAMS.cta_btn_persistent;\n}\n","export function soundParamGuard() {\n  return CI_API.Globals.PARAMS.sound;\n}\n","import { store } from '../../models/store';\n\nexport function tutorialModelGuard() {\n  return store.ad.tutorial;\n}\n","export function tutorialParamGuard() {\n  return CI_API.Globals.PARAMS.tutorial;\n}\n","import { store } from '../../models/store';\n\nexport function autoSpinGuard() {\n  const { first_slot_auto, extra_spin_auto, first_slot_spins } = CI_API.Globals.PARAMS;\n  const { spinsCount } = store.game.slotMachine;\n\n  if (first_slot_auto && spinsCount < first_slot_spins) {\n    return true;\n  }\n\n  if (extra_spin_auto && spinsCount >= first_slot_spins) {\n    return true;\n  }\n\n  return false;\n}\n","import { store } from '../../models/store';\n\nexport function extraSpinsGuard() {\n  const { first_slot_spins } = CI_API.Globals.PARAMS;\n  const { spinsCount } = store.game.slotMachine;\n\n  return spinsCount >= first_slot_spins;\n}\n","import { store } from '../../models/store';\n\nexport function firstExtraSpinGuard() {\n  const { first_slot_spins, number_of_extra_spins } = CI_API.Globals.PARAMS;\n  const { spinsCount } = store.game.slotMachine;\n\n  return number_of_extra_spins && first_slot_spins === spinsCount;\n}\n","import { store } from '../../models/store';\n\nexport function firstSpinGuard() {\n  return store.game.slotMachine.spinsCount === 0;\n}\n","import { store } from '../../models/store';\n\nexport function gameModelGuard() {\n  return store.game;\n}\n","import { GameStatus } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function gameStatusSlotGuard() {\n  return store.game.status === GameStatus.Slot;\n}\n","import { store } from '../../models/store';\n\nexport function lastReelGuard(uuid) {\n  return store.game.slotMachine.isLastReel(uuid);\n}\n","import { store } from '../../models/store';\n\nexport function lastTutorialGuard() {\n  return store.ad.tutorial.sequences.length === 0;\n}\n","import { store } from '../../models/store';\n\nexport function spinBtnActiveGuard() {\n  return store.game.spinBtn.active;\n}\n","import { store } from '../../models/store';\n\nexport function spinsToCtaGuard() {\n  return store.game.slotMachine.isLastSpin();\n}\n","import { store } from '../../models/store';\n\nexport function stopButtonGuard() {\n  const { first_slot_spins, first_slot_auto } = CI_API.Globals.PARAMS;\n  const { spinsCount } = store.game.slotMachine;\n\n  return first_slot_auto && spinsCount <= first_slot_spins;\n}\n","import { store } from '../../models/store';\n\nexport function playerModelGuard() {\n  return store.player;\n}\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global Phaser, imageLoader, embedded */\n\n(() => {\n  // Decorate Phaser Render\n  const { generateTilingTexture } = Phaser.TileSprite.prototype;\n  const renderCanvas = Phaser.Sprite.prototype._renderCanvas;\n  const matrixPool = [];\n  const rectPool = [];\n  const scalePool = {};\n\n  const scaleJson = json => {\n    const { frames } = json;\n\n    for (const name in frames) {\n      if (!Object.prototype.hasOwnProperty.call(frames, name) || !frames[name].frame) continue;\n      const frame = frames[name];\n      const scale = getScale(json, name);\n\n      frame.frame.x /= scale;\n      frame.frame.y /= scale;\n      frame.frame.w /= scale;\n      frame.frame.h /= scale;\n      frame.spriteSourceSize.x /= scale;\n      frame.spriteSourceSize.y /= scale;\n      frame.spriteSourceSize.w /= scale;\n      frame.spriteSourceSize.h /= scale;\n      frame.sourceSize.w /= scale;\n      frame.sourceSize.h /= scale;\n    }\n  };\n\n  // Normalize scale for all embedded atlas jsons\n  const scaleAllJsons = () => {\n    for (const embeddedKey in embedded) {\n      const json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        scaleJson(json_data);\n      }\n    }\n  };\n\n  // Return sprite independent scale\n  const getScale = (jsonData, frameName) => {\n    if (scalePool[frameName]) {\n      return scalePool[frameName];\n    }\n\n    let scale = 1;\n    if (jsonData && jsonData.frames && jsonData.frames[frameName] && jsonData.frames[frameName].scale) {\n      scale = jsonData.frames[frameName].scale;\n    }\n\n    scalePool[frameName] = scale;\n    return scale;\n  };\n\n  const multiply = (rect, sc) => {\n    rect.x *= sc;\n    rect.y *= sc;\n    rect.width *= sc;\n    rect.height *= sc;\n  };\n\n  Phaser.Sprite.prototype._renderCanvas = function(renderSession, matrix) {\n    if (\n      !this.visible ||\n      this.alpha === 0 ||\n      !this.renderable ||\n      this.texture.crop.width <= 0 ||\n      this.texture.crop.height <= 0\n    )\n      return;\n\n    const { texture } = this;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (matrixPool.pop() || new Phaser.Matrix()).setTo(wt.a / sc, wt.b / sc, wt.c / sc, wt.d / sc, wt.tx, wt.ty);\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n\n    renderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    rectPool.push(crop, trim);\n    matrixPool.push(m);\n  };\n\n  Phaser.TileSprite.prototype.generateTilingTexture = function(forcePowerOfTwo) {\n    if (!this.texture.baseTexture.hasLoaded) return;\n\n    const { texture } = this;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n\n    multiply(texture.crop, sc);\n    generateTilingTexture.call(this, forcePowerOfTwo);\n    crop.copyTo(texture.crop);\n    rectPool.push(crop);\n  };\n\n  const imageRenderCanvas = Phaser.Button.prototype._renderCanvas;\n  const imageMatrixPool = [];\n  const imageRectPool = [];\n\n  Phaser.Button.prototype._renderCanvas = function(renderSession, matrix) {\n    if (\n      !this.visible ||\n      this.alpha === 0 ||\n      !this.renderable ||\n      this.texture.crop.width <= 0 ||\n      this.texture.crop.height <= 0\n    )\n      return;\n\n    const { texture } = this;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (imageMatrixPool.pop() || new Phaser.Matrix()).setTo(\n      wt.a / sc,\n      wt.b / sc,\n      wt.c / sc,\n      wt.d / sc,\n      wt.tx,\n      wt.ty\n    );\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n    imageRenderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    imageRectPool.push(crop, trim);\n    imageMatrixPool.push(m);\n  };\n\n  // Override Spine.createSprite method for supporting independent asset scaling\n  const overrideSpineLibrary = function() {\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {}\n\n    if (spineLibraryAdded) {\n      PhaserSpine.Spine.prototype.createSprite = function(slot, attachment) {\n        const descriptor = attachment.rendererObject;\n        const baseTexture = descriptor.page.rendererObject;\n        const spriteRect = new PIXI.Rectangle(\n          descriptor.x,\n          descriptor.y,\n          descriptor.rotate ? descriptor.height : descriptor.width,\n          descriptor.rotate ? descriptor.width : descriptor.height\n        );\n\n        // Get asset scale and adjust it to the sprite rect\n        const sc = getScale(null, `${descriptor.name}.png`) || 1;\n        multiply(spriteRect, sc);\n\n        const spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n\n        const sprite = new Phaser.Sprite(this.game, 0, 0, spriteTexture);\n        const baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n\n        // Divide on asset scale to get the original sprite size\n        sprite.scale.x = attachment.scaleX / this.imageScale / sc;\n        sprite.scale.y = attachment.scaleY / this.imageScale / sc;\n        sprite.rotation = baseRotation;\n        sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n        sprite.anchor.y = (0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height;\n        sprite.alpha = attachment.a;\n        if (descriptor.rotate) {\n          const x1 = sprite.scale.x;\n          sprite.scale.x = sprite.scale.y;\n          sprite.scale.y = x1;\n        }\n        slot.sprites = slot.sprites || {};\n        slot.sprites[descriptor.name] = sprite;\n        return sprite;\n      };\n    }\n  };\n\n  scaleAllJsons();\n  overrideSpineLibrary();\n})();\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global ad_webroot, ad_name, utils, embedded */\n\n/**\n * Stores game variables and static constants.\n *\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n * @module Global\n */\nexport default class Globals {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n}\n\n/**\n * Globals verbose is a required variable, default true\n * @type {boolean}\n * @name verbose\n */\nGlobals.VERBOSE = true;\nGlobals.WEB_ROOT = `${ad_webroot}/${ad_name}`;\nGlobals.LAST_INTERACTION_TIME = 0;\nGlobals.PARAMS = utils.getAdParameters(embedded.params);\nGlobals.RETRIES_NUMBER = Globals.PARAMS.retries;\n\nGlobals.VICTORY = 1;\nGlobals.DEFEAT = 0;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* jshint -W083 */\n/* eslint no-prototype-builtins: \"error\" */\n\n/* global Phaser, imageLoader, ad_webroot, ad_name, xp, spine, embedded, ad_assets_path */\n\n/**\n * Multi-Atlas support library\n *\n * This library allows to use multiple atlases in Phaser 2.x without carrying about\n * collecting all animations, Spriter, Spine assets in one atlas\n *\n * This library is universal. For using just import this file in the preloader state\n */\n\n/**\n * Override Phaser Phaser.AnimationManager.add and Phaser.Animation.updateCurrentFrame methods\n * Looking through the all added atlases for finding needed frame by name\n * If the current sprite FrameData used another atlas LoadTexture method calls\n * It the only one method to replace the base texture entirely\n */\nconst overridePhaserAnimation = function() {\n  Phaser.AnimationManager.prototype.add = function(name, frames, frameRate, loop) {\n    frames = frames || [];\n    frameRate = frameRate || 60;\n\n    if (loop === undefined) {\n      loop = false;\n    }\n\n    // Gather animation frames data from all cached atlases for all animation frameNames\n    const framesInfo = [];\n    let framesCount = frames.length;\n\n    // Creating new FrameData with only used frames in the current animation\n    let animationFrameData = null;\n\n    while (framesCount--) {\n      const frameName = frames[framesCount];\n      const cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n      let keyCount = cacheKeys.length;\n\n      while (keyCount--) {\n        const cacheKey = cacheKeys[keyCount];\n        const frameData = this.game.cache.getFrameData(cacheKey);\n        const frame = frameData.getFrameByName(frameName);\n\n        if (frameData && frame && frames.indexOf(frameName) !== -1) {\n          if (!animationFrameData) {\n            animationFrameData = new Phaser.FrameData();\n            for (let i = 0; i < frames.length; i++) {\n              animationFrameData.addFrame(frames[i]);\n            }\n          }\n\n          framesInfo.push({\n            frameName,\n            atlasName: cacheKey,\n            frameData: animationFrameData,\n            frame\n          });\n        }\n      }\n    }\n\n    framesInfo.reverse();\n    if (framesInfo.length === 0) {\n      console.warn(\"Animation wasn't created. Please, make sure that you add at least one existing sprite name\");\n      return;\n    }\n    // Set Frame Data form the firs exist frame\n    this._frameData = framesInfo[0].frameData;\n    this._anims[name] = new Phaser.Animation(\n      this.game,\n      this.sprite,\n      name,\n      this._frameData,\n      framesInfo,\n      frameRate,\n      loop\n    );\n\n    if (this.sprite.tilingTexture) {\n      this.sprite.refreshTexture = true;\n    }\n\n    return this._anims[name];\n  };\n\n  Phaser.Animation.prototype.updateCurrentFrame = function(signalUpdate, fromPlay) {\n    if (fromPlay === undefined) {\n      fromPlay = false;\n    }\n\n    if (!this._frameData) {\n      // The animation is already destroyed, probably from a callback\n      return false;\n    }\n\n    //  Previous index\n    // return false if there's no current Frame\n    const idx = this.currentFrame ? this.currentFrame.index : false;\n\n    // Update frameData\n    const frameInfo = this._frames[this._frameIndex];\n    this._frameData = frameInfo.frameData;\n    this.currentFrame = frameInfo.frame;\n\n    if (\n      this.currentFrame &&\n      (fromPlay || (!fromPlay && !(idx === this.currentFrame.index && this._parent.key === frameInfo.atlasName)))\n    ) {\n      // Here call loadTexture if current FrameData used another base Texture Atlas\n      if (this._parent.key !== frameInfo.atlasName) {\n        this._parent.loadTexture(frameInfo.atlasName, frameInfo.frameName, false);\n      } else {\n        this._parent.setFrame(this.currentFrame);\n      }\n    }\n\n    if (this.onUpdate && signalUpdate) {\n      this.onUpdate.dispatch(this, this.currentFrame);\n\n      // False if the animation was destroyed from within a callback\n      return !!this._frameData;\n    }\n    return true;\n  };\n\n  /**\n   * Override Phaser.Animation.update currentFrame set values\n   * for taking needed texture on the first loop frame\n   */\n  const animationUpdate = Phaser.Animation.prototype.update;\n\n  Phaser.Animation.prototype.update = function() {\n    const currentFrameTmp = this.currentFrame;\n\n    let result = animationUpdate.call(this);\n\n    if (!this.currentFrame || (currentFrameTmp && currentFrameTmp.name !== this.currentFrame.name)) {\n      this.currentFrame = this._frames[this._frameIndex].frame;\n\n      if (this.currentFrame) {\n        this._parent.setFrame(this.currentFrame);\n      }\n\n      if (this.onUpdate) {\n        this.onUpdate.dispatch(this, this.currentFrame);\n\n        // False if the animation was destroyed from within a callback\n        result = !!this._frameData;\n      } else {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n};\n\n/**\n * Next three methods allows calling Phaser.TileSprite, Phaser.Sprite and Emitter.MakeParticles without atlas key parameter or use any string as atlas name.\n * As multiple-atlas support cares about taking texture frame data from the right atlas name, these properties aren't useful now.\n */\nconst fakeTileSpriteAtlasName = 'tileSpriteFakeAtlas';\nconst fakeSpriteAtlasName = 'spriteFakeAtlas';\nconst fakeEmitterAtlasName = 'emitterFakeAtlas';\n\nconst overridePhaserTileSprite = function() {\n  const tileSprite = Phaser.TileSprite;\n  Phaser.TileSprite = function(game, x, y, width, height, key, frame) {\n    if (key && !frame) frame = key;\n\n    tileSprite.call(this, game, x, y, width, height, fakeTileSpriteAtlasName, frame);\n  };\n\n  Phaser.TileSprite = Object.assign(Phaser.TileSprite, tileSprite);\n  Phaser.TileSprite.prototype = tileSprite.prototype;\n};\n\nconst overridePhaserSprite = function() {\n  Phaser.Component.Core.init = function(game, x, y, key, frame) {\n    if (!Phaser.Component.Core.skipTypeChecks) {\n      if (!(game instanceof Phaser.Game)) {\n        throw new Error(`The value passed as the \\`game\\` argument (${game}) is not an instance of Phaser.Game.`);\n      }\n\n      if (typeof x !== 'number') {\n        console.warn('The `x` argument value (%s) should be a number.', x);\n        x = 0; // This would be done implicitly in position.set().\n      }\n\n      if (typeof y !== 'number') {\n        console.warn('The `y` argument value (%s) should be a number.', y);\n        y = 0; // This would be done implicitly in position.set().\n      }\n    }\n\n    this.game = game;\n    this.key = key;\n    this.data = {};\n\n    this.position.set(x, y);\n    this.world = new Phaser.Point(x, y);\n    this.previousPosition = new Phaser.Point(x, y);\n\n    this.events = new Phaser.Events(this);\n\n    this._bounds = new Phaser.Rectangle();\n\n    if (this.components.PhysicsBody) {\n      // Enable-body checks for hasOwnProperty; makes sure to lift property from prototype.\n      this.body = this.body;\n    }\n\n    if (this.components.Animation) {\n      this.animations = new Phaser.AnimationManager(this);\n    }\n\n    if (this.components.LoadTexture && key !== null) {\n      if (!frame && typeof key === 'string') {\n        frame = key;\n        key = fakeSpriteAtlasName;\n      }\n      this.loadTexture(key, frame);\n    }\n\n    if (this.components.FixedToCamera) {\n      this.cameraOffset = new Phaser.Point(x, y);\n    }\n  };\n};\n\nconst overridePhaserMakeParticle = function() {\n  if (!Phaser.Particles.Arcade) return;\n\n  const mp = Phaser.Particles.Arcade.Emitter.prototype.makeParticles;\n\n  Phaser.Particles.Arcade.Emitter.prototype.makeParticles = function(...args) {\n    if (typeof args[0] === 'string' && (typeof args[1] === 'string' || Array.isArray(args[1]))) {\n      args.splice(0, 1);\n      return mp.call(this, fakeEmitterAtlasName, ...args);\n    }\n    return mp.call(this, fakeEmitterAtlasName, ...args);\n  };\n};\n\n/**\n * Override spine.Atlas function\n * Adding all available atlases so, Spine can looking thorough the all resources for needed attachment assets\n */\nconst overrideSpineLibrary = function() {\n  // check if Spine using in the current project\n  let spineLibraryAdded = false;\n  try {\n    spineLibraryAdded = spine || null;\n  } catch (e) {}\n\n  if (spineLibraryAdded) {\n    // Override spine.Atlas\n    const spineAtlas = spine.Atlas;\n\n    spine.Atlas = function(json_data, textureLoader) {\n      // call spineAtlas for all added atlases and collect all results\n      let pages = [];\n      let regions = [];\n\n      // Check for exist atlases from embedded atlas jsons data\n      const embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        const embeddedKey = embeddedKeys[keyCount];\n        json_data = embedded[embeddedKey];\n\n        if (!json_data.meta && !json_data.frames) continue;\n\n        spineAtlas.call(this, json_data, textureLoader);\n\n        pages = pages.concat(this.pages);\n        regions = regions.concat(this.regions);\n      }\n\n      this.pages = pages;\n      this.regions = regions;\n    };\n\n    spine.Atlas = Object.assign(spine.Atlas, spineAtlas);\n    spine.Atlas.prototype = spineAtlas.prototype;\n  }\n};\n\n/**\n * Replace frame name key from xp-assets.json data\n * Used only for preview build\n * @param key\n * @returns {*|string}\n */\nconst replaceKey = function(key) {\n  if (xp._assetData.production) return key;\n  const assetsData = xp._assetData.images;\n  for (const category in assetsData) {\n    const imageData = assetsData[category];\n    if (key === imageData.default.replace(/.*(assets\\/)/, '')) {\n      if (!imageData.active || imageData.active === '') return key;\n      const libPrefix = imageData.active.replace(/\\/(.*)/, '');\n      key = `${libPrefix}/${category}/${imageData.active.replace(/.*([\\\\/])/, '')}`;\n    }\n  }\n  return key;\n};\n\n/**\n * Override Phaser.AnimationManager.frameName property\n * This allows to call LoadTexture method to change base sprite texture Atlas, if current atlas doesn't contain needed frameData.\n */\nconst overridePhaserFrameName = function() {\n  const animationManager = Object.create(Phaser.AnimationManager.prototype);\n\n  Object.defineProperty(animationManager, 'frameName', {\n    get() {\n      if (this.currentFrame) {\n        return this.currentFrame.name;\n      }\n      return null;\n    },\n\n    set(value) {\n      let gotFrame;\n\n      // replace frame name form xp-assets.json Needed only for preview mode\n      value = replaceKey(value);\n\n      if (typeof value === 'string' && this._frameData && (gotFrame = this._frameData.getFrameByName(value))) {\n        this.currentFrame = gotFrame;\n        this._frameIndex = this.currentFrame.index;\n        this.sprite.setFrame(this.currentFrame);\n      } else {\n        // Search for the frameName in all atlases and call LoadTexture instead of change frameName if such is present\n        const cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n        let keyCount = cacheKeys.length;\n        while (keyCount--) {\n          const cacheKey = cacheKeys[keyCount];\n          const frameData = this.game.cache.getFrameData(cacheKey);\n          const frame = frameData.getFrameByName(value);\n          if (frameData && frame) {\n            this.sprite.loadTexture(cacheKey, value);\n            return;\n          }\n        }\n\n        this.sprite.loadTexture(value);\n        // console.warn('Cannot set frameName: ' + value);\n      }\n    }\n  });\n\n  Phaser.AnimationManager.prototype = animationManager;\n\n  const ignoreAtlasWarningNames = [fakeSpriteAtlasName, fakeTileSpriteAtlasName, fakeEmitterAtlasName]; // Skip warnings for fake atlas names\n\n  // Override Phaser.Cache.prototype.getItem to replace frame name form xp-assets.json Needed only for preview mode\n  const { getItem } = Phaser.Cache.prototype;\n\n  Phaser.Cache.prototype.getItem = function(key, cache, method, property) {\n    key = replaceKey(key);\n\n    if (ignoreAtlasWarningNames.indexOf(key) !== -1) {\n      return null;\n    }\n\n    return getItem.call(this, key, cache, method, property);\n  };\n};\n\n/**\n * Extend imageLoader with helper methods\n * imageLoader.loadAllAtlases - loading all atlases\n * imageLoader.loadSpineMultipleAtlas - load all spine animations\n */\nconst extendImageLoader = function() {\n  let webRoot = `${ad_webroot}/${ad_name}/`;\n\n  /**\n   * Check for ad_assets_path parameter\n   * For some of the partners we save texture_atlases to the different folders due to the reason that assets have different scale\n   */\n  if (typeof ad_assets_path !== 'undefined') {\n    webRoot += ad_assets_path;\n  }\n\n  /**\n   * Load all atlases that added to the embedded\n   */\n  imageLoader.loadAllAtlases = () => {\n    const embeddedKeys = Object.keys(embedded);\n    let keyCount = embeddedKeys.length;\n    while (keyCount--) {\n      const embeddedKey = embeddedKeys[keyCount];\n      const json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        imageLoader.loadAtlas(embeddedKey.toString(), `${webRoot}texture_sheets/${json_data.meta.image}`);\n      }\n    }\n  };\n\n  /**\n   * Load Spine animations by animation name\n   * @param {...(string||{name: string}|{name: string, scale: number, basePath: string})} args Animation name or Object that contains name and scale\n   * name - animation name, scale - custom Spine animation scale (optional), basePath - custom assets folder name (optional)\n   */\n  imageLoader.loadSpineMultipleAtlas = (...args) => {\n    // check if Spine using in the current project\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {\n      console.warn(`Spine library is not defined. Please add it first before trying to load the Spine animation.`);\n    }\n\n    if (spineLibraryAdded) {\n      let argCount = args.length;\n      const basePathNames = {}; // Optional animation assets base paths that adds before animation asset path name.\n\n      // By overriding 'Spine object' creating we add another override for AtlasAttachmentLoader.newRegionAttachment method where change asset name by adding baseName before asset path.\n      // Each time when new Spine object created it overrides AtlasAttachmentLoader.newRegionAttachment method and changes the target asset name.\n      // Overrides for AtlasAttachmentLoader.newMeshAttachment and AtlasAttachmentLoader.newWeightedMeshAttachment are skipped for now, because canvas rendering don't support meshes.\n      PhaserSpine.SpinePlugin.prototype.addSpineFactory = function() {\n        Phaser.GameObjectFactory.prototype.spine = function(x, y, key, scalingVariant, group) {\n          if (group === undefined) {\n            group = this.world;\n          }\n          const spineObject = new PhaserSpine.Spine(this.game, key, scalingVariant);\n          spineObject.setToSetupPose();\n          spineObject.position.x = x;\n          spineObject.position.y = y;\n          return group.add(spineObject);\n        };\n        Phaser.GameObjectCreator.prototype.spine = function(x, y, key, scalingVariant, group) {\n          spine.AtlasAttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {\n            let targetPath = path;\n            const basePath = basePathNames[key];\n\n            if (basePath) targetPath = basePath + path;\n\n            const region = this.atlas.findRegion(targetPath);\n            if (!region) throw `Region not found in atlas: ${targetPath} (region attachment: ${name})`;\n            const attachment = new spine.RegionAttachment(name);\n            attachment.rendererObject = region;\n            attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n            attachment.regionOffsetX = region.offsetX;\n            attachment.regionOffsetY = region.offsetY;\n            attachment.regionWidth = region.width;\n            attachment.regionHeight = region.height;\n            attachment.regionOriginalWidth = region.originalWidth;\n            attachment.regionOriginalHeight = region.originalHeight;\n            return attachment;\n          };\n\n          return new PhaserSpine.Spine(this.game, key, scalingVariant);\n        };\n      };\n\n      // Check for the atlases exist\n      let firstExistAtlasName = null;\n      const embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        const embeddedKey = embeddedKeys[keyCount];\n        const json_data = embedded[embeddedKey];\n\n        if (json_data.meta && json_data.frames) {\n          firstExistAtlasName = embeddedKey;\n          keyCount = 0;\n        }\n      }\n\n      if (!firstExistAtlasName) {\n        return console.warn('Please add at least one atlas');\n      }\n\n      while (argCount--) {\n        const arg = args[argCount];\n        switch (typeof arg) {\n          case 'string':\n            imageLoader.loadSpine(arg, firstExistAtlasName, `${webRoot}/texture_sheets/${firstExistAtlasName}.png`);\n            break;\n          case 'object':\n            if (arg.basePath) basePathNames[arg.name] = arg.basePath;\n\n            imageLoader.loadSpine(\n              arg.name,\n              firstExistAtlasName,\n              `${webRoot}/texture_sheets/${firstExistAtlasName}.png`,\n              arg.scale ? `@${arg.scale}x` : null\n            );\n            break;\n        }\n      }\n    }\n  };\n};\n\n/**\n * Override Phaser and Spine methods for support multi-atlases, extend imageLoader with loader helpers\n */\n(() => {\n  overridePhaserAnimation();\n  overrideSpineLibrary();\n  overridePhaserFrameName();\n  overridePhaserTileSprite();\n  overridePhaserMakeParticle();\n  overridePhaserSprite();\n  extendImageLoader();\n})();\n","// import { legologger } from '@armathai/lego-logger';\n// import { legoLoggerConfig } from './configs/lego-config';\nimport { startupCommand } from './commands/startup-command';\nimport FontLoader from './display/font-loader';\nimport LU from './display/layout-utils';\nimport Globals from './kernel/globals';\nimport { CTAView } from './objects/cta/cta-view';\nimport { GameState } from './states/game-state';\nimport { PreloaderState } from './states/preloader-state';\nimport './strings';\n\nwindow.CI_API = window.CI_API || {\n  states: {},\n  PreloaderState,\n  GameState,\n  FontLoader,\n  LU,\n  CTA: null, // define CTA later\n  Globals,\n  renderer: 1 /* 0 - Auto | << 1 - Canvas >> | 2 - WebGL */\n};\n\nclass Game extends Phaser.Game {\n  constructor() {\n    super('100%', '100%', CI_API.renderer, LU.CONTAINER_NAME, null);\n  }\n}\n\n/* Load our font resources and create a new game */\nwindow.ad_begin = () => {\n  FontLoader.loadFonts(() => {\n    /**\n     * Create new game after initializing all information about loading modules.\n     * xp-assets.json is loaded as independent file in the -preview mode.\n     * May define the CTA class here as a CTA xp module.\n     */\n    xp.init(Globals.WEB_ROOT, () => {\n      CI_API.CTA = xp.getActiveModule('cta_style', CTAView);\n      // @ts-ignore\n      CI_API.game = new Game();\n      setTimeout(() => {\n        // legologger.start(legoLoggerConfig);\n        startupCommand();\n      });\n    });\n  });\n};\n","import { AdStatus, AdViewState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\nimport { CtaModel } from './cta-model';\nimport { HintModel } from './hint-model';\nimport { LoadModel } from './load-model';\nimport { PersistentCtaModel } from './persistent-cta-model';\nimport { SoundModel } from './sound-model';\nimport { TutorialModel } from './tutorial-model';\n\nexport class AdModel extends ObservableModel {\n  constructor() {\n    super('AdModel');\n\n    this._cta = null;\n    this._hint = null;\n    this._load = null;\n    this._sound = null;\n    this._tutorial = null;\n    this._persistentCta = null;\n    this._status = AdStatus.Unknown;\n    this._viewState = AdViewState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  set status(value) {\n    this._status = value;\n  }\n\n  get viewState() {\n    return this._viewState;\n  }\n\n  set viewState(value) {\n    this._viewState = value;\n  }\n\n  get load() {\n    return this._load;\n  }\n\n  get hint() {\n    return this._hint;\n  }\n\n  get tutorial() {\n    return this._tutorial;\n  }\n\n  get persistentCta() {\n    return this._persistentCta;\n  }\n\n  get cta() {\n    return this._cta;\n  }\n\n  get sound() {\n    return this._sound;\n  }\n\n  initialize() {\n    this._load = new LoadModel();\n  }\n\n  // CTA\n  initializeCtaModel() {\n    this._cta = new CtaModel();\n    this._cta.initialize();\n  }\n\n  destroyCtaModel() {\n    this._cta.destroy();\n    this._cta = null;\n  }\n\n  // HINT\n  initializeHintModel() {\n    this._hint = new HintModel();\n    this._hint.initialize();\n  }\n\n  destroyHintModel() {\n    this._hint.destroy();\n    this._hint = null;\n  }\n\n  // LOAD\n  initializeLoadModel() {\n    this._load = new LoadModel();\n    this._load.initialize();\n  }\n\n  destroyLoadModel() {\n    this._load.destroy();\n    this._load = null;\n  }\n\n  // TUTORIAL\n  initializeTutorialModel() {\n    this._tutorial = new TutorialModel();\n    this._tutorial.initialize();\n  }\n\n  destroyTutorialModel() {\n    this._tutorial.destroy();\n    this._tutorial = null;\n  }\n\n  // PERSISTENT_CTA\n  initializePersistentCtaModel() {\n    this._persistentCta = new PersistentCtaModel();\n    this._persistentCta.initialize();\n  }\n\n  destroyPersistentCtaModel() {\n    this._persistentCta.destroy();\n    this._persistentCta = null;\n  }\n\n  // SOUND;\n  initializeSoundModel() {\n    this._sound = new SoundModel();\n    this._sound.initialize();\n  }\n\n  destroySoundModel() {\n    this._sound.destroy();\n    this._sound = null;\n  }\n}\n","import { GameOverReasons } from '../../constants';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class CtaModel extends ObservableModel {\n  constructor() {\n    super('CtaModel');\n\n    this._visible = null;\n    this._preVisible = null;\n    this._reason = GameOverReasons.Unknown;\n\n    this.makeObservable();\n  }\n\n  get reason() {\n    return this._reason;\n  }\n\n  get preVisible() {\n    return this._preVisible;\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  destroy() {\n    removeRunnable(this._visibilityDelayTimer);\n  }\n\n  show(reason, delay = 0) {\n    this._preVisible = true;\n    this._reason = reason;\n\n    removeRunnable(this._visibilityDelayTimer);\n    this._visibilityDelayTimer = delayRunnable(delay, () => {\n      this._visible = true;\n    });\n  }\n}\n","import { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class HintModel extends ObservableModel {\n  constructor() {\n    super('HintModel');\n\n    this._visible = false;\n    this.makeObservable();\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    this._visible = value;\n    this._stopVisibilityTimer();\n  }\n\n  initialize() {\n    this._startVisibilityTimer();\n  }\n\n  destroy() {\n    this._stopVisibilityTimer();\n  }\n\n  resetVisibilityTimer() {\n    this._stopVisibilityTimer();\n    this._startVisibilityTimer();\n  }\n\n  _startVisibilityTimer() {\n    this._visibilityTimer = delayRunnable(CI_API.Globals.PARAMS.hint_on_idle, () => {\n      this._visible = true;\n    });\n  }\n\n  _stopVisibilityTimer() {\n    removeRunnable(this._visibilityTimer);\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class LoadModel extends ObservableModel {\n  constructor() {\n    super('LoadModel');\n\n    this._progress = 0;\n    this._complete = false;\n    this.makeObservable();\n  }\n\n  get progress() {\n    return this._progress;\n  }\n\n  set progress(value) {\n    this._progress = value;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PersistentCtaModel extends ObservableModel {\n  constructor() {\n    super('PersistentCtaModel');\n  }\n}\n","import { SoundState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\n\nexport class SoundModel extends ObservableModel {\n  constructor() {\n    super('SoundModel');\n\n    this._state = SoundState.Unknown;\n    this._icon = null;\n\n    this.makeObservable();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value) {\n    this._icon = value;\n  }\n\n  initialize() {\n    this._icon = CI_API.Globals.PARAMS.sound_icon;\n    this._state = SoundState.On;\n  }\n}\n","import { getTutorialConfig } from '../../configs/tutorial-config';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\nimport { TutorialSequenceModel } from './tutorial-sequence-model';\n\nexport class TutorialModel extends ObservableModel {\n  constructor() {\n    super('TutorialModel');\n\n    this._complete = false;\n    this._sequences = null;\n    this._current = null;\n    this._sequenceCompleteTimer = null;\n\n    this.makeObservable();\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n\n  get sequences() {\n    return this._sequences;\n  }\n\n  get current() {\n    return this._current;\n  }\n\n  initialize() {\n    super.initialize();\n\n    this._initSequences();\n  }\n\n  destroy() {\n    this._stopSequenceCompleteTimer();\n\n    super.destroy();\n  }\n\n  nextSequence() {\n    this._current = this._sequences.shift();\n    this._startSequenceCompleteTimer();\n  }\n\n  completeSequence() {\n    this._current.complete = true;\n    this._stopSequenceCompleteTimer();\n  }\n\n  _initSequences() {\n    this._sequences = getTutorialConfig().map(config => new TutorialSequenceModel(config));\n  }\n\n  _startSequenceCompleteTimer() {\n    this._sequenceCompleteTimer = delayRunnable(this.current.config.duration, this.completeSequence, this);\n  }\n\n  _stopSequenceCompleteTimer() {\n    removeRunnable(this._sequenceCompleteTimer);\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class TutorialSequenceModel extends ObservableModel {\n  constructor(config) {\n    super('TutorialSequenceModel');\n\n    this._config = config;\n    this._complete = false;\n\n    this.makeObservable('_complete');\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n}\n","import { getSlotMachineConfig } from '../../configs/slot-machine-config';\nimport { GameStatus } from '../../constants';\nimport { ObservableModel } from '../observable-model';\nimport { SlotMachineModel } from './machine/slot-machine-model';\nimport { SpinButtonModel } from './machine/spin-button-model';\n\nexport class GameModel extends ObservableModel {\n  constructor() {\n    super('GameModel');\n\n    this._slotMachine = null;\n    this._spinBtn = null;\n    this._status = GameStatus.Unknown;\n\n    this.makeObservable();\n  }\n\n  get slotMachine() {\n    return this._slotMachine;\n  }\n\n  get spinBtn() {\n    return this._spinBtn;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  set status(value) {\n    this._status = value;\n  }\n\n  initialize() {\n    this.initializeMachineModel();\n  }\n\n  destroy() {\n    this.destroyMachineModel();\n  }\n\n  initializeMachineModel() {\n    this._slotMachine = new SlotMachineModel(getSlotMachineConfig());\n    this._slotMachine.initialize();\n\n    this._spinBtn = new SpinButtonModel();\n    this._spinBtn.initialize();\n  }\n\n  destroyMachineModel() {\n    this._slotMachine.destroy();\n    this._slotMachine = null;\n  }\n}\n","import { ReelState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\nimport { SlotModel } from './slot-model';\n\nfunction extendConfig(config) {\n  const { offset } = config;\n  config.offset = { x: offset.x || 0, y: offset.y || 0 };\n\n  return config;\n}\n\nexport class ReelModel extends ObservableModel {\n  constructor(config) {\n    super('ReelModel');\n\n    this._config = extendConfig(config);\n    this._slots = this._generateSlots();\n    this._state = ReelState.Idle;\n\n    this.makeObservable('_state');\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get slots() {\n    return this._slots;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  getSlot(uuid) {\n    return this._slots.find(slot => slot.uuid === uuid);\n  }\n\n  setState(value) {\n    this._state = value;\n  }\n\n  setSlotState(slotIndex, state) {\n    const slot = this._slots[slotIndex];\n    slot.setState(state);\n  }\n\n  setSlotType(slotIndex, type) {\n    const slot = this._slots[slotIndex];\n    slot.setType(type);\n  }\n\n  _generateSlots() {\n    return this._config.slots.map(slotType => new SlotModel(slotType));\n  }\n}\n","import { ReelState, SlotMachineState, SpinResultType } from '../../../constants';\nimport { last } from '../../../utils/array/last';\nimport { sample } from '../../../utils/array/sample';\nimport { shuffle } from '../../../utils/array/shuffle';\nimport { delayRunnable, removeRunnable } from '../../../utils/index';\nimport { ObservableModel } from '../../observable-model';\nimport { ReelModel } from './reel-model';\n\nexport class SlotMachineModel extends ObservableModel {\n  constructor(config) {\n    super('SlotMachineModel');\n\n    this._config = config;\n    this._reels = this._generateReels();\n    this._state = null;\n    this._spinResult = null;\n    this._spinsToCta = 0;\n    this._spinsCount = 0;\n    this._autoSpinTimer = null;\n\n    this.makeObservable();\n  }\n\n  destroy() {\n    this.stopAutoSpinTimer();\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get reels() {\n    return this._reels;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  get spinResult() {\n    return this._spinResult;\n  }\n\n  get spinsCount() {\n    return this._spinsCount;\n  }\n\n  get spinsToCta() {\n    return this._spinsToCta;\n  }\n\n  set spinsToCta(value) {\n    this._spinsToCta = value;\n  }\n\n  isLastSpin() {\n    return this.spinsToCta === this.spinsCount;\n  }\n\n  isLastReel(uuid) {\n    return last(this._reels).uuid === uuid;\n  }\n\n  getReelIndex(uuid) {\n    return this._reels.indexOf(this._reels.find(r => r.uuid === uuid));\n  }\n\n  getReel(uuid) {\n    return this._reels.find(r => r.uuid === uuid);\n  }\n\n  setState(value) {\n    this._state = value;\n  }\n\n  setSpinsCount(value) {\n    this._spinsCount = value;\n  }\n\n  spin() {\n    this.setState(SlotMachineState.Spin);\n\n    this._reels.forEach((r, index) =>\n      delayRunnable(index * this._config.reelsSpinDelay, r.setState, r, ReelState.Spin)\n    );\n\n    this.stopAutoSpinTimer();\n    this.setSpinsCount(this._spinsCount + 1);\n    this._setSpinResult = null;\n  }\n\n  stop() {\n    this.setState(SlotMachineState.Stop);\n\n    this._reels.forEach((r, index) =>\n      delayRunnable(index * this._config.reelsStopDelay, r.setState, r, ReelState.Stop)\n    );\n  }\n\n  idle() {\n    this.setState(SlotMachineState.Idle);\n  }\n\n  resetSlots(shuffleAfterReset) {\n    const { reels } = this.config;\n\n    reels.forEach((r, i) => {\n      const { slots } = r;\n\n      const reelModel = this._reels[i];\n      const slotTypes = [...slots];\n      shuffleAfterReset && shuffle(slotTypes);\n      slotTypes.forEach((s, j) => {\n        reelModel.slots[j].type = s;\n      });\n    });\n  }\n\n  startAutoSpinTimer() {\n    // @ts-ignore\n    this._autoSpinTimer = delayRunnable(CI_API.Globals.PARAMS.auto_spin_delay || 0, this.spin, this);\n  }\n\n  stopAutoSpinTimer() {\n    removeRunnable(this._autoSpinTimer);\n  }\n\n  // SPIN RESULT\n  setSpinResult(bet) {\n    this._spinResult = this._generateSpinResult(bet);\n    this._spinResult.reels.forEach((r, i) => r.forEach(s => this._reels[i].setSlotType(s.index, s.type)));\n  }\n\n  getWinType() {\n    const { first_slot_spins } = CI_API.Globals.PARAMS;\n\n    if (this.isLastSpin()) {\n      return SpinResultType.Mega;\n    }\n\n    if (this.spinsCount === first_slot_spins) {\n      return SpinResultType.Big;\n    }\n\n    return SpinResultType.Regular;\n  }\n\n  getResultPattern(winType) {\n    return sample(this._config.combinations[winType]);\n  }\n\n  _getReelsResultPattern(pattern) {\n    const slotTypes = this.getWinSlotTypes();\n\n    return pattern.map(reelPattern => {\n      return reelPattern.map(slotIndex => {\n        return { index: slotIndex, type: sample(slotTypes) };\n      });\n    });\n  }\n\n  getWinSlotTypes() {\n    const { winSlotTypes } = this.config;\n    const { first_slot_spins } = CI_API.Globals.PARAMS;\n\n    if (this.isLastSpin()) {\n      return [sample(winSlotTypes.mega)];\n    }\n\n    if (this._spinsCount === first_slot_spins) {\n      return [sample(winSlotTypes.big)];\n    }\n\n    const reg = sample(winSlotTypes.regular);\n    const mega = sample(winSlotTypes.mega);\n    return [reg, reg, mega, reg, reg];\n  }\n\n  getPrize(winType, bet) {\n    let prize = winType === SpinResultType.Loose ? 0 : this._config.prizeFactor[winType] * bet;\n\n    if (this.isLastSpin()) {\n      prize = 999999999;\n    }\n\n    return prize;\n  }\n\n  _generateSpinResult(bet) {\n    const type = this.getWinType();\n    const prize = this.getPrize(type, bet);\n    const pattern = this.getResultPattern(type);\n    const reels = this._getReelsResultPattern(pattern);\n\n    return { type, prize, pattern, reels };\n  }\n\n  _generateReels() {\n    return this._config.reels.map(reelConfig => new ReelModel(reelConfig));\n  }\n}\n","import { SlotState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\n\nexport class SlotModel extends ObservableModel {\n  constructor(type) {\n    super('SlotModel');\n\n    this._type = type;\n    this._state = SlotState.Idle;\n\n    this.makeObservable();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    this._type = value;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  setType(value) {\n    this._type = value;\n  }\n\n  setState(state) {\n    this._state = state;\n  }\n}\n","import { SpinBtnState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\n\nexport class SpinButtonModel extends ObservableModel {\n  constructor() {\n    super('SpinButtonModel');\n\n    this._state = null;\n    this._active = null;\n\n    this.makeObservable();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(value) {\n    this._active = value;\n  }\n\n  initialize() {\n    this._state = SpinBtnState.Spin;\n    this._active = true;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\n\nconst getUUID = (() => {\n  let num = 0;\n  return (prefix = '') => {\n    num += 1;\n    const value = num < 10 ? `0${num}` : num;\n    return `${prefix}${value.toString()}`;\n  };\n})();\n\nexport class ObservableModel {\n  constructor(name) {\n    this.__name__ = name;\n    this._uuid = getUUID(this.__name__);\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  makeObservable(...properties) {\n    lego.observe.makeObservable(this, ...properties);\n  }\n\n  createObservable(property, value) {\n    lego.observe.createObservable(this, property, value);\n  }\n\n  removeObservable(...properties) {\n    lego.observe.removeObservable(this, ...properties);\n  }\n\n  initialize() {}\n\n  destroy() {}\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PlayerModel extends ObservableModel {\n  constructor() {\n    super('PlayerModel');\n\n    this._balance = 100000000;\n    this._balanceOnStart = this._balance;\n    this._bet = 0;\n    this.makeObservable();\n  }\n\n  get profit() {\n    return this.balance - this._balanceOnStart;\n  }\n\n  get balance() {\n    return this._balance;\n  }\n\n  set balance(value) {\n    this._balance = value;\n  }\n\n  get bet() {\n    return this._bet;\n  }\n\n  set bet(value) {\n    this._bet = value;\n  }\n}\n","import { AdModel } from './ad/ad-model';\nimport { GameModel } from './game/game-model';\nimport { ObservableModel } from './observable-model';\nimport { PlayerModel } from './player/player-model';\n\nclass Store extends ObservableModel {\n  constructor() {\n    super('Store');\n\n    this._ad = null;\n    this._game = null;\n    this._player = null;\n\n    this.makeObservable();\n  }\n\n  get ad() {\n    return this._ad;\n  }\n\n  set ad(value) {\n    this._ad = value;\n  }\n\n  get player() {\n    return this._player;\n  }\n\n  set player(value) {\n    this._player = value;\n  }\n\n  get game() {\n    return this._game;\n  }\n\n  set game(value) {\n    this._game = value;\n  }\n\n  // AD\n  initializeADModel() {\n    this._ad = new AdModel();\n    this._ad.initialize();\n  }\n\n  // PLAYER\n  initializePlayerModel() {\n    this._player = new PlayerModel();\n    this._player.initialize();\n  }\n\n  destroyPlayerModel() {\n    this._player.destroy();\n    this._player = null;\n  }\n\n  // GAME\n  initializeGameModel() {\n    this._game = new GameModel();\n    this._game.initialize();\n  }\n\n  destroyGameModel() {\n    this._game.destroy();\n    this._game = null;\n  }\n}\n\nexport const store = new Store();\n","import * as lego from '@armathai/lego';\nimport * as animationConfigs from './configs/animation-configs';\nimport * as buttonConfigs from './configs/button-configs';\nimport * as gridConfigs from './configs/grid-configs';\nimport * as imageConfigs from './configs/image-configs';\nimport * as ninepatchConfigs from './configs/ninepatch-configs';\nimport * as particlesConfigs from './configs/particles-configs';\nimport * as spineConfigs from './configs/spine-configs';\nimport * as textConfigs from './configs/text-configs';\nimport * as ViewEvents from './events/view-events';\nimport * as utils from './utils';\n\nexport default {\n  animationConfigs,\n  buttonConfigs,\n  gridConfigs,\n  particlesConfigs,\n  imageConfigs,\n  ninepatchConfigs,\n  spineConfigs,\n  textConfigs,\n  utils,\n  lego,\n  ViewEvents\n};\n","/* eslint-disable class-methods-use-this */\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getBackgroundGridConfig } from '../../configs/grid-configs';\nimport { getBgImageConfig } from '../../configs/image-configs';\nimport { makeImage } from '../../utils';\n\nexport class BackgroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n    this._buildBg();\n  }\n\n  get name() {\n    return 'BackgroundView';\n  }\n\n  getGridConfig() {\n    return getBackgroundGridConfig();\n  }\n\n  _buildBg() {\n    this.setChild('bg', (this._bg = makeImage(getBgImageConfig())));\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getCtaCoinEmitterConfig } from '../../configs/particles-configs';\nimport { AdStatus, InputPriority } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport moduleBindings from '../../module-bindings';\nimport { makePixel } from '../../utils';\nimport { Button } from '../../utils/button/button';\nimport { CoinFallEmitter } from '../../utils/emitters/coin-fall/coin-fall-emitter';\n\nexport class CTAView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    this._blocker = null;\n    this._emitter = null;\n    this.bindings = moduleBindings;\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  getGridConfig() {\n    return new Error('function getGridConfig() is not implemented');\n  }\n\n  postRebuild() {\n    this.show();\n  }\n\n  show() {\n    const { Linear } = Phaser.Easing;\n\n    const tween = this.game.add.tween(this._blocker).from({ alpha: 0 }, 200, Linear.None, true);\n    tween.onStart.addOnce(() => {\n      this._blocker.visible = true;\n    });\n    // @ts-ignore\n    tween.universal = true;\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n\n    this._emitter.destroy();\n    this._buildEmitter();\n  }\n\n  buildPlayButton(config) {\n    return this._buildButton(config, this._onPlayClick);\n  }\n\n  buildRetryButton(config) {\n    return this._buildButton(config, this._onRetryClick);\n  }\n\n  build(config, blockerAlpha = 0.7) {\n    super.build(config);\n    this._buildBlocker(blockerAlpha);\n    this._buildEmitter();\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this.build();\n        break;\n      case AdStatus.Game:\n        this.removeChildren();\n        break;\n      default:\n    }\n  }\n\n  _buildBlocker(alpha) {\n    this._blocker = makePixel({ alpha });\n    this._blocker.inputEnabled = true;\n    this._blocker.input.priorityID = InputPriority.Cta;\n    this._blocker.name = this.name;\n    this._blocker.visible = false;\n\n    this.setChild('blocker', this._blocker);\n\n    if (CI_API.Globals.PARAMS.cta_scrn_clickable) {\n      this._blocker.events.onInputDown.add(this._onScreenClick, this);\n    }\n  }\n\n  _buildEmitter() {\n    this._emitter = new CoinFallEmitter(getCtaCoinEmitterConfig());\n    this._emitter.emit();\n    this.addChildAt(this._emitter, 1);\n  }\n\n  _buildButton(config, callback) {\n    const btn = new Button(config);\n    btn.onClick.add(callback, this);\n    return btn;\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.CtaView.ScreenClick);\n  }\n\n  _onPlayClick() {\n    lego.event.emit(ViewEvents.CtaView.PlayClick);\n  }\n\n  _onRetryClick() {\n    lego.event.emit(ViewEvents.CtaView.RetryClick);\n  }\n}\n","import { WinBehaviour } from './win-behaviour';\n\nexport class BigWinBehaviour extends WinBehaviour {}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getEffectsGridConfig } from '../../configs/grid-configs';\nimport { SlotMachineState, SpinResultType } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { BigWinBehaviour } from './big-win-behaviour';\nimport { MegaWinBehaviour } from './mega-win-behaviour';\nimport { RegularWinBehaviour } from './regular-win-behaviour';\n\nexport class EffectsView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    this._winBehaviour = null;\n    this._completeRunnable = null;\n\n    lego.event.on(ModelEvents.SlotMachineModel.StateUpdate, this._onSlotMachineStateUpdate, this);\n    lego.event.on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisibleUpdate, this);\n  }\n\n  resize() {\n    this._winBehaviour && this._winBehaviour.resize();\n  }\n\n  destroy() {\n    removeRunnable(this._completeRunnable);\n    super.destroy();\n  }\n\n  getGridConfig() {\n    return getEffectsGridConfig();\n  }\n\n  _onCtaVisibleUpdate(value) {\n    value && this._winBehaviour && this._winBehaviour.destroy();\n  }\n\n  _onSlotMachineStateUpdate() {\n    const { state, spinResult } = store.game.slotMachine;\n\n    switch (state) {\n      case SlotMachineState.Action:\n        switch (spinResult.type) {\n          case SpinResultType.Regular:\n            this._setWinBehaviour(RegularWinBehaviour);\n            break;\n          case SpinResultType.Big:\n            this._setWinBehaviour(BigWinBehaviour);\n            this.game.camera.shake(0.006, 400);\n            break;\n          case SpinResultType.Mega:\n            this._setWinBehaviour(MegaWinBehaviour);\n            break;\n          default:\n            this._setCompleteTimer(0);\n        }\n        break;\n      default:\n        this._winBehaviour = null;\n    }\n  }\n\n  _setCompleteTimer(duration) {\n    this._completeRunnable = delayRunnable(duration, () => {\n      this._onAnimationComplete();\n    });\n  }\n\n  _setWinBehaviour(behaviour) {\n    // eslint-disable-next-line new-cap\n    this.setChild('result', (this._winBehaviour = new behaviour()));\n    this._winBehaviour.onComplete.addOnce(this._setCompleteTimer, this, 0, 0);\n    this._winBehaviour.show();\n\n    lego.event.emit(ViewEvents.EffectsView.SpinResultAnimationStart);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _onAnimationComplete() {\n    this._winBehaviour && this._winBehaviour.hide();\n\n    lego.event.emit(ViewEvents.EffectsView.SpinResultAnimationComplete);\n  }\n}\n","import { WinBehaviour } from './win-behaviour';\n\nexport class MegaWinBehaviour extends WinBehaviour {}\n","import { WinBehaviour } from './win-behaviour';\n\nexport class RegularWinBehaviour extends WinBehaviour {}\n","import { getWinCoinEmitterConfig } from '../../configs/particles-configs';\nimport { SlotSpineMap } from '../../configs/spine-configs';\nimport { store } from '../../models/store';\nimport { delayRunnable, getViewByProperty, makeSpine, removeRunnable } from '../../utils';\nimport { Container } from '../../utils/container';\nimport { CoinFallEmitter } from '../../utils/emitters/coin-fall/coin-fall-emitter';\n\nexport class WinBehaviour extends Container {\n  constructor() {\n    super();\n\n    this._slots = null;\n    this._completeRunnable = null;\n\n    this.onComplete = new Phaser.Signal();\n  }\n\n  destroy() {\n    super.destroy();\n\n    removeRunnable(this._completeRunnable);\n  }\n\n  show() {\n    this._buildSlots();\n    this.resize();\n\n    if (!store.game.slotMachine.isLastSpin()) {\n      this._buildParticles();\n    }\n\n    this.visible = true;\n\n    this._completeRunnable = delayRunnable(2400, this.onComplete.dispatch, this.onComplete);\n  }\n\n  hide() {\n    this.game.add\n      .tween(this)\n      .to({ alpha: 0 }, 600, Phaser.Easing.Cubic.Out, true)\n      .onComplete.addOnce(() => {\n        this.destroy();\n      });\n  }\n\n  resize() {\n    this._slots.forEach(s => {\n      const { slotUUID } = s;\n      const slotView = getViewByProperty('uuid', slotUUID);\n      const scale = slotView.worldScale.x / this.worldScale.x;\n      s.scale.set(1);\n      s.scale.set(scale);\n\n      const pos = this.toLocal(slotView.position, slotView.parent);\n      s.position.set(pos.x, pos.y);\n    });\n  }\n\n  _buildSlots() {\n    this._slots = [];\n\n    const sloMachineModel = store.game.slotMachine;\n    // const sloMachineView = getViewByUUID('SlotMachineView');\n\n    const { reels } = sloMachineModel.spinResult;\n    reels.forEach((r, i) => {\n      const reelModel = sloMachineModel.reels[i];\n\n      r.forEach(s => {\n        const slotModel = reelModel.slots[s.index];\n\n        this._buildSlot(slotModel.uuid);\n      });\n    });\n  }\n\n  _buildParticles() {\n    this._emitter = new CoinFallEmitter(getWinCoinEmitterConfig());\n    this._emitter.emit();\n    this.addChild(this._emitter);\n  }\n\n  _buildSlot(slotUUID) {\n    const slotCont = new Container();\n\n    const slotView = getViewByProperty('uuid', slotUUID);\n    slotView.visible = false;\n    const { type } = slotView;\n\n    const slot = makeSpine({ key: SlotSpineMap[type] });\n    slot.setToSetupPose();\n    slot.setAnimationByName(0, 'animation', false);\n    slot.onComplete.addOnce(() => {\n      slotView.visible = true;\n    });\n\n    const frame = makeSpine({ key: 'frame' });\n    frame.setAnimationByName(0, 'start', false);\n    frame.onComplete.addOnce(() => {\n      frame.setAnimationByName(0, 'idle', true);\n    });\n\n    // @ts-ignore\n    slotCont.slotUUID = slotUUID;\n\n    slotCont.addChild(slot);\n    slotCont.addChild(frame);\n\n    this.addChild(slotCont);\n    this._slots.push(slotCont);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getForegroundGridConfig } from '../../configs/grid-configs';\nimport { AdStatus } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { HintView } from './hint-view';\nimport { LogoView } from './logo-view';\nimport { RewardView } from './reward/reward-view';\nimport { SoundView } from './sound-view';\n\nexport class ForegroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    lego.event\n      .on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this)\n      .on(ModelEvents.SoundModel.IconUpdate, this._onSoundIconUpdate, this)\n      .on(ModelEvents.AdModel.HintUpdate, this._onHintUpdate, this);\n  }\n\n  get name() {\n    return 'ForegroundView';\n  }\n\n  getGridConfig() {\n    return getForegroundGridConfig();\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Game:\n        this._build();\n        break;\n      case AdStatus.Cta:\n        this._adjustCtaLogo();\n        break;\n      default:\n    }\n  }\n\n  _onSoundIconUpdate(value) {\n    value && this._buildSoundIcon();\n  }\n\n  _build() {\n    this._buildLogo();\n    this._buildReward();\n  }\n\n  // LOGO\n  _buildLogo() {\n    this.setChild('logo', (this._logoView = new LogoView()));\n  }\n\n  // REWARD\n  _buildReward() {\n    this.setChild('foreground', (this._rewardView = new RewardView()));\n  }\n\n  // SOUND\n  _buildSoundIcon() {\n    this.setChild('sound', (this._soundView = new SoundView()));\n  }\n\n  // HINT\n  _onHintUpdate(hint) {\n    hint ? this._buildHint() : this._destroyHint();\n  }\n\n  _buildHint() {\n    this.addChild((this._hintView = new HintView()));\n  }\n\n  _destroyHint() {\n    this._hintView.destroy();\n  }\n\n  _adjustCtaLogo() {\n    const { Sinusoidal } = Phaser.Easing;\n\n    const cell = this.getCellByName('cta_logo').area;\n    const pos = new Phaser.Point(cell.x + cell.width / 2, cell.y + cell.height / 2);\n    const maxScale = Math.min(cell.width / this._logoView.logo.width, cell.height / this._logoView.logo.height);\n    const scale = Math.min(1, maxScale);\n\n    this.game.add.tween(this._logoView).to({ x: pos.x, y: pos.y }, 400, Sinusoidal.InOut, true);\n    this.game.add\n      .tween(this._logoView.scale)\n      .to({ x: scale, y: scale }, 400, Sinusoidal.InOut, true)\n      .onComplete.addOnce(() => {\n        this.rebuildChild(this._logoView, 'cta_logo');\n      });\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { ASSETS } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { getViewByProperty } from '../../utils';\n\nexport class HintView extends Phaser.Sprite {\n  constructor() {\n    super(CI_API.game, 0, 0, ASSETS, 'ui/hand.png');\n    this.anchor.set(0.1, 0);\n    this.rotation = Math.PI * -0.78;\n\n    lego.event.on(ModelEvents.HintModel.VisibleUpdate, this._onHintVisibleUpdate, this);\n    this._hide();\n  }\n\n  destroy() {\n    lego.event.removeListenersOf(this);\n\n    super.destroy();\n  }\n\n  _onHintVisibleUpdate(visible) {\n    visible ? this._show() : this._hide();\n  }\n\n  _show() {\n    const spinView = getViewByProperty('name', 'SpinView');\n    const pos = this.parent.toLocal(\n      spinView.parent.toGlobal(new Phaser.Point(spinView.centerX + 54, spinView.centerY - 10)),\n      undefined\n    );\n\n    this.position.set(pos.x, pos.y);\n    this.scale.set(1);\n    this.visible = true;\n    this.game.tweens.removeFrom(this.scale);\n    this.game.add.tween(this.scale).to({ x: 0.8, y: 0.8 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);\n  }\n\n  _hide() {\n    this.game.tweens.removeFrom(this.scale);\n    this.visible = false;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getLogoGlowConfig, getLogoImageConfig } from '../../configs/image-configs';\nimport { AdStatus } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { makeImage } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class LogoView extends Container {\n  constructor() {\n    super();\n\n    this._glow = makeImage(getLogoGlowConfig());\n    this._glow.scale.set(2.4, 2);\n    this._glow.alpha = 0;\n\n    this._logo = makeImage(getLogoImageConfig());\n\n    this.addChild(this._glow);\n    this.addChild(this._logo);\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  get name() {\n    return 'LogoView';\n  }\n\n  get logo() {\n    return this._logo;\n  }\n\n  getBounds() {\n    return this._logo.getBounds();\n  }\n\n  _highlight() {\n    this.game.add.tween(this._glow).to({ alpha: 1 }, 250, Phaser.Easing.Linear.None, true);\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this._highlight();\n        break;\n      default:\n    }\n  }\n}\n","import { getRewardPopupBgImageConfig, getRewardPopupFreeSpinBgImageConfig } from '../../../configs/image-configs';\nimport { getRewardPopupCountTextConfig, getRewardPopupTitleTextConfig } from '../../../configs/text-configs';\nimport { makeImage, makeText } from '../../../utils';\nimport { Container } from '../../../utils/container';\n\nexport class RewardPopup extends Container {\n  constructor() {\n    super();\n\n    this._bg = null;\n\n    this._build();\n  }\n\n  getBounds() {\n    return this._bg.getBounds();\n  }\n\n  _build() {\n    // BG\n    const bg = new Container();\n    const part1 = makeImage(getRewardPopupBgImageConfig());\n    const part2 = makeImage(getRewardPopupBgImageConfig());\n\n    part2.x += part2.width / 2 - 1;\n    part1.x -= part1.width / 2 - 1;\n\n    part2.scale.x = -1;\n\n    bg.addMultiple([part1, part2]);\n    this.addChild((this._bg = bg));\n\n    // COUNT\n    const countBg = makeImage(getRewardPopupFreeSpinBgImageConfig());\n    const count = makeText(getRewardPopupCountTextConfig(CI_API.Globals.PARAMS.number_of_extra_spins));\n\n    count.anchor.set(0.5);\n\n    countBg.addChild(count);\n    this.addChild(countBg);\n\n    // TITLE\n    const title = makeText(getRewardPopupTitleTextConfig());\n    title.anchor.set(0.5);\n    this.addChild(title);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getRewardGridConfig } from '../../../configs/grid-configs';\nimport { GameStatus, InputPriority } from '../../../constants';\nimport { ModelEvents } from '../../../events/model-events';\nimport { ViewEvents } from '../../../events/view-events';\nimport { delayRunnable, makePixel, removeRunnable } from '../../../utils';\nimport { SparkleEmitter } from '../../../utils/emitters/sparkle/sparkle-emitter';\nimport { RewardPopup } from './reward-popup';\n\nexport class RewardView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    this._blocker = null;\n    this._hideRunnable = null;\n\n    lego.event\n      .on(ModelEvents.GameModel.StatusUpdate, this._onGameStatusUpdate, this)\n      .on(ModelEvents.CtaModel.VisibleUpdate, this._onCtaVisibleUpdate, this);\n  }\n\n  _onCtaVisibleUpdate(value) {\n    if (!value) {\n      return;\n    }\n\n    this.visible = false;\n    removeRunnable(this._hideRunnable);\n  }\n\n  getGridConfig() {\n    return getRewardGridConfig();\n  }\n\n  _onGameStatusUpdate(status) {\n    switch (status) {\n      case GameStatus.Reward:\n        this._init();\n        break;\n      default:\n    }\n  }\n\n  _init() {\n    this._buildBlocker();\n    this._buildEmitter();\n    this._buildPopup();\n    this._show();\n  }\n\n  _buildBlocker() {\n    const blocker = makePixel({ tint: 0x0, alpha: 0.7 });\n    blocker.inputEnabled = true;\n    blocker.input.priorityID = InputPriority.Reward;\n\n    this.setChild('blocker', (this._blocker = blocker));\n  }\n\n  _buildEmitter() {\n    this.setChild('emitter', (this._emitter = new SparkleEmitter()));\n  }\n\n  _buildPopup() {\n    this.setChild('popup', (this._popup = new RewardPopup()));\n  }\n\n  _show() {\n    const { Cubic, Back } = Phaser.Easing;\n\n    this.game.add.tween(this).from({ alpha: 0 }, 400, Cubic.Out, true);\n    this.game.add\n      .tween(this._popup.scale)\n      .from({ x: 0, y: 0 }, 400, Back.Out, true)\n      .onStart.addOnce(this._onShowStart, this);\n\n    this._hideRunnable = delayRunnable(3000, this._hide, this);\n\n    this._emitter.emit();\n  }\n\n  _hide() {\n    const { Cubic } = Phaser.Easing;\n\n    this.game.add\n      .tween(this)\n      .to({ alpha: 0 }, 400, Cubic.In, true)\n      .onComplete.addOnce(this._onHideComplete, this);\n  }\n\n  _onShowStart() {\n    lego.event.emit(ViewEvents.RewardView.ShowStart);\n  }\n\n  _onHideComplete() {\n    this.visible = false;\n    this._emitter.stop();\n\n    lego.event.emit(ViewEvents.RewardView.HideComplete);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { InputPriority, SoundState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { Container } from '../../utils/container';\n\nexport class SoundView extends Container {\n  constructor() {\n    super();\n\n    this._onBtn = null;\n    this._offBtn = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.SoundModel.StateUpdate, this._onSoundStateUpdate, this);\n  }\n\n  _onSoundStateUpdate(value) {\n    switch (value) {\n      case SoundState.On:\n        this._onBtn.visible = true;\n        this._offBtn.visible = false;\n        this.game.sound.volume = 1;\n        break;\n      case SoundState.Off:\n        this._onBtn.visible = false;\n        this._offBtn.visible = true;\n        this.game.sound.volume = 0;\n        break;\n      default:\n    }\n  }\n\n  _build() {\n    this._onBtn = imageLoader.button(0, 0, 'ui/sound_on.png', this._off, this);\n    this._offBtn = imageLoader.button(0, 0, 'ui/sound_off.png', this._on, this);\n\n    this._onBtn.name = 'mute_button_on';\n    this._offBtn.name = 'mute_button_off';\n\n    this._onBtn.input.priorityID = InputPriority.Foreground;\n    this._offBtn.input.priorityID = InputPriority.Foreground;\n\n    this.addMultiple([this._onBtn, this._offBtn]);\n  }\n\n  _on() {\n    lego.event.emit(ViewEvents.SoundView.Click, 'on');\n  }\n\n  _off() {\n    lego.event.emit(ViewEvents.SoundView.Click, 'off');\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getTutorialBgImageConfig } from '../../configs/ninepatch-configs';\nimport { fitText, makeNinePatch, makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class TutorialSequenceView extends Container {\n  constructor(config) {\n    super();\n\n    this._showTween = null;\n    this._hideTween = null;\n    this._textConfigFn = config.text;\n    this.addChild((this._bg = this._buildBg()));\n    this.addChild((this._label = this._buildLabel()));\n\n    this.alpha = 0;\n    this.rebuild();\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._showTween);\n    this.game.tweens.remove(this._hideTween);\n\n    super.destroy();\n  }\n\n  rebuild() {\n    const width = LP(700, 550);\n    const height = LP(184, 184);\n    this._bg.resize(width, height);\n    this._label.setStyle(this._textConfigFn().style);\n  }\n\n  show() {\n    this._showTween = this.game.add.tween(this).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true);\n    return this._showTween;\n  }\n\n  hide() {\n    this._hideTween = this.game.add.tween(this).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n    return this._hideTween;\n  }\n\n  _buildBg() {\n    return makeNinePatch(getTutorialBgImageConfig());\n  }\n\n  _buildLabel() {\n    const { width, height } = this._bg;\n\n    const label = makeText(this._textConfigFn());\n    label.anchor.set(0.5);\n    fitText(label, width * 0.8, height * 0.8);\n\n    return label;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { Container } from '../../utils/container';\nimport { TutorialSequenceView } from './tutorial-sequence-view';\n\nexport class TutorialView extends Container {\n  constructor() {\n    super();\n\n    this._current = null;\n    this.onSequenceReady = new Phaser.Signal();\n\n    lego.event.on(ModelEvents.TutorialModel.CurrentUpdate, this._onTutorialCurrentUpdate, this);\n    lego.event.on(ModelEvents.TutorialSequenceModel.CompleteUpdate, this._onTutorialCurrentCompleteUpdate, this);\n  }\n\n  destroy(destroyChildren = true, soft = false) {\n    this._switchScreenInput(false);\n\n    super.destroy(destroyChildren, soft);\n  }\n\n  rebuild() {\n    if (!this._current || !this._current.parent) {\n      return;\n    }\n\n    this._current.rebuild();\n  }\n\n  _onTutorialCurrentUpdate(sequence) {\n    if (!sequence) {\n      return;\n    }\n\n    this._buildSequence(sequence);\n    this.onSequenceReady.dispatch();\n  }\n\n  _onTutorialCurrentCompleteUpdate(complete) {\n    if (!complete) {\n      return;\n    }\n\n    this._switchScreenInput(false);\n    this._current.hide().onComplete.addOnce(() => {\n      lego.event.emit(ViewEvents.TutorialView.SequenceHideComplete);\n    });\n  }\n\n  _buildSequence(sequence) {\n    this._current = new TutorialSequenceView(sequence.config);\n    this._switchScreenInput(true);\n    this._current.show().onComplete.addOnce(() => {});\n\n    this.addChild(this._current);\n  }\n\n  _switchScreenInput(enable) {\n    this.game.input.onDown.remove(this._onScreenClick, this);\n\n    enable && this.game.input.onDown.addOnce(this._onScreenClick, this);\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.TutorialView.ScreenClick);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getGameGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { SlotMachineView } from './machine/slot-machine-view';\n\nexport class GameView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    this._machine = null;\n\n    lego.event.on(ModelEvents.GameModel.SlotMachineUpdate, this._onMachineUpdate, this);\n  }\n\n  get name() {\n    return 'GameView';\n  }\n\n  getGridConfig() {\n    return getGameGridConfig();\n  }\n\n  // MACHINE\n  _onMachineUpdate(slotMachine) {\n    slotMachine ? this._buildMachine() : this._destroyMachine();\n  }\n\n  _buildMachine() {\n    this.setChild('machine', (this._machine = new SlotMachineView()));\n  }\n\n  _destroyMachine() {\n    this._machine.destroy();\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../../events/model-events';\nimport { ViewEvents } from '../../../events/view-events';\nimport { store } from '../../../models/store';\nimport { loopRunnable, removeRunnable } from '../../../utils';\nimport { Container } from '../../../utils/container';\nimport { SlotView } from './slot-view';\n\nfunction getTweenPoints(time, ease, from, to) {\n  const dt = CI_API.game.time.physicsElapsedMS;\n  const points = [];\n  const framesCount = Math.round(((1 / time) * 1000) / dt);\n  for (let i = 1; i <= framesCount; i += 1) {\n    points.push(Math.round(from + ease(i / framesCount) * to));\n  }\n\n  return points;\n}\n\nexport class ReelView extends Container {\n  constructor(model) {\n    super();\n\n    this.name = 'ReelView';\n\n    const { slots, uuid } = model;\n    const { slotOffset, speed } = store.game.slotMachine.config;\n\n    this._uuid = uuid;\n    this._offset = slotOffset;\n    this._speed = speed;\n    this._loopRunnable = null;\n    this._spinRunnable = null;\n    this._stopRunnable = null;\n    this._loopStep = null;\n    this._slots = null;\n    this._height = null;\n    this._tile = null;\n\n    lego.event.on(ModelEvents.SlotModel.TypeUpdate, this._onSlotTypeUpdate, this);\n\n    this._build(slots);\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  get slots() {\n    return this._slots;\n  }\n\n  get tileY() {\n    return this._tileY;\n  }\n\n  set tileY(value) {\n    this._tileY = value;\n    this._updateSlotsPositions();\n  }\n\n  destroy() {\n    removeRunnable(this._spinRunnable);\n    removeRunnable(this._stopRunnable);\n    removeRunnable(this._loopRunnable);\n\n    super.destroy();\n  }\n\n  highlightSpinResult(slots) {\n    slots.forEach(s => {\n      const { type, index } = s;\n      if (type < 10) {\n        this._slots[index].highlightSpinResult();\n      }\n    });\n  }\n\n  getSlot(uuid) {\n    return this._slots.find(slot => slot.uuid === uuid);\n  }\n\n  getSlotByIndex(index) {\n    return this.slots[index];\n  }\n\n  spin() {\n    const { spinEasing } = store.game.slotMachine.config;\n    const points = getTweenPoints(this._speed, spinEasing, this._tileY, this._height);\n\n    const lastPoints = points.slice(points.length - 2);\n    this._loopStep = lastPoints[1] - lastPoints[0];\n    this._spinRunnable = loopRunnable(0, () => {\n      this.tileY = points.shift();\n\n      if (!points.length) {\n        removeRunnable(this._spinRunnable);\n        this._loop();\n        lego.event.emit(ViewEvents.ReelView.SpeedUpComplete, this._uuid);\n      }\n    });\n  }\n\n  stop() {\n    removeRunnable(this._loopRunnable);\n\n    this.unBlur();\n\n    const { stopEasing } = store.game.slotMachine.config;\n    const diff = this._height - (this._tileY % this._height);\n    const points = getTweenPoints(this._speed, stopEasing, this._tileY, diff + this._height);\n\n    this._stopRunnable = loopRunnable(0, () => {\n      this.tileY = points.shift();\n      if (!points.length) {\n        removeRunnable(this._stopRunnable);\n        lego.event.emit(ViewEvents.ReelView.SpeedDownComplete, this._uuid);\n      }\n    });\n  }\n\n  blur() {\n    this._slots.forEach(s => s.blur());\n  }\n\n  unBlur() {\n    this._slots.forEach(s => s.unBlur());\n  }\n\n  _onSlotTypeUpdate(newType, oldType, uuid) {\n    const slotView = this.getSlot(uuid);\n    if (!slotView) {\n      return;\n    }\n\n    slotView.setType(newType);\n    this._height = this._calculateHeight();\n  }\n\n  _loop() {\n    this._loopRunnable = loopRunnable(0, () => {\n      this.tileY += this._loopStep;\n    });\n  }\n\n  _buildSlots(slots) {\n    return slots.map(model => {\n      const slot = new SlotView(model);\n\n      return this.addChild(slot);\n    });\n  }\n\n  _calculateHeight() {\n    return this._slots.reduce((acc, cur) => acc + cur.height + this._offset, 0);\n  }\n\n  _updateSlotsPositions() {\n    for (let i = 0; i < this._slots.length; i += 1) {\n      const slot = this._slots[i];\n\n      if (i === 0) {\n        slot.setY(this._tileY % this._height);\n      } else {\n        const previews = this._slots[i - 1];\n        slot.setY(previews.bottom + this._offset);\n      }\n\n      this._checkForLimits(slot);\n    }\n  }\n\n  _checkForLimits(slot) {\n    if (slot.bottom > this._height) {\n      slot.setY(slot.top - this._height);\n    } else if (slot.bottom < 0) {\n      slot.setY(slot.top + this._height);\n    }\n  }\n\n  _build(slots) {\n    this._slots = this._buildSlots(slots);\n\n    this._height = this._calculateHeight();\n    this.tileY = 0;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getSlotMachineBgImageConfig } from '../../../configs/image-configs';\nimport { ReelState, SlotMachineState } from '../../../constants';\nimport { ModelEvents } from '../../../events/model-events';\nimport { ViewEvents } from '../../../events/view-events';\nimport { store } from '../../../models/store';\nimport { makeImage } from '../../../utils';\nimport { Container } from '../../../utils/container';\nimport { ReelView } from './reel-view';\n\nfunction getMaskGraphics(config = {}) {\n  const { alpha = 1, color = 0x0 } = config;\n  const { mask: points } = store.game.slotMachine.config;\n\n  const gr = CI_API.game.add.graphics();\n  gr.beginFill(color, 1);\n  gr.drawPolygon(points);\n  gr.endFill();\n\n  gr.alpha = alpha;\n\n  return gr;\n}\n\nexport class SlotMachineView extends Container {\n  constructor() {\n    super();\n\n    this._bg = null;\n    this._reels = null;\n    this._reelsBg = null;\n    this._reelsGroup = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.SlotMachineModel.StateUpdate, this._onStateUpdate, this);\n    lego.event.on(ModelEvents.ReelModel.StateUpdate, this._onReelStateUpdate, this);\n    lego.event.on(ViewEvents.EffectsView.SpinResultAnimationStart, this._onSpinResultAnimationStart, this);\n    lego.event.on(ViewEvents.EffectsView.SpinResultAnimationComplete, this._onSpinResultAnimationComplete, this);\n  }\n\n  get name() {\n    return 'SlotMachineView';\n  }\n\n  get reels() {\n    return this._reels;\n  }\n\n  getBounds() {\n    return this._bg.getBounds();\n  }\n\n  getReel(uuid) {\n    return this._reels.find(reel => reel.uuid === uuid);\n  }\n\n  _onSpinResultAnimationStart() {\n    this.game.add.tween(this._blocker).to({ alpha: 0.2 }, 200, null, true);\n  }\n\n  _onSpinResultAnimationComplete() {\n    this.game.add.tween(this._blocker).to({ alpha: 0 }, 200, null, true);\n  }\n\n  _onStateUpdate(state) {\n    this._switchInputs(false);\n\n    switch (state) {\n      case SlotMachineState.Idle:\n        this._switchInputs(true);\n        break;\n      default:\n    }\n  }\n\n  _onReelStateUpdate(newState, oldState, uuid) {\n    switch (newState) {\n      case ReelState.Spin:\n        this.getReel(uuid).spin();\n        break;\n      case ReelState.MaxSpeed:\n        // this.getReel(uuid).blur();\n        break;\n      case ReelState.Stop:\n        this.getReel(uuid).stop();\n        break;\n      default:\n    }\n  }\n\n  _switchInputs(value) {\n    store.game.slotMachine.config.clickable && (this._bg.input.enabled = value);\n  }\n\n  _onBlockerClick() {\n    lego.event.emit(ViewEvents.SlotMachineView.Spin);\n  }\n\n  // BUILD\n  _build() {\n    const { clickable } = store.game.slotMachine.config;\n\n    this._buildBg();\n    this._buildReels();\n    this._buildBlocker();\n    this._switchInputs(clickable);\n  }\n\n  _buildBg() {\n    const bgPart = makeImage(getSlotMachineBgImageConfig());\n    const { width, height } = bgPart;\n\n    bgPart.scale.set(1 / 0.76);\n\n    const rt = new Phaser.RenderTexture(this.game, width * 2, height);\n    rt.renderXY(bgPart, 0, 0);\n    bgPart.scale.x *= -1;\n    rt.renderXY(bgPart, width * 2, 0);\n\n    this._bg = this.game.add.sprite(0, 0, rt);\n    this._bg.name = this.name;\n    this._bg.inputEnabled = true;\n    this._bg.events.onInputDown.add(this._onBlockerClick, this);\n\n    this.addChild(this._bg);\n  }\n\n  _buildReels() {\n    const { reels } = store.game.slotMachine;\n\n    const group = new Container();\n    this._reels = reels.map(model => {\n      const { offset } = model.config;\n      const reel = new ReelView(model);\n      reel.position.set(group.width + offset.x, offset.y);\n\n      return group.add(reel);\n    });\n\n    group.centerX = this._bg.centerX;\n    group.y = this._bg.y + 20;\n\n    const mask = getMaskGraphics({ alpha: 0.9 });\n    mask.x = this._bg.left;\n    mask.y = this._bg.top;\n\n    this.add((group.mask = mask));\n    this.add((this._reelsGroup = group));\n  }\n\n  _buildBlocker() {\n    this._blocker = this.add(getMaskGraphics({ alpha: 0 }));\n    this._blocker.x = this._bg.left;\n    this._blocker.y = this._bg.top;\n  }\n}\n","import { ASSETS } from '../../../constants';\nimport { store } from '../../../models/store';\nimport { makeImage } from '../../../utils';\nimport { Container } from '../../../utils/container';\n\nexport class SlotView extends Container {\n  constructor(model) {\n    super();\n\n    this.name = 'SlotView';\n\n    const { uuid, type } = model;\n    this._uuid = uuid;\n    this._type = type;\n    this._width = null;\n    this._height = null;\n    this._blur = false;\n\n    this._updateDimensions();\n\n    this._build();\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get top() {\n    return this.y - this.height * this._slot.anchor.y;\n  }\n\n  get bottom() {\n    return this.y + this.height * this._slot.anchor.y;\n  }\n\n  setY(value) {\n    this.y = value + this.height * this._slot.anchor.y;\n  }\n\n  setType(value) {\n    this._type = value;\n\n    this._buildSlot();\n    this._updateDimensions();\n  }\n\n  blur() {\n    this._blur = true;\n    this._slot.loadTexture(ASSETS, `slot/slot-blur-${this._type + 1}.png`);\n  }\n\n  unBlur() {\n    this._blur = false;\n    this._slot.loadTexture(ASSETS, `slot/slot-${this._type + 1}.png`);\n  }\n\n  highlightSpinResult() {\n    this.game.add\n      .tween(this.scale)\n      .to({ x: '-0.1', y: '-0.1' }, 600, Phaser.Easing.Quadratic.InOut, true, 800, 0, true);\n  }\n\n  _build() {\n    this._buildSlot();\n  }\n\n  _buildSlot() {\n    this._slot && this._slot.destroy();\n\n    const slot = makeImage({ frame: `slot/slot-${this._blur ? 'blur-' : ''}${this._type + 1}.png` });\n    slot.anchor.set(0.5);\n\n    this.addChild((this._slot = slot));\n  }\n\n  _updateDimensions() {\n    const { slotDimensions } = store.game.slotMachine.config;\n    this._width = slotDimensions[this._type].width;\n    this._height = slotDimensions[this._type].height;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getMainGridConfig } from '../configs/grid-configs';\nimport { AdStatus } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ResizablePhaser2Grid } from '../utils/resizable-phaser2-grid';\nimport { BackgroundView } from './background/background-view';\nimport { CTAView } from './cta/cta-view';\nimport { EffectsView } from './effects/effects-view';\nimport { ForegroundView } from './foreground/foreground-view';\nimport { GameView } from './game/game-view';\nimport { UIView } from './ui/ui-view';\n\nexport class MainView extends ResizablePhaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    this.build();\n\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  get name() {\n    return 'MainView';\n  }\n\n  getGridConfig() {\n    return getMainGridConfig();\n  }\n\n  rebuild(config) {\n    super.rebuild(config);\n\n    this.updateTransform();\n    this._effectView.resize();\n  }\n\n  build() {\n    super.build(this.getGridConfig());\n\n    this.setChild('main', new BackgroundView());\n    this.setChild('main', new GameView());\n    this.setChild('main', new UIView());\n    this.setChild('main', (this._ctaView = CI_API.CTA.Instantiate(CTAView)));\n    this.setChild('main', new ForegroundView());\n    this.setChild('main', (this._effectView = new EffectsView()));\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this.rebuildChild(this._ctaView);\n        this._ctaView.postRebuild();\n        break;\n      default:\n    }\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getCoinImageConfig } from '../../configs/image-configs';\nimport { getBalanceBgNinePatchConfig } from '../../configs/ninepatch-configs';\nimport { getBalanceLabelTextConfig } from '../../configs/text-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { store } from '../../models/store';\nimport { makeImage, makeNinePatch, makeText, tweenNumber } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class BalanceView extends Container {\n  constructor() {\n    super();\n    this._build();\n\n    lego.event.on(ModelEvents.PlayerModel.BalanceUpdate, this._onBalanceUpdate, this);\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._numberTween);\n\n    super.destroy();\n  }\n\n  rebuild() {\n    this._bg.scale.y = LP(-1, 1);\n    this._label.fontSize = LP(28, 32);\n    this._coin.x = this._label.left - 40;\n  }\n\n  _onBalanceUpdate(newValue, oldValue) {\n    this._numberTween = tweenNumber({\n      from: oldValue,\n      to: newValue,\n      duration: 1000,\n      step: 1,\n      context: this,\n      onUpdate: value => this._setText(Math.floor(value))\n    });\n  }\n\n  _build() {\n    this.addChild((this._bg = this._buildBg()));\n    this.addChild((this._coin = this._buildCoin()));\n    this.addChild((this._label = this._buildLabel()));\n\n    this.rebuild();\n  }\n\n  _buildBg() {\n    const bg = makeNinePatch(getBalanceBgNinePatchConfig());\n    return bg;\n  }\n\n  _buildCoin() {\n    const coin = makeImage(getCoinImageConfig());\n    coin.scale.set(0.6);\n    coin.position.set(-136, 5);\n    return coin;\n  }\n\n  _buildLabel() {\n    const text = makeText(getBalanceLabelTextConfig(store.player.balance.toLocaleString()));\n    text.anchor.set(0.5);\n\n    return text;\n  }\n\n  _setText(n) {\n    this._label.setText({\n      text: n.toLocaleString(),\n      ignoreLocalization: true,\n      toString() {\n        return this;\n      }\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getBetMinusButtonConfig, getBetPlusButtonConfig } from '../../configs/button-configs';\nimport { getBetLabelTextConfig, getBetTextConfig } from '../../configs/text-configs';\nimport { SlotMachineState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { fitText, makeText } from '../../utils';\nimport { Button } from '../../utils/button/button';\nimport { PairInfoComponent } from './pair-info-component';\n\nexport class BetView extends PairInfoComponent {\n  constructor() {\n    super({\n      label: getBetLabelTextConfig(),\n      text: getBetTextConfig()\n    });\n\n    this._bet = null;\n    this._label = null;\n    this._plus = null;\n    this._minus = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.PlayerModel.BetUpdate, this._onBetUpdate, this);\n    lego.event.on(ModelEvents.SlotMachineModel.StateUpdate, this._onSlotMachineStateUpdate, this);\n  }\n\n  _onBetUpdate(value) {\n    this._setBet(value);\n  }\n\n  _onSlotMachineStateUpdate(value) {\n    value === SlotMachineState.Idle ? this._checkForButtonsState() : this._switchButtonsEnable(false);\n  }\n\n  _build() {\n    this.addChild((this._plus = this._buildPlusBtn()));\n    this.addChild((this._minus = this._buildMinusBtn()));\n    this.addChild((this._bet = this._buildBetText()));\n    this.addChild((this._label = this._buildLabel()));\n\n    this._setBet(store.player.bet);\n  }\n\n  _buildLabel() {\n    const label = makeText(getBetLabelTextConfig());\n    label.anchor.set(0.5);\n    label.x = LP(-95, -108);\n    if (this._plus) {\n      label.y = this._plus.centerY + 2;\n    }\n    return label;\n  }\n\n  _buildBetText() {\n    const bet = makeText(getBetTextConfig());\n    bet.anchor.set(0.5);\n    bet.x = this._plus.left - (this._plus.left - this._minus.right) / 2;\n    bet.y = this._plus.centerY + 3;\n    return bet;\n  }\n\n  _buildPlusBtn() {\n    const btn = new Button(getBetPlusButtonConfig());\n    btn.onClick.add(this._onButtonClick, this, 0, 1);\n    btn.x = LP(btn.width * 1.95 - 1, btn.width * 2.18);\n    btn.y = -3;\n    btn.scale.x = -1;\n\n    return btn;\n  }\n\n  _buildMinusBtn() {\n    const btn = new Button(getBetMinusButtonConfig());\n    btn.onClick.add(this._onButtonClick, this, 0, -1);\n    btn.x = LP(-btn.width + 6, -btn.width * 1.2);\n    btn.y = -3;\n\n    return btn;\n  }\n\n  _setBet(value) {\n    this._checkForButtonsState();\n    this._setText(`${value.toLocaleString()}`);\n  }\n\n  _setText(text) {\n    this._bet.setText({\n      text,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n\n    fitText(this._bet, this._plus.left - this._minus.right);\n  }\n\n  _checkForButtonsState() {\n    const { game, player } = store;\n    const { bet } = player;\n    const { max, min } = game.slotMachine.config.bet;\n\n    this._minus.switchEnable(bet !== min);\n    this._plus.switchEnable(bet !== max);\n  }\n\n  _switchButtonsEnable(enable) {\n    this._minus.switchEnable(enable);\n    this._plus.switchEnable(enable);\n  }\n\n  _onButtonClick(target, value) {\n    lego.event.emit(ViewEvents.BetView.ButtonClick, value);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getControlsGridConfig } from '../../configs/grid-configs';\nimport { getUiOrnamentImageConfig } from '../../configs/image-configs';\nimport { getWinBetBgNinePathConfig } from '../../configs/ninepatch-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { makeGradient, makeImage, makeNinePatch } from '../../utils';\nimport { Container } from '../../utils/container';\nimport { BetView } from './bet-view';\nimport { SpinView } from './spin-view';\nimport { WinView } from './win-view';\n\nexport class ControlsView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    this._bg = null;\n    this._spin = null;\n    this._win = null;\n    this._bet = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.GameModel.SpinBtnUpdate, this._onSpinBtnUpdate, this);\n  }\n\n  get name() {\n    return 'ControlsView';\n  }\n\n  getGridConfig() {\n    return getControlsGridConfig();\n  }\n\n  rebuild(config) {\n    super.rebuild(config);\n\n    const scale = LP(0.64, 1);\n    this._ornamentL.scale.set(scale);\n    this._ornamentR.scale.set(scale);\n    this._ornamentL.scale.x *= -1;\n\n    this._ornamentL.bottom = this._bg.bottom + 8;\n    this._ornamentR.bottom = this._bg.bottom + 8;\n\n    this._ornamentL.x = this._bg.left + 28;\n    this._ornamentR.x = this._bg.right - 28;\n  }\n\n  _onSpinBtnUpdate(value) {\n    value && this._buildSpin();\n  }\n\n  _build() {\n    super.build(this.getGridConfig());\n\n    this._buildBg();\n    this._buildWinBet();\n  }\n\n  _buildBg() {\n    const bg = makeGradient({\n      width: 10,\n      height: 170,\n      horizontal: 0,\n      vertical: 1,\n      colors: [\n        {\n          percent: 0,\n          color: '#606d80'\n        },\n        {\n          percent: 0.01,\n          color: '#323845'\n        },\n        {\n          percent: 0.03,\n          color: '#000513'\n        },\n        {\n          percent: 0.49,\n          color: '#011b3e'\n        },\n        {\n          percent: 1,\n          color: '#010817'\n        }\n      ]\n    });\n\n    const ornamentConfig = getUiOrnamentImageConfig();\n    const ornamentL = makeImage(ornamentConfig);\n    const ornamentR = makeImage(ornamentConfig);\n\n    this.setChild('bg', (this._bg = bg));\n    this.addChild((this._ornamentL = ornamentL));\n    this.addChild((this._ornamentR = ornamentR));\n  }\n\n  _buildWinBet() {\n    const cont = new Container();\n\n    const winBetBg = makeNinePatch(getWinBetBgNinePathConfig());\n\n    this._win = new WinView();\n    this._bet = new BetView();\n\n    cont.addChild(winBetBg);\n    cont.addChild(this._win);\n    cont.addChild(this._bet);\n\n    this._win.y = -this._win.height / 1.5 + 3;\n    this._bet.y = this._bet.height / 2 + 3;\n\n    winBetBg.scale.set(0.95);\n\n    this.setChild('win_bet', cont);\n  }\n\n  _buildSpin() {\n    this.setChild('spin', (this._spin = new SpinView()));\n  }\n}\n","import { makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class PairInfoComponent extends Container {\n  constructor(config) {\n    super();\n\n    const { label, text } = config;\n    this._buildLabel(label);\n    this._buildText(text);\n  }\n\n  _buildLabel(labelConfig) {\n    const label = makeText(labelConfig);\n\n    this.addChild(label);\n  }\n\n  _buildText(textConfig) {\n    const text = makeText(textConfig);\n    text.anchor.set(0.5);\n    return this.addChild(text);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getPersistentCtaButtonConfig } from '../../configs/button-configs';\nimport { ViewEvents } from '../../events/view-events';\nimport { Button } from '../../utils/button/button';\n\nexport class PersistentCTAView extends Button {\n  constructor() {\n    super(getPersistentCtaButtonConfig());\n    this.onClick.add(() => lego.event.emit(ViewEvents.PersistentCtaView.Click), this);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getFreeSpinButtonConfig, getSpinButtonConfig, getStopButtonConfig } from '../../configs/button-configs';\nimport { SlotMachineState, SpinBtnState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { Button, FreeSpinButton } from '../../utils/button/button';\nimport { Container } from '../../utils/container';\n\nexport class SpinView extends Container {\n  constructor() {\n    super();\n    this.name = 'SpinView';\n\n    this._spinBtn = null;\n    this._stopBtn = null;\n    this._freeSpinBtn = null;\n    this._activeBtn = null;\n\n    this._build();\n\n    lego.event\n      .on(ModelEvents.SpinButtonModel.StateUpdate, this._onSpinStateUpdate, this)\n      .on(ModelEvents.SpinButtonModel.ActiveUpdate, this._onSpinActiveUpdate, this)\n      .on(ModelEvents.SlotMachineModel.StateUpdate, this._onSlotMachineStateUpdate, this);\n\n    // setTimeout(() => {\n    //   this._setFreeSpinsState();\n    //   this._activeBtn.switchEnable(true);\n    // }, 1000);\n  }\n\n  _onSpinStateUpdate(value) {\n    switch (value) {\n      case SpinBtnState.FreeSpin:\n        this._setFreeSpinsState();\n        break;\n      case SpinBtnState.Spin:\n        this._setSpinState();\n        break;\n      case SpinBtnState.Stop:\n        this._setStopState();\n        break;\n      default:\n    }\n  }\n\n  _onSpinActiveUpdate() {\n    this._checkForButtonActive();\n  }\n\n  _checkForButtonsState() {\n    const { state } = store.game.spinBtn;\n    state === SpinBtnState.Spin ? this._setSpinState() : this._setStopState();\n  }\n\n  _onSlotMachineStateUpdate(state) {\n    switch (state) {\n      case SlotMachineState.Spin:\n        this._updateFreeSpinBtnText();\n        break;\n      default:\n    }\n  }\n\n  _setSpinState() {\n    this._spinBtn.visible = true;\n    this._stopBtn.visible = false;\n    this._freeSpinBtn.visible = false;\n    this._activeBtn = this._spinBtn;\n  }\n\n  _setStopState() {\n    this._stopBtn.visible = true;\n    this._spinBtn.visible = false;\n    this._freeSpinBtn.visible = false;\n\n    this._activeBtn = this._stopBtn;\n  }\n\n  _setFreeSpinsState() {\n    this._stopBtn.visible = false;\n    this._spinBtn.visible = false;\n    this._freeSpinBtn.visible = true;\n    this._activeBtn = this._freeSpinBtn;\n\n    this.bringToTop(this._freeSpinBtn);\n  }\n\n  _checkForButtonActive() {\n    const { active } = store.game.spinBtn;\n    this._activeBtn.switchEnable(active);\n  }\n\n  _updateFreeSpinBtnText() {\n    const { slotMachine } = store.game;\n    const { spinsCount } = slotMachine;\n    const { number_of_extra_spins, first_slot_spins } = CI_API.Globals.PARAMS;\n\n    this._freeSpinBtn.setText({\n      text: `${number_of_extra_spins - (spinsCount - first_slot_spins + 1)} / ${number_of_extra_spins}`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n  }\n\n  _build() {\n    const freeSpinBtn = new FreeSpinButton(getFreeSpinButtonConfig());\n    const spinBtn = new Button(getSpinButtonConfig());\n    const stopBtn = new Button(getStopButtonConfig());\n\n    freeSpinBtn.onClick.add(this._onSpinClick, this);\n    spinBtn.onClick.add(this._onSpinClick, this);\n    stopBtn.onClick.add(this._onStopClick, this);\n\n    freeSpinBtn.switchEnable(false);\n    spinBtn.switchEnable(false);\n    stopBtn.switchEnable(false);\n\n    this.addChild((this._freeSpinBtn = freeSpinBtn));\n    this.addChild((this._spinBtn = spinBtn));\n    this.addChild((this._stopBtn = stopBtn));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _onSpinClick() {\n    lego.event.emit(ViewEvents.SpinView.Spin);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _onStopClick() {\n    lego.event.emit(ViewEvents.SpinView.Stop);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getUIGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { TutorialView } from '../foreground/tutorial-view';\nimport { BalanceView } from './balance-view';\nimport { ControlsView } from './controls-view';\nimport { PersistentCTAView } from './persistent-cta-view';\n\nexport class UIView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    super.build(this.getGridConfig());\n\n    lego.event\n      .on(ModelEvents.AdModel.PersistentCtaUpdate, this._onPersistentCtaUpdate, this)\n      .on(ModelEvents.GameModel.SlotMachineUpdate, this._onSlotMachineUpdate, this)\n      .on(ModelEvents.Store.PlayerUpdate, this._onPlayerUpdate, this)\n      .on(ModelEvents.AdModel.TutorialUpdate, this._onTutorialUpdate, this);\n  }\n\n  get name() {\n    return 'UIView';\n  }\n\n  getGridConfig() {\n    return getUIGridConfig();\n  }\n\n  rebuild(config) {\n    this._balanceView && this._balanceView.rebuild();\n    this._tutorialView && this._tutorialView.rebuild();\n\n    super.rebuild(config);\n  }\n\n  // TUTORIAL\n  _onTutorialUpdate(tutorial) {\n    tutorial ? this._buildTutorial() : this._destroyTutorial();\n  }\n\n  _buildTutorial() {\n    this._tutorialView = new TutorialView();\n    this._tutorialView.onSequenceReady.add(this._onTutorialSequenceReady, this);\n  }\n\n  _onTutorialSequenceReady() {\n    this.setChild('tutorial', this._tutorialView);\n  }\n\n  _destroyTutorial() {\n    this._tutorialView.destroy();\n  }\n\n  // PERSISTENT\n  _onPersistentCtaUpdate(persistentCta) {\n    persistentCta ? this._buildPersistentCta() : this._destroyPersistentCta();\n  }\n\n  _buildPersistentCta() {\n    this.setChild('p_cta', (this._persistentCtaView = new PersistentCTAView()));\n  }\n\n  _destroyPersistentCta() {\n    this._persistentCtaView.destroy();\n  }\n\n  // BALANCE\n  _onPlayerUpdate(player) {\n    player ? this._buildBalance() : this._destroyBalance();\n  }\n\n  _buildBalance() {\n    this._balanceView = new BalanceView();\n    this.setChild('balance', this._balanceView);\n  }\n\n  _destroyBalance() {\n    this._balanceView.destroy();\n  }\n\n  // CONTROLS\n  _onSlotMachineUpdate(slotMachine) {\n    slotMachine ? this._buildControls() : this._destroyControls();\n  }\n\n  _buildControls() {\n    this._controlsView = new ControlsView();\n    this.setChild('footer', this._controlsView);\n  }\n\n  _destroyControls() {\n    this._controlsView.destroy();\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getWinLabelTextConfig, getWinTextConfig } from '../../configs/text-configs';\nimport { SlotMachineState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { fitText, makeText, tweenNumber } from '../../utils';\nimport { PairInfoComponent } from './pair-info-component';\n\nexport class WinView extends PairInfoComponent {\n  constructor() {\n    super({\n      label: getWinLabelTextConfig(),\n      text: getWinTextConfig()\n    });\n\n    this._money = null;\n    this._label = null;\n\n    this._build();\n\n    lego.event.on(ModelEvents.SlotMachineModel.StateUpdate, this._onSlotMachineStateUpdate, this);\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._numberTween);\n\n    super.destroy();\n  }\n\n  _onSlotMachineStateUpdate() {\n    const { state, spinResult } = store.game.slotMachine;\n\n    switch (state) {\n      case SlotMachineState.Spin:\n        this._setText(0);\n        break;\n      case SlotMachineState.Action:\n        this._tweenText(spinResult.prize);\n        break;\n      default:\n    }\n  }\n\n  _tweenText(to) {\n    const from = 0;\n\n    this._numberTween = tweenNumber({\n      from,\n      to,\n      duration: 1000,\n      step: 1,\n      context: this,\n      onStart: () => this._onPrizeTweenStart(),\n      onComplete: () => this._onPrizeTweenComplete(),\n      onUpdate: value => this._onPrizeTweenUpdate(value)\n    });\n  }\n\n  _onPrizeTweenStart() {\n    lego.event.emit(ViewEvents.WinView.ScoreTweenStart);\n  }\n\n  _onPrizeTweenComplete() {\n    lego.event.emit(ViewEvents.WinView.ScoreTweenComplete);\n  }\n\n  _onPrizeTweenUpdate(value) {\n    this._setText(Math.floor(value));\n  }\n\n  _build() {\n    this.addChild((this._money = this._buildMoneyText()));\n    this.addChild((this._label = this._buildLabel()));\n\n    this._setText(0);\n  }\n\n  _buildMoneyText() {\n    const money = makeText(getWinTextConfig());\n    money.anchor.set(0.5);\n    money.x = LP(25, 25);\n    money.y = 2;\n\n    return money;\n  }\n\n  _buildLabel() {\n    const label = makeText(getWinLabelTextConfig());\n    label.anchor.set(0.5);\n    label.x = LP(-93, -108);\n\n    return label;\n  }\n\n  _setText(n) {\n    this._money.setText({\n      text: `${n.toLocaleString()}`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n\n    fitText(this._money, 200);\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nconst toSnakeCase = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('_');\n\nfunction logCtaOverride() {\n  analytics.logProgress('cta_override', 'restart');\n}\n\nfunction logIdledCta() {\n  const { spinsToCta } = store.game.slotMachine;\n  const { spinsCount } = store.game.slotMachine;\n\n  analytics.logProgress('spins_left', `${spinsToCta - spinsCount}`);\n}\n\nfunction onSlotMachineClick() {\n  analytics.logProgress('spin_slots', 'full_screen');\n}\n\nfunction logItemsToCtaReached() {\n  analytics.logProgress('spins_to_cta', '');\n}\n\nfunction onGameDown(pointer) {\n  if (!pointer.targetObject || !pointer.targetObject.sprite) {\n    analytics.logClick('first_interaction_click', 'unknown');\n    return;\n  }\n  analytics.logClick('first_interaction_click', toSnakeCase(pointer.targetObject.sprite.name));\n}\n\nfunction onCtaScreenClick() {\n  analytics.logClick('cta_click', 'cta_overlay');\n}\n\nfunction onCtaPlayClick() {\n  analytics.logClick('cta_click', 'cta_button');\n}\n\nfunction onPersistentCtaClick() {\n  analytics.logClick('cta_click', 'persistent_cta_button');\n}\n\nfunction onTutorialCompleteUpdate(complete) {\n  if (complete) {\n    analytics.logProgress('tutorial', 'complete');\n  }\n}\n\nfunction onViewStateUpdate(state) {\n  switch (state) {\n    case AdViewState.Create:\n      CI_API.game.input.onDown.addOnce(onGameDown, this);\n      lego.event.off(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this);\n      break;\n    default:\n  }\n}\n\nfunction onAdStatusUpdate(status) {\n  switch (status) {\n    case AdStatus.Restart:\n      logCtaOverride();\n      break;\n    default:\n  }\n}\n\nfunction onCtaReasonUpdate(reason) {\n  switch (reason) {\n    case GameOverReasons.Idled:\n      logIdledCta();\n      break;\n    case GameOverReasons.ItemsToCtaReached:\n      logItemsToCtaReached();\n      break;\n    default:\n      throw new Error(`Unknown CTA reason \"${reason}\"`);\n  }\n}\n\nexport function AnalyticsObservant() {\n  lego.event\n    .on(ViewEvents.CtaView.ScreenClick, onCtaScreenClick, this)\n    .on(ViewEvents.CtaView.PlayClick, onCtaPlayClick, this)\n    .on(ViewEvents.PersistentCtaView.Click, onPersistentCtaClick, this)\n    .on(ModelEvents.TutorialModel.CompleteUpdate, onTutorialCompleteUpdate, this)\n    .on(ModelEvents.CtaModel.ReasonUpdate, onCtaReasonUpdate, this)\n    .on(ModelEvents.AdModel.StatusUpdate, onAdStatusUpdate, this)\n    .on(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this)\n    .on(ViewEvents.SlotMachineView.Spin, onSlotMachineClick, this);\n}\n","import { lego } from '@armathai/lego';\nimport { GameStatus, SlotMachineState, SpinResultType } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nlet sound;\n\nfunction play(id, volume) {\n  sound.play(id, volume);\n}\n\nfunction stop(id) {\n  sound.stop(id);\n}\n\nfunction onLoadCompleteUpdate(complete) {\n  if (!complete) {\n    return;\n  }\n  sound = soundLoader.addAudioSprite('audio');\n}\n\nfunction playGameTheme() {\n  play('game-theme', 1);\n}\n\nfunction playCount() {\n  play('count', 1);\n}\n\nfunction stopCount() {\n  stop('count');\n}\n\nfunction playCleopatraSlot() {\n  play('cleopatra', 1);\n}\n\nfunction playCaesarSlot() {\n  play('caesar', 1);\n}\n\nfunction playClick() {\n  play('click', 1);\n}\n\nfunction onWin(spinResult) {\n  const { type, reels } = spinResult;\n  if (type === 'mega') {\n    const winSlotType = reels[0][0].type;\n\n    switch (winSlotType) {\n      case 8:\n        playCleopatraSlot();\n        break;\n      case 9:\n        playCaesarSlot();\n        break;\n      default:\n    }\n  } else {\n    play('win', 1);\n  }\n}\n\nfunction gameStatusUpdate(status) {\n  switch (status) {\n    case GameStatus.Reward:\n      play('reward', 1);\n      break;\n    default:\n  }\n}\n\nfunction onMachineStateUpdate(state) {\n  const { spinResult } = store.game.slotMachine;\n\n  switch (state) {\n    case SlotMachineState.Spin:\n      play('reel-tick', 2);\n      break;\n    case SlotMachineState.Action:\n      stop('reel-tick');\n\n      switch (spinResult.type) {\n        case SpinResultType.Loose:\n          break;\n        default:\n          onWin(spinResult);\n      }\n\n      break;\n    default:\n  }\n}\n\nexport function SoundObservant() {\n  lego.event\n    .on(ModelEvents.LoadModel.CompleteUpdate, onLoadCompleteUpdate, this)\n    .once(ViewEvents.Game.UserInteraction, playGameTheme, this)\n    .on(ModelEvents.GameModel.StatusUpdate, gameStatusUpdate, this)\n    .on(ModelEvents.SlotMachineModel.StateUpdate, onMachineStateUpdate, this)\n    .on(ViewEvents.CtaView.ScoreTweenStart, playCount, this)\n    .on(ViewEvents.CtaView.ScoreTweenComplete, stopCount, this)\n    .on(ViewEvents.WinView.ScoreTweenStart, playCount, this)\n    .on(ViewEvents.WinView.ScoreTweenComplete, stopCount, this)\n    .on(ViewEvents.BetView.ButtonClick, playClick, this)\n    .on(ViewEvents.SpinView.Spin, playClick, this)\n    .on(ViewEvents.SpinView.Stop, playClick, this)\n    .on(ViewEvents.CtaView.PlayClick, playClick, this)\n    .on(ViewEvents.PersistentCtaView.Click, playClick, this)\n    .on(ViewEvents.SoundView.Click, playClick, this);\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nfunction hideSplash() {\n  wrapper_hide_splash();\n}\n\nfunction onLoadProgress(progress) {\n  wrapper_load_progress(progress);\n}\n\nfunction onLoadComplete() {\n  wrapper_preload_complete();\n}\n\nfunction onViewStateUpdate(state) {\n  state === AdViewState.Create && hideSplash();\n}\n\nfunction clickGo() {\n  wrapper_click_go();\n}\n\nfunction onCtaVisibleUpdate(visible) {\n  if (!visible) {\n    return;\n  }\n\n  if (store.ad.cta.reason === GameOverReasons.Unknown) {\n    // eslint-disable-next-line no-console\n    console.error('Please provide game over reason');\n  }\n\n  wrapper_mark_cta(store.ad.cta.reason);\n}\n\nfunction markInteraction() {\n  wrapper_mark_interaction();\n}\n\nexport function WrapperObservant() {\n  lego.event\n    .on(ModelEvents.LoadModel.ProgressUpdate, onLoadProgress, this)\n    .on(ModelEvents.LoadModel.CompleteUpdate, onLoadComplete, this)\n    .on(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this)\n    .on(ViewEvents.PersistentCtaView.Click, clickGo, this)\n    .on(ViewEvents.CtaView.ScreenClick, clickGo, this)\n    .on(ViewEvents.CtaView.PlayClick, clickGo, this)\n    .on(ModelEvents.CtaModel.VisibleUpdate, onCtaVisibleUpdate, this)\n    .on(ViewEvents.Game.UserInteraction, markInteraction, this);\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState } from '../constants';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\nimport { MainView } from '../objects/main-view';\nimport { manageOrientedTweens } from '../utils';\n\nexport class GameState extends Phaser.State {\n  constructor() {\n    super();\n\n    this._adModel = store.ad;\n    this._mainView = null;\n  }\n\n  init() {\n    store.ad.viewState = AdViewState.Init;\n  }\n\n  preload(game) {\n    super.preload(game);\n\n    store.ad.viewState = AdViewState.Preload;\n  }\n\n  create(game) {\n    super.create(game);\n\n    this._mainView = new MainView();\n\n    this.input.onDown.add(() => {\n      lego.event.emit(ViewEvents.Game.UserInteraction);\n    });\n\n    // @ts-ignore\n    this.game.world.handleResize = orientation => {\n      manageOrientedTweens();\n      lego.event.emit(ViewEvents.Game.Resize, orientation);\n    };\n\n    store.ad.viewState = AdViewState.Create;\n  }\n\n  shutdown(game) {\n    store.ad.viewState = AdViewState.ShutDown;\n\n    super.shutdown(game);\n  }\n\n  update() {\n    const { Globals, game } = CI_API;\n\n    super.update(game);\n\n    if (ad_state === 'live' && this._adModel.status !== AdStatus.Cta) {\n      if (game.time.totalElapsedSeconds() - Globals.LAST_INTERACTION_TIME > Globals.PARAMS.cta_on_idle_time * 0.001) {\n        lego.event.emit(ViewEvents.GameState.CtaIdleTime);\n      }\n    }\n  }\n\n  victory(_reason) {\n    //\n  }\n\n  defeat(_reason) {\n    //\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { SlotSpineMap, Spines } from '../configs/spine-configs';\nimport LU from '../display/layout-utils';\nimport { ViewEvents } from '../events/view-events';\nimport '../kernel/atlas-rescale';\nimport '../kernel/multiple-atlas';\nimport { store } from '../models/store';\n\nexport class PreloaderState extends Phaser.State {\n  init() {\n    if (this.game && this.game.device && this.game.device.touch) {\n      this.game.input.mouse.stop();\n    }\n    this.stage.backgroundColor = '#010101';\n    this.stage.disableVisibilityChange = true;\n\n    LU.init(this.game, true);\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * Enable handlers and use imageLoader to preload assets\n   *\n   * @name preload\n   * @function\n   * @returns {void}\n   */\n  preload() {\n    utils.enableHandlers(this.game);\n\n    imageLoader.registerGame(this.game);\n    /**\n     * Loading assets and modules due to xp-assets.json file params\n     */\n    xp.loadAssets({\n      spine: [\n        { name: Spines.Frame.Key, scale: 1 },\n        ...SlotSpineMap.map(key => {\n          return { name: key, scale: 1 };\n        })\n        //   'tiffy_happy',              // Spine name can be set as the string\n        //   {name:'yeti_dance'},              // Spine name can be set as Object.name value\n        //   {name: 'mr-toffe', scale: 0.5}  // define the custom scale of Spine animation if needed\n        //   {name: 'mr-toffe', scale: 0.5, basePath: 'spineAnimation1/'}  // define custom spine assets path\n      ]\n    });\n    if (CI_API.Globals.PARAMS.sound) {\n      this.preloadAudio();\n    }\n  }\n\n  preloadAudio() {\n    soundLoader.registerGame(this.game);\n    soundLoader.loadAudioSprite(\n      'audio',\n      `${CI_API.Globals.WEB_ROOT}/audio/audio.mp3`,\n      `${CI_API.Globals.WEB_ROOT}/embed/audio.json`\n    );\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   *\n   * @name create\n   * @function\n   * @returns {void}\n   */\n  create() {\n    store.ad.load.complete = true;\n  }\n\n  /**\n   * @name loadUpdate\n   * @function\n   * @returns {void}\n   */\n  loadUpdate() {\n    store.ad.load.progress = this.game.load.progress;\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * ad_state being set to live is important for partnerships\n   *\n   * @name update\n   * @function\n   * @returns {void}\n   */\n  update() {\n    if (ad_state === 'ready') {\n      ad_state = 'live';\n\n      lego.event.emit(ViewEvents.Ad.Live);\n    }\n  }\n}\n","localization.registerStrings({\n  'Spin to earn your prize!': {\n    en: 'Spin to earn your prize!'\n  },\n  'Spin and test your luck!': {\n    en: 'Spin and test your luck!'\n  },\n  \"You're so close to the jackpot! Spin and test your luck!\": {\n    en: \"You're so close to the jackpot!\\nSpin and test your luck!\"\n  },\n  'Stop to earn your prize!': {\n    en: 'Stop to earn your prize!'\n  },\n  'Stop and test your luck!': {\n    en: 'Stop and test your luck!'\n  },\n  \"You're so close to the jackpot! Stop and test your luck!\": {\n    en: \"You're so close to the jackpot!\\nStop and test your luck!\"\n  },\n  tutorial_text_2: {\n    en: 'You won {{0}} free spins!!!'\n  },\n  big_win: {\n    en: 'BIG WIN'\n  },\n  free_spins: {\n    en: 'FREE SPINS'\n  },\n  'GET MORE REWARDS': {\n    en: 'GET MORE\\nREWARDS!'\n  },\n  'Download Now': {\n    en: 'Download Now'\n  },\n  'Play Now': {\n    en: 'Play Now'\n  },\n  Play: {\n    en: 'Play'\n  },\n  Download: {\n    en: 'Download'\n  },\n  Continue: {\n    en: 'Continue'\n  },\n  'Collect Reward': {\n    en: 'Collect Reward'\n  },\n  cta_btn_persistent_text: {\n    en: 'DOWNLOAD NOW'\n  },\n  win: {\n    en: 'Win'\n  },\n  bet: {\n    en: 'Bet'\n  },\n  spin: {\n    en: 'SPIN'\n  },\n  stop: {\n    en: 'STOP'\n  }\n});\n\n","export const last = arr => {\n  return arr.slice(-1)[0];\n};\n","export const sample = arr => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n","import { randomInt } from '../number/random-int';\n\nexport const shuffle = arr => {\n  for (let i = arr.length - 1; i > 0; i -= 1) {\n    const j = randomInt(0, i);\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n};\n","/* eslint-disable class-methods-use-this */\nimport { InputHandler } from './input-handler';\n\nexport class AbstractButton extends InputHandler {\n  constructor({ states, input }) {\n    super();\n\n    this.onClick = new Phaser.Signal();\n    this.states = this.createStates(states);\n    this.inputArea = this.createHitArea(input);\n\n    this.switchEnable(true);\n  }\n\n  switchEnable(value) {\n    super.switchInput(value);\n\n    this.setState('up');\n\n    if (value === false) {\n      this.setState('disable');\n    }\n  }\n\n  // override\n  onDown(_target, _pointer) {\n    this.setState('down');\n  }\n\n  // override\n  onUp(target, pointer, isOver) {\n    this.setState('up');\n\n    if (isOver) {\n      this.onClick.dispatch(this);\n    }\n  }\n\n  createStates({ up = null, down = null, disable = null } = {}) {\n    return {\n      up: up && this.createState(up),\n      down: down && this.createState(down),\n      disable: disable && this.createState(disable)\n    };\n  }\n\n  // abstract\n  createState(_config) {\n    throw new Error('createState abstract function is not implemented');\n  }\n\n  setState(key) {\n    if (!this.states[key]) {\n      return;\n    }\n    Object.keys(this.states).forEach(prop => {\n      const state = this.states[prop];\n      if (!state) {\n        return;\n      }\n      state.visible = false;\n    });\n\n    this.states[key].visible = true;\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { fitText, makeImage, makeNinePatch, makeText } from '..';\nimport { AbstractButton } from './abstract-button';\n\nexport class Button extends AbstractButton {\n  createState(config) {\n    const state = new Phaser.Group(this.game);\n\n    const { bg, label } = config;\n\n    // FRAME\n    const bgObj = bg.width && bg.height ? makeNinePatch(bg) : makeImage(bg);\n    state.add(bgObj);\n\n    // LABEL\n    if (label) {\n      const labelObj = makeText(label);\n      labelObj.anchor.set(0.5);\n      state.add(labelObj);\n\n      fitText(labelObj, bgObj.width * 0.8, bgObj.height * 0.8);\n    }\n\n    return this.add(state);\n  }\n}\n\nexport class FreeSpinButton extends AbstractButton {\n  setText(value) {\n    // @ts-ignore\n    this.states.up.countLabel.setText(value);\n    // @ts-ignore\n    this.states.down.countLabel.setText(value);\n    // @ts-ignore\n    this.states.disable.countLabel.setText(value);\n  }\n\n  createState(config) {\n    const state = new Phaser.Group(this.game);\n\n    const { bg, label, count } = config;\n\n    // FRAME\n    const bgObj = bg.width && bg.height ? makeNinePatch(bg) : makeImage(bg);\n    bgObj.anchor.set(0.5);\n\n    const labelObj = makeText(label);\n    labelObj.anchor.set(0.5);\n    labelObj.y += 15;\n\n    const countObj = makeText(count);\n    countObj.anchor.set(0.5);\n    countObj.y -= 9;\n\n    state.add(bgObj);\n    state.add(labelObj);\n    state.add(countObj);\n\n    // @ts-ignore\n    state.countLabel = countObj;\n\n    fitText(labelObj, bgObj.width * 0.9, bgObj.height * 0.9);\n\n    return this.add(state);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nexport class InputHandler extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n\n    this.inputArea = null;\n  }\n\n  get enabled() {\n    return this.inputArea.input.enabled;\n  }\n\n  switchInput(value) {\n    this.inputArea.input.reset();\n    this.inputArea.input.enabled = value;\n  }\n\n  onDown(_target, _pointer) {}\n\n  onUp(_target, _pointer, _isOver) {}\n\n  onOver(_target, _pointer) {}\n\n  createHitArea({ name = '', shape = null, priority = 0 } = {}) {\n    const gr = this.game.make.graphics();\n    gr.beginFill(0xffffff, 0);\n    gr.drawShape(shape || new Phaser.Rectangle(0, 0, this.width, this.height));\n    gr.endFill();\n\n    gr.inputEnabled = true;\n    // @ts-ignore\n    gr.input.name = name;\n    gr.name = name;\n    gr.input.priorityID = priority;\n    gr.events.onInputDown.add(this.onDown, this);\n    gr.events.onInputUp.add(this.onUp, this);\n    gr.events.onInputOver.add(this.onOver, this);\n    gr.centerX = this.centerX;\n    gr.centerY = this.centerY;\n\n    this.add(gr);\n\n    return gr;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\n\nexport class Container extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n  }\n\n  destroy(destroyChildren = true, soft = false) {\n    lego.event.removeListenersOf(this);\n\n    super.destroy(destroyChildren, soft);\n  }\n}\n\nPhaser2Grid.prototype.destroy = Container.prototype.destroy;\n","/* eslint-disable no-underscore-dangle */\n/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport class CoinFallEmitter extends Phaser.Group {\n  constructor(config) {\n    super(CI_API.game);\n\n    this._config = config;\n    this._particles = [];\n    this._events = [];\n    this._fps = 60;\n  }\n\n  _onFocus() {\n    if (!this.game) {\n      return;\n    }\n\n    this.stop();\n    this.emit();\n  }\n\n  emit() {\n    this.game.onFocus.remove(this._onFocus, this);\n    this.game.onFocus.add(this._onFocus, this);\n\n    const { count, delay } = this._config;\n\n    for (let i = 0; i < count; i += 1) {\n      const dt = getRandom(delay.min, delay.max);\n      const spawnEvent = this.game.time.events.add(dt, this._spawn, this);\n      this._events.push(spawnEvent);\n    }\n  }\n\n  stop(removeActives) {\n    this.game.onFocus.remove(this._onFocus, this);\n\n    this._events.forEach(e => this.game.time.events.remove(e));\n\n    if (removeActives) {\n      this._particles.forEach(p => p.destroy());\n      this._particles = [];\n    }\n  }\n\n  update() {\n    super.update();\n\n    this._particles.forEach(p => {\n      p.__velocity__.x += this._config.gravity.x;\n      p.__velocity__.y += this._config.gravity.y;\n      p.x += p.__velocity__.x / this._fps;\n      p.y += p.__velocity__.y / this._fps;\n      p.rotation += p.__rotation__ / this._fps;\n    });\n  }\n\n  destroy() {\n    this.stop(true);\n    super.destroy();\n  }\n\n  _spawn() {\n    const { particleClass, velocity, area, duration, scale, rotation, repeat } = this._config;\n\n    const velX = getRandom(velocity.x.min, velocity.x.max);\n    const velY = getRandom(velocity.y.min, velocity.y.max);\n    const sc = getRandom(scale.min, scale.max);\n    const rt = getRandom(rotation.min, rotation.max);\n    const dt = getRandom(duration.min, duration.max);\n    const { x: posX, y: posY } = area.shape.random();\n    const config = {\n      velocity: { x: velX, y: velY },\n      rotation: rt\n    };\n\n    // eslint-disable-next-line new-cap\n    const p = new particleClass(config);\n    p.position.set(posX, posY);\n    p.scale.set(sc);\n    p.rotation = rt;\n    p.onEmit();\n\n    const killEvent = this.game.time.events.add(dt, this._kill, this, p, repeat);\n\n    this._events.push(killEvent);\n    this._particles.push(p);\n    this.addChild(p);\n  }\n\n  _kill(particle, revive) {\n    this._particles.splice(this._particles.indexOf(particle), 1);\n    particle.destroy();\n\n    if (revive) {\n      this._spawn();\n    }\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { getCoinFallAnimationConfig } from '../../../configs/animation-configs';\n\nclass Particle extends Phaser.Sprite {\n  constructor(config) {\n    super(CI_API.game, 0, 0, '', '');\n\n    const { velocity, rotation } = config;\n    this.__velocity__ = velocity;\n    this.__rotation__ = rotation;\n\n    this.anchor.set(0.5);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onEmit() {}\n}\n\nexport class CoinFallParticle extends Particle {\n  constructor(config) {\n    super(config);\n\n    this._buildAnimation();\n  }\n\n  onEmit() {\n    this.animations.play('fall');\n  }\n\n  _buildAnimation() {\n    getCoinFallAnimationConfig().data.forEach(d => {\n      const { name, prefix, start, stop, suffix, zeroPad, frameRate, loop } = d;\n      this.animations.add(\n        name,\n        Phaser.Animation.generateFrameNames(prefix, start, stop, suffix, zeroPad),\n        frameRate,\n        loop\n      );\n    });\n  }\n}\n","import { loopRunnable, makeImage, removeRunnable } from '../..';\nimport { sample } from '../../array/sample';\nimport { Container } from '../../container';\nimport { randomReal } from '../../number/random-real';\n\nexport class SparkleEmitter extends Container {\n  emit() {\n    this.stop();\n    this._area = new Phaser.Circle(0, 0, 800);\n    this._spawnRunnable = loopRunnable(20, this._spawn, this);\n  }\n\n  stop() {\n    removeRunnable(this._spawnRunnable);\n    this.removeChildren();\n  }\n\n  _spawn() {\n    const frame = sample(['circle', 'sparkle']);\n    const particle = makeImage({ key: `effects/${frame}.png` });\n\n    const angle = Math.random() * Math.PI * 2;\n\n    const toX = Math.cos(angle) * this._area.radius;\n    const toY = Math.sin(angle) * this._area.radius;\n\n    const rnd = randomReal(0.3, 0.7);\n    const fromX = toX * rnd;\n    const fromY = toY * rnd;\n    const pos = new Phaser.Rectangle(fromX, fromY);\n    const scale = randomReal(0.3, 1);\n    particle.position.set(pos.x, pos.y);\n    particle.alpha = 0;\n\n    const t1 = this.game.add.tween(particle).to({ rotation: 2 * Math.PI }, 5000, null, true, 0, -1);\n    const t2 = this.game.add.tween(particle).to({ alpha: 1 }, 800, Phaser.Easing.Linear.None, true, 0, 0, true);\n    const t3 = this.game.add.tween(particle.scale).to({ x: scale, y: scale }, 800, null, true, 0, 0, true);\n    const t4 = this.game.add.tween(particle).to({ x: toX, y: toY }, 1600, null, true, 0, 0, false);\n\n    t4.onComplete.addOnce(() => {\n      particle.destroy();\n    });\n\n    // @ts-ignore\n    t1.universal = true;\n    // @ts-ignore\n    t2.universal = true;\n    // @ts-ignore\n    t3.universal = true;\n    // @ts-ignore\n    t4.universal = true;\n\n    this.addChild(particle);\n  }\n}\n","/* eslint-disable no-underscore-dangle */\nimport { ASSETS } from '../constants';\nimport { objectKeys } from './object/object-keys';\nimport { UniversalTween } from './tween/universal-tween';\n\nfunction updateTextSize(textGameObject, fontSize) {\n  const styleRef = textGameObject.style;\n  styleRef.fontSize = fontSize;\n  textGameObject.setStyle(styleRef);\n}\n\nexport const delayRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.add(delay, runnable, context, ...args);\n};\n\nexport const removeRunnable = runnable => {\n  return CI_API.game.time.events.remove(runnable);\n};\n\nexport const loopRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.loop(delay, runnable, context, ...args);\n};\n\nexport const postRunnable = (runnable, context, ...args) => {\n  delayRunnable(CI_API.game.time.physicsElapsedMS, runnable, context, ...args);\n};\n\nexport function fitText(textGameObject, width, height) {\n  if (textGameObject.__defaultFontSize__) {\n    updateTextSize(textGameObject, textGameObject.__defaultFontSize__);\n  }\n\n  const { fontSize, width: textWidth, height: textHeight } = textGameObject;\n  const ratioW = width ? width / textWidth : 1;\n  const ratioH = height ? height / textHeight : 1;\n  const ratio = Math.min(Math.min(ratioW, ratioH), 1);\n\n  if (typeof fontSize === 'number') {\n    const newFontSize = fontSize * ratio;\n    updateTextSize(textGameObject, newFontSize);\n  }\n}\n\nexport const getGameBounds = () => {\n  const { width, height } = CI_API.game;\n\n  return new Phaser.Rectangle(0, 0, width, height);\n};\n\nexport function tweenNumber(config) {\n  const {\n    from,\n    to,\n    duration,\n    onUpdate = () => {},\n    onComplete = () => {},\n    onStart = () => {},\n    context,\n    step = 1\n  } = config;\n  let localStep = 0;\n  const tweenObj = { from, to };\n  const t = CI_API.game.add.tween(tweenObj).to({ from: to }, duration, Phaser.Easing.Sinusoidal.Out, true);\n  t.onStart.addOnce(() => {\n    onStart.call(context);\n  });\n  t.onUpdateCallback(tween => {\n    localStep += 1;\n    if (localStep === step) {\n      onUpdate.call(context, tween.target.from);\n      localStep = 0;\n    }\n  });\n  t.onComplete.addOnce(() => {\n    tweenObj.from = to;\n    onUpdate.call(context, tweenObj.from);\n    onComplete.call(context);\n  });\n  return t;\n}\n\nexport function getViewByProperty(prop, value, parent) {\n  const { children } = parent || CI_API.game.world;\n\n  if (!children || children.length === 0) {\n    return null;\n  }\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    if (child[prop] === value) {\n      return child;\n    }\n\n    const view = getViewByProperty(prop, value, child);\n    if (view) {\n      return view;\n    }\n  }\n\n  return null;\n}\n\nexport function makeText(config) {\n  const { text, style = {}, x = 0, y = 0 } = config;\n  const { shadow, gradient, lineSpacing = 0, fontSize } = style;\n\n  const label = CI_API.game.add.text(x, y, text, style);\n  label.lineSpacing = lineSpacing;\n\n  if (fontSize) {\n    // @ts-ignore\n    label.__defaultFontSize__ = fontSize;\n  }\n\n  if (shadow) {\n    const { x: shadowX, y: shadowY, color, blur, shadowStroke, shadowFill } = shadow;\n    label.setShadow(shadowX, shadowY, color, blur, shadowStroke, shadowFill);\n  }\n\n  if (gradient) {\n    //  Here we create a linear gradient on the Text context.\n    //  This uses the exact same method of creating a gradient as you do on a normal Canvas context.\n    const grd = label.context.createLinearGradient(0, 0, 0, label.height);\n    gradient.forEach(data => {\n      const { color, percent } = data;\n      grd.addColorStop(percent, color);\n    });\n\n    label.fill = grd;\n  }\n\n  return label;\n}\n\nexport function makeSpine(config) {\n  const { key, x = 0, y = 0, scalingVariant } = config;\n  return CI_API.game.add.spine(x, y, key, scalingVariant);\n}\n\nexport function makeAnimation(config) {\n  const { key = ASSETS, x = 0, y = 0, data } = config;\n  const animation = CI_API.game.add.sprite(x, y, key);\n  data.forEach(d => {\n    const { name, prefix, start, stop, suffix, zeroPad, frameRate, loop } = d;\n    animation.animations.add(\n      name,\n      Phaser.Animation.generateFrameNames(prefix, start, stop, suffix, zeroPad),\n      frameRate,\n      loop\n    );\n  });\n  return animation;\n}\n\nexport function makeImage(config) {\n  const { frame, key = ASSETS, x = 0, y = 0, tint, scale = { x: 1, y: 1 }, anchor = { x: 0.5, y: 0.5 } } = config;\n  const { x: sx, y: sy } = scale;\n  const { x: ax, y: ay } = anchor;\n\n  const img = CI_API.game.make.sprite(x, y, key, frame);\n\n  if (tint) img.tint = tint;\n  img.scale.set(sx, sy);\n  img.anchor.set(ax, ay);\n\n  return img;\n}\n\nexport function makeNinePatch(config) {\n  const { frame, key = ASSETS, x = 0, y = 0, width, height, tint, anchor = { x: 0.5, y: 0.5 } } = config;\n  const { x: ax, y: ay } = anchor;\n  const ninePatch = CI_API.game.add.ninePatch(x, y, key, frame, width, height);\n  if (tint) ninePatch.tint = tint;\n  ninePatch.anchor.set(ax, ay);\n\n  return ninePatch;\n}\n\nexport function makeEmitter(config) {\n  const { key = ASSETS, parent, x = 0, y = 0, config: emitterConfig, force = { x: 0, y: 0 } } = config;\n  const emitter = CI_API.game.particleStorm.createEmitter();\n  emitter.addToWorld(parent);\n  emitter.force.set(force.x, force.y);\n  return emitter.emit(key, x, y, emitterConfig);\n}\n\nexport const makePixel = (() => {\n  let texture = null;\n\n  return config => {\n    if (!texture) {\n      texture = CI_API.game.make\n        .graphics(0, 0)\n        .beginFill(0xffffff)\n        .drawRect(0, 0, 4, 4)\n        .endFill()\n        .generateTexture();\n    }\n    const { x = 0, y = 0, width, height, alpha = 1, tint = 0x0 } = config;\n    const pixel = CI_API.game.make.sprite(x, y, texture);\n    pixel.width = width;\n    pixel.height = height;\n    pixel.tint = tint;\n    pixel.alpha = alpha;\n\n    return pixel;\n  };\n})();\n\nexport function makeGradient(config) {\n  const { width, height, colors, vertical, horizontal } = config;\n\n  const bmp = CI_API.game.add.bitmapData(width, height);\n  const grd = bmp.context.createLinearGradient(0, 0, width * horizontal, vertical * height);\n  colors.forEach(c => {\n    const { percent, color } = c;\n    grd.addColorStop(percent, color);\n  });\n  bmp.context.fillStyle = grd;\n  bmp.context.fillRect(0, 0, width, height);\n\n  const img = CI_API.game.make.sprite(0, 0, bmp);\n\n  return img;\n}\n\nexport function updateUniversalTweenData(tw) {\n  const { timeline } = tw;\n  const vEnd = tw.getPropertiesEndValue();\n  const vStart = tw.getPropertiesStartValue();\n\n  timeline.forEach((tl, index) => {\n    tw.updateTweenData('vEnd', vEnd, index);\n    tw.updateTweenData('vStart', vStart, index);\n  });\n\n  tw.resume();\n}\n\nexport function completeTween(tw) {\n  const { timeline, target } = tw;\n  tw.stop();\n  CI_API.game.tweens.removeFrom(target);\n\n  timeline.forEach(tl => {\n    // @ts-ignore\n    const { vEnd, vStart, yoyo } = tl;\n    const keys = objectKeys(vEnd);\n\n    keys.forEach(k => {\n      target[k] = yoyo ? vStart[k] : vEnd[k];\n    });\n  });\n\n  tw.onComplete.dispatch();\n}\n\nexport function manageOrientedTweens() {\n  const tweens = CI_API.game.tweens.getAll();\n  tweens.forEach(tw => {\n    if (tw instanceof UniversalTween) {\n      updateUniversalTweenData(tw);\n\n      return;\n    }\n\n    // @ts-ignore\n    if (tw.universal === true) {\n      tw.resume();\n\n      return;\n    }\n\n    completeTween(tw);\n  });\n}\n\nexport function makeUniversalTween(config) {\n  const {\n    target,\n    startValues,\n    endValues,\n    context,\n    duration = 1000,\n    easing = null,\n    autoStart = false,\n    delay = 0,\n    repeat = 0,\n    yoyo = false,\n    from = false\n  } = config;\n\n  const sValues = from ? endValues : startValues;\n  const eValues = from ? startValues : endValues;\n\n  const tw = new UniversalTween(target, sValues, eValues, context);\n  tw.to(eValues.call(context), duration, easing, autoStart, delay, repeat, yoyo);\n\n  return tw;\n}\n\nexport function getRelativeScale(source, destination) {\n  const { width: sourceWidth, height: sourceHeight } = source.getLocalBounds();\n  const { width: destinationWidth, height: destinationHeight } = destination.getBounds();\n\n  return new Phaser.Point(\n    destinationWidth / (sourceWidth * source.parent.worldScale.x),\n    destinationHeight / (sourceHeight * source.parent.worldScale.y)\n  );\n}\n\nexport function getRelativePosition(source, destination) {\n  return source.parent.toLocal(destination.parent.toGlobal(destination.position));\n}\n\nexport function getRelativeTransform(source, destination) {\n  return { scale: getRelativeScale(source, destination), position: getRelativePosition(source, destination) };\n}\n","export const clamp = (value, min, max) => {\n  return Math.min(Math.max(value, min), max);\n};\n","/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n */\nexport const randomInt = (min, max) => {\n  const mi = Math.ceil(min);\n  const ma = Math.floor(max);\n  return Math.floor(Math.random() * (ma - mi + 1)) + mi;\n};\n","/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nexport const randomReal = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n","export const objectKeys = object => {\n  const keys = [];\n  Object.entries(object).forEach(entry => {\n    const key = entry[0];\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      keys.push(key);\n    }\n  });\n  return keys;\n};\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { ViewEvents } from '../events/view-events';\n\nexport class ResizablePhaser2Grid extends Phaser2Grid {\n  constructor(game) {\n    super(game);\n\n    lego.event.on(ViewEvents.Game.Resize, this.onResize, this);\n  }\n\n  onResize() {\n    // @ts-ignore\n    this.rebuild(this.getGridConfig());\n  }\n\n  // @ts-ignore\n  getGridConfig() {\n    throw new Error(`Method \"getGridConfig\" is not implement.`);\n  }\n}\n","export class UniversalTween extends Phaser.Tween {\n  constructor(target, startValues, endValues, context) {\n    super(target, CI_API.game, CI_API.game.tweens);\n    this.__context__ = context;\n    this.getStartValues = startValues;\n    this.getEndValues = endValues;\n  }\n\n  getPropertiesStartValue() {\n    super.start();\n    return this.getStartValues.call(this.__context__);\n  }\n\n  getPropertiesEndValue() {\n    return this.getEndValues.call(this.__context__);\n  }\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"./Types\");\nvar Point_1 = require(\"./utils/geom/Point\");\nvar Rect_1 = require(\"./utils/geom/Rect\");\nvar Utils_1 = require(\"./utils/Utils\");\nvar Cell = /** @class */ (function () {\n    /**\n     * @param config Input configuration object.\n     */\n    function Cell(config) {\n        var name = config.name, bounds = config.bounds, cells = config.cells, scale = config.scale, align = config.align, padding = config.padding, offset = config.offset;\n        this._config = config;\n        this._name = this._getName(name);\n        this._scale = this._getScale(scale);\n        this._align = this._getAlign(align);\n        this._offset = this._getOffset(offset);\n        this._contents = this._getContents();\n        this._bounds = this._getBounds(bounds);\n        this._padding = this._buildPadding(this._getPadding(padding));\n        this._cells = this._buildCells(this._getCells(cells));\n    }\n    Object.defineProperty(Cell.prototype, \"config\", {\n        /**\n         * @description Configuration object reference passed in constructor\n         * @returns {ICellConfig} configuration object\n         */\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"name\", {\n        /**\n         * @description Cell name defined in configuration object\n         * @returns {string} cell name\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"cells\", {\n        /**\n         * @description Array of child cells\n         * @returns {Cell[]} child cells\n         */\n        get: function () {\n            return this._cells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"bounds\", {\n        /**\n         * @description Bounds area in pixels\n         * @returns {Rect} bounds area\n         */\n        get: function () {\n            return this._bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"padding\", {\n        /**\n         * @description Padding area in pixels\n         * @returns {Rect} padding area\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"scale\", {\n        /**\n         * @description Scale type, used to scale contents\n         * @returns {CellScale} scale type\n         */\n        get: function () {\n            return this._scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"align\", {\n        /**\n         * @description Align type, used to align contents\n         * @returns {CellAlign} align type\n         */\n        get: function () {\n            return this._align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"contents\", {\n        /**\n         * @description Contents\n         * @returns {T[]} cell contents\n         */\n        get: function () {\n            return this._contents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"area\", {\n        /**\n         * @description Cell bounds considered paddings\n         * @returns {Rect} Rectangle considered paddings\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"offset\", {\n        /**\n         * @description Cell offset\n         * @returns {Point} cell offset\n         */\n        get: function () {\n            return this._offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @description Returns cells way down of the tree, recursively\n     * @returns {Cell[]} Array of cells\n     */\n    Cell.prototype.getCells = function () {\n        var cells = [];\n        cells.push(this);\n        this._cells.forEach(function (cell) { return cells.push.apply(cells, __spread(cell.getCells())); });\n        return cells;\n    };\n    /**\n     * @description Returns cell based on given name\n     * @param name The name of the cell\n     * @returns {Cell | undefined}\n     */\n    Cell.prototype.getCellByName = function (name) {\n        return this.getCells().find(function (cell) { return cell._name === name; });\n    };\n    Cell.prototype.getCellByContent = function (content) {\n        return this.getCells().find(function (cell) { return cell.contents.includes(content); });\n    };\n    Cell.prototype._getName = function (rawName) {\n        return rawName;\n    };\n    Cell.prototype._getScale = function (rawScale) {\n        return rawScale || Types_1.CellScale.Fit;\n    };\n    Cell.prototype._getAlign = function (rawAlign) {\n        return rawAlign || Types_1.CellAlign.Center;\n    };\n    Cell.prototype._getOffset = function (rawOffset) {\n        return rawOffset ? new Point_1.Point(rawOffset.x || 0, rawOffset.y || 0) : new Point_1.Point(0, 0);\n    };\n    Cell.prototype._getContents = function () {\n        return new Array(0);\n    };\n    Cell.prototype._getCells = function (rawCells) {\n        return rawCells || new Array(0);\n    };\n    Cell.prototype._getBounds = function (rawBounds) {\n        var b = rawBounds ? Utils_1.rawToRect(rawBounds) : new Rect_1.Rect(0, 0, Cell.MIN_SIZE, Cell.MIN_SIZE);\n        var o = this.offset;\n        return new Rect_1.Rect(b.x + o.x, b.y + o.y, b.width, b.height);\n    };\n    Cell.prototype._getPadding = function (rawPadding) {\n        return rawPadding\n            ? typeof rawPadding === 'number'\n                ? Utils_1.numberToRect(rawPadding)\n                : Utils_1.fillRect(rawPadding)\n            : new Rect_1.Rect(0, 0, 1, 1);\n    };\n    Cell.prototype._buildPadding = function (padding) {\n        var px = padding.x, py = padding.y, pw = padding.width, ph = padding.height;\n        var _a = this._bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        return new Rect_1.Rect(bx + px * bw, by + py * bh, bw * pw, bh * ph);\n    };\n    Cell.prototype._buildCells = function (rawCells) {\n        var e_1, _a;\n        var cells = [];\n        var _b = this.area, bw = _b.width, bh = _b.height, bl = _b.left, br = _b.right, bt = _b.top, bb = _b.bottom;\n        try {\n            for (var rawCells_1 = __values(rawCells), rawCells_1_1 = rawCells_1.next(); !rawCells_1_1.done; rawCells_1_1 = rawCells_1.next()) {\n                var rawCell = rawCells_1_1.value;\n                var _c = rawCell.bounds, bounds = _c === void 0 ? new Rect_1.Rect(0, 0, 0, 0) : _c;\n                var configBounds = __assign({}, bounds);\n                bounds.x =\n                    bounds.x !== undefined\n                        ? typeof bounds.x === 'string'\n                            ? bl + Utils_1.px2number(bounds.x)\n                            : bl + bounds.x * bw\n                        : Math.max.apply(Math, __spread([bl], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.right;\n                        })));\n                bounds.y =\n                    bounds.y !== undefined\n                        ? typeof bounds.y === 'string'\n                            ? bt + Utils_1.px2number(bounds.y)\n                            : bt + bounds.y * bh\n                        : Math.max.apply(Math, __spread([bt], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.bottom;\n                        })));\n                bounds.width =\n                    bounds.width !== undefined\n                        ? typeof bounds.width === 'string'\n                            ? Utils_1.px2number(bounds.width)\n                            : bounds.width * bw\n                        : br - bounds.x;\n                bounds.height =\n                    bounds.height !== undefined\n                        ? typeof bounds.height === 'string'\n                            ? Utils_1.px2number(bounds.height)\n                            : bounds.height * bh\n                        : bb - bounds.y;\n                var cell = new Cell(rawCell);\n                cell.config.bounds = configBounds;\n                cells.push(cell);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rawCells_1_1 && !rawCells_1_1.done && (_a = rawCells_1.return)) _a.call(rawCells_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return cells;\n    };\n    Cell.MIN_SIZE = 1 / Number.MAX_SAFE_INTEGER;\n    return Cell;\n}());\nexports.Cell = Cell;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CellScale;\n(function (CellScale) {\n    CellScale[CellScale[\"None\"] = 1] = \"None\";\n    CellScale[CellScale[\"Fit\"] = 2] = \"Fit\";\n    CellScale[CellScale[\"Fill\"] = 3] = \"Fill\";\n    CellScale[CellScale[\"ShowAll\"] = 4] = \"ShowAll\";\n    CellScale[CellScale[\"Envelop\"] = 5] = \"Envelop\";\n    CellScale[CellScale[\"Custom\"] = 6] = \"Custom\";\n})(CellScale = exports.CellScale || (exports.CellScale = {}));\nvar CellAlign;\n(function (CellAlign) {\n    CellAlign[CellAlign[\"None\"] = 1] = \"None\";\n    CellAlign[CellAlign[\"Center\"] = 2] = \"Center\";\n    CellAlign[CellAlign[\"CenterTop\"] = 3] = \"CenterTop\";\n    CellAlign[CellAlign[\"CenterBottom\"] = 4] = \"CenterBottom\";\n    CellAlign[CellAlign[\"LeftCenter\"] = 5] = \"LeftCenter\";\n    CellAlign[CellAlign[\"LeftTop\"] = 6] = \"LeftTop\";\n    CellAlign[CellAlign[\"LeftBottom\"] = 7] = \"LeftBottom\";\n    CellAlign[CellAlign[\"RightCenter\"] = 8] = \"RightCenter\";\n    CellAlign[CellAlign[\"RightTop\"] = 9] = \"RightTop\";\n    CellAlign[CellAlign[\"RightBottom\"] = 10] = \"RightBottom\";\n})(CellAlign = exports.CellAlign || (exports.CellAlign = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Cell_1 = require(\"./Cell\");\nexports.Cell = Cell_1.Cell;\nvar Types_1 = require(\"./Types\");\nexports.CellAlign = Types_1.CellAlign;\nexports.CellScale = Types_1.CellScale;\nvar Point_1 = require(\"./utils/geom/Point\");\nexports.Point = Point_1.Point;\nvar Rect_1 = require(\"./utils/geom/Rect\");\nexports.Rect = Rect_1.Rect;\nvar Utils_1 = require(\"./utils/Utils\");\nexports.align = Utils_1.align;\nexports.fit = Utils_1.fit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"../Types\");\nvar Point_1 = require(\"./geom/Point\");\nvar Rect_1 = require(\"./geom/Rect\");\nfunction rawToRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 0 : _d, _e = _a.height, height = _e === void 0 ? 0 : _e;\n    return new Rect_1.Rect(typeof x === 'string' ? px2number(x) : x, typeof y === 'string' ? px2number(y) : y, typeof width === 'string' ? px2number(width) : width, typeof height === 'string' ? px2number(height) : height);\n}\nexports.rawToRect = rawToRect;\nfunction numberToRect(value) {\n    return new Rect_1.Rect(value, value, 1 - 2 * value, 1 - 2 * value);\n}\nexports.numberToRect = numberToRect;\nfunction fillRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 1 - (x ? x : 0) : _d, _e = _a.height, height = _e === void 0 ? 1 - (y ? y : 0) : _e;\n    return new Rect_1.Rect(x, y, width, height);\n}\nexports.fillRect = fillRect;\nfunction px2number(value) {\n    return parseInt(value, 10);\n}\nexports.px2number = px2number;\n/**\n * @description Represents scale difference needed to scale first dimension compared with second based on scale type\n * @param d1 Dimension to scale\n * @param d2 Dimension to compare with\n * @param scaleType Scale type\n * @returns {Point}\n */\nfunction fit(d1, d2, scaleType) {\n    switch (scaleType) {\n        case Types_1.CellScale.Fit:\n            return _fit(d1, d2);\n        case Types_1.CellScale.Fill:\n            return _fill(d1, d2);\n        case Types_1.CellScale.ShowAll:\n            return _showAll(d1, d2);\n        case Types_1.CellScale.Envelop:\n            return _envelop(d1, d2);\n        case Types_1.CellScale.None:\n            return new Point_1.Point(1, 1);\n        default:\n            throw new Error(\"Unknown scale type: \" + scaleType);\n    }\n}\nexports.fit = fit;\n/**\n * @description Represents position difference needed to align dimension in rect based on align type\n * @param dimension Dimension to align\n * @param rect Rect to align to\n * @param alignType Align type\n * @returns {Point}\n */\nfunction align(dimension, rect, alignType) {\n    var w1 = dimension.width, h1 = dimension.height;\n    var x2 = rect.x, y2 = rect.y, w2 = rect.width, h2 = rect.height;\n    var pos = new Point_1.Point(x2, y2);\n    switch (alignType) {\n        case Types_1.CellAlign.Center:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.CenterTop:\n            return pos.set(x2 + (w2 - w1) / 2, y2);\n        case Types_1.CellAlign.CenterBottom:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1));\n        case Types_1.CellAlign.LeftCenter:\n            return pos.set(x2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.LeftTop:\n            return pos;\n        case Types_1.CellAlign.LeftBottom:\n            return pos.set(x2, y2 + (h2 - h1));\n        case Types_1.CellAlign.RightCenter:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.RightTop:\n            return pos.set(x2 + (w2 - w1), y2);\n        case Types_1.CellAlign.RightBottom:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1));\n        case Types_1.CellAlign.None:\n            return pos;\n        default:\n            throw new Error(\"Unknown align: \" + align);\n    }\n}\nexports.align = align;\nfunction _fit(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return s < 1 ? new Point_1.Point(s, s) : new Point_1.Point(1, 1);\n}\nfunction _showAll(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _envelop(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.max(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _fill(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    return new Point_1.Point(w2 / w1, h2 / h1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a Point in 2D space, with an | x, y | component.\n */\nvar Point = /** @class */ (function () {\n    /**\n     *\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * @description Set the x and y coordinates of the point to the given values.\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    Point.prototype.set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Encapsulates a 2D rectangle with an | x, y, width, height | component\n */\nvar Rect = /** @class */ (function () {\n    /**\n     *\n     * @param x The X coordinate of the top left corner of the Rectangle.\n     * @param y The Y coordinate of the top left corner of the Rectangle.\n     * @param width The width of the Rectangle.\n     * @param height The height of the Rectangle.\n     */\n    function Rect(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Rect.prototype, \"left\", {\n        /**\n         * @description The x coordinate of the left of the Rectangle.\n         */\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"right\", {\n        /**\n         * @description The sum of the x and width properties.\n         */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"top\", {\n        /**\n         * @description The y coordinate of the top of the Rectangle.\n         */\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottom\", {\n        /**\n         * @description The sum of the y and height properties.\n         */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Rect;\n}());\nexports.Rect = Rect;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nvar Command = /** @class */ (function () {\n    function Command() {\n        this._guards = [];\n        this._payloads = [];\n    }\n    Command.prototype.on = function (event, command) {\n        index_1.lego.event.on(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.once = function (event, command) {\n        index_1.lego.event.once(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.off = function (event, command) {\n        var ll = index_1.lego.event.getListeners(event);\n        // @ts-ignore\n        var found = ll.find(function (l) { return l.callback.__command === command; });\n        if (!found) {\n            return this;\n        }\n        index_1.lego.event.off(event, found.callback);\n        return this;\n    };\n    Command.prototype.execute = function () {\n        var e_1, _a;\n        var commands = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            commands[_i] = arguments[_i];\n        }\n        var _b = this, _guards = _b._guards, _payloads = _b._payloads;\n        var passed = !_guards.length || !_guards.find(function (guard) { return !guard.apply(undefined, _payloads); });\n        if (passed) {\n            try {\n                for (var commands_1 = __values(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {\n                    var c = commands_1_1.value;\n                    this._execute.apply(this, __spread([c], _payloads));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            this._resetGuardsAndPayloads();\n        }\n        return this;\n    };\n    Command.prototype.payload = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._payloads = args;\n        return this;\n    };\n    Command.prototype.guard = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._guards = args;\n        return this;\n    };\n    Command.prototype._execute = function (command) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this._resetGuardsAndPayloads();\n        command.apply(undefined, args);\n    };\n    Command.prototype._resetGuardsAndPayloads = function () {\n        this.guard().payload();\n    };\n    Command.prototype._getEventCallback = function (command) {\n        return Object.defineProperties(this._execute.bind(this, command), {\n            __command: { value: command },\n        });\n    };\n    return Command;\n}());\nexports.Command = Command;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map_1 = require(\"./utils/Map\");\nvar Emitter = /** @class */ (function () {\n    function Emitter() {\n        this._events = new Map_1.Map();\n    }\n    Emitter.prototype.getListeners = function (event) {\n        return this._events.get(event) || [];\n    };\n    Emitter.prototype.on = function (name, callback, context) {\n        this._addListener(name, callback, context, false);\n        return this;\n    };\n    Emitter.prototype.once = function (name, callback, context) {\n        this._addListener(name, callback, context, true);\n        return this;\n    };\n    Emitter.prototype.off = function (name, callback, context) {\n        this._removeListener(name, callback, context);\n        return this;\n    };\n    Emitter.prototype.emit = function (name) {\n        var e_1, _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        var llCopy = __spread(ll);\n        try {\n            for (var llCopy_1 = __values(llCopy), llCopy_1_1 = llCopy_1.next(); !llCopy_1_1.done; llCopy_1_1 = llCopy_1.next()) {\n                var l = llCopy_1_1.value;\n                var callback = l.callback, context = l.context, once = l.once;\n                if (once) {\n                    this._removeListener(name, callback, context);\n                }\n                callback.apply(context, args);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (llCopy_1_1 && !llCopy_1_1.done && (_a = llCopy_1.return)) _a.call(llCopy_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Emitter.prototype.removeListenersOf = function (context) {\n        var keys = this._events.keys();\n        for (var i = keys.length - 1; i >= 0; i -= 1) {\n            var name = keys[i];\n            var ll = this.getListeners(name);\n            for (var j = ll.length - 1; j >= 0; j -= 1) {\n                var l = ll[j];\n                if (l.context === context) {\n                    this._removeListener(name, l.callback, context);\n                }\n            }\n        }\n    };\n    Emitter.prototype._addListener = function (name, callback, context, once) {\n        var ll = this.getListeners(name);\n        var l = { callback: callback, context: context, once: once };\n        !ll.length ? this._events.set(name, [l]) : ll.push(l);\n    };\n    Emitter.prototype._removeListener = function (name, callback, context) {\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        for (var i = ll.length - 1; i >= 0; i -= 1) {\n            var l = ll[i];\n            var clb = l.callback, ctx = l.context;\n            if (clb === callback && ctx === context) {\n                ll.splice(i, 1);\n                break;\n            }\n        }\n        if (!ll.length) {\n            this._events.delete(name);\n        }\n    };\n    return Emitter;\n}());\nexports.Emitter = Emitter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Command_1 = require(\"./Command\");\nvar Emitter_1 = require(\"./Emitter\");\nvar Observe_1 = require(\"./Observe\");\nvar Lego = /** @class */ (function () {\n    function Lego() {\n        this.observe = new Observe_1.Observe();\n        this.event = new Emitter_1.Emitter();\n        this.command = new Command_1.Command();\n    }\n    return Lego;\n}());\nexports.Lego = Lego;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nfunction adjustEventName(str) {\n    var clean = str.replace(/[^0-9a-z-A-Z]/g, '').replace(/ +/, ' ');\n    return \"\" + clean.charAt(0).toUpperCase() + clean.slice(1);\n}\nvar Observe = /** @class */ (function () {\n    function Observe() {\n    }\n    Observe.prototype.makeObservable = function (obj) {\n        var e_1, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {\n                var prop = props_1_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    this.createObservable(obj, prop, value);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Observe.prototype.removeObservable = function (obj) {\n        var e_2, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {\n                var prop = props_2_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    Object.defineProperty(obj, prop, {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true,\n                        value: value,\n                    });\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    Observe.prototype.createObservable = function (obj, prop, value) {\n        var eventName = \"\" + obj.__name__ + adjustEventName(prop) + \"Update\";\n        var oldValue = value;\n        var newValue = oldValue;\n        Object.defineProperty(obj, prop, {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return newValue;\n            },\n            set: function (val) {\n                if (val === newValue) {\n                    return;\n                }\n                oldValue = newValue;\n                newValue = val;\n                index_1.lego.event.emit(eventName, newValue, oldValue, obj.uuid);\n            },\n        });\n    };\n    return Observe;\n}());\nexports.Observe = Observe;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lego_1 = require(\"./Lego\");\nvar Utils_1 = require(\"./utils/Utils\");\nexports.not = Utils_1.not;\nexports.lego = new Lego_1.Lego();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map = /** @class */ (function () {\n    function Map() {\n    }\n    Map.prototype.get = function (key) {\n        // @ts-ignore\n        return this[key];\n    };\n    Map.prototype.keys = function () {\n        return Object.keys(this);\n    };\n    Map.prototype.values = function () {\n        var _this = this;\n        var keys = this.keys();\n        // @ts-ignore\n        return keys.map(function (k) { return _this[k]; });\n    };\n    Map.prototype.set = function (key, value) {\n        // @ts-ignore\n        this[key] = value;\n    };\n    Map.prototype.delete = function (key) {\n        var v = this.get(key);\n        // @ts-ignore\n        delete this[key];\n        return v;\n    };\n    Map.prototype.forEach = function (fn) {\n        var _this = this;\n        Object.keys(this).forEach(function (prop, index) { return fn(prop, _this.get(prop), index); });\n    };\n    return Map;\n}());\nexports.Map = Map;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction not(fn) {\n    var wrappedFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return !fn.apply(void 0, __spread(args));\n    };\n    var upperCaseName = fn.name.charAt(0).toUpperCase() + fn.name.slice(1);\n    Object.defineProperties(wrappedFn, {\n        name: { value: \"not\" + upperCaseName },\n    });\n    return wrappedFn;\n}\nexports.not = not;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Debugger = exports.Debug = void 0;\nvar Debug = /** @class */ (function () {\n    function Debug(parent) {\n        this._parent = parent;\n    }\n    Debug.prototype.bringToTop = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._parent.bringToTop(this._debugger);\n    };\n    Debug.prototype.draw = function (cell, lineWidth, parentDebug) {\n        var _this = this;\n        if (lineWidth === void 0) { lineWidth = 10; }\n        var _a = cell.bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        var _b = cell.area, px = _b.x, py = _b.y, pw = _b.width, ph = _b.height;\n        var _c = cell.config.debug, debug = _c === void 0 ? parentDebug : _c;\n        if (debug) {\n            if (this._debugger === undefined) {\n                // Init debugger\n                this._debugger = new Debugger(this._parent.game);\n                this._parent.add(this._debugger);\n            }\n            var color = debug.color, fill = debug.fill;\n            // Draw content area\n            fill\n                ? this._debugger.fillRect(px, py, pw, ph, lineWidth * 0.8, color)\n                : this._debugger.strokeRect(px, py, pw, ph, lineWidth * 0.8, color);\n            // Draw cell bounds\n            this._debugger.strokeRect(bx, by, bw, bh, lineWidth, color);\n        }\n        cell.cells.forEach(function (el) { return _this.draw(el, lineWidth * 0.7, debug); });\n    };\n    Debug.prototype.clear = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.clear();\n    };\n    Debug.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.fillRect(x, y, w, h, lineWidth, color);\n    };\n    Debug.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.strokeRect(x, y, w, h, lineWidth, color);\n    };\n    return Debug;\n}());\nexports.Debug = Debug;\n// tslint:disable-next-line: max-classes-per-file\nvar Debugger = /** @class */ (function (_super) {\n    __extends(Debugger, _super);\n    function Debugger() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Debugger.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.drawRect(x, y, w, h);\n    };\n    Debugger.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.beginFill(color, 0.4);\n        this.drawRect(x, y, w, h);\n        this.endFill();\n    };\n    Debugger.DEFAULT_COLOR = 0xffffff;\n    return Debugger;\n}(Phaser.Graphics));\nexports.Debugger = Debugger;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Phaser2Grid = void 0;\nvar grid_core_1 = require(\"@armathai/grid-core\");\nvar Debugger_1 = require(\"./Debugger\");\nvar Phaser2Grid = /** @class */ (function (_super) {\n    __extends(Phaser2Grid, _super);\n    function Phaser2Grid(game) {\n        var _this = _super.call(this, game) || this;\n        _this._debug = new Debugger_1.Debug(_this);\n        return _this;\n    }\n    Phaser2Grid.prototype.getCellByName = function (name) {\n        return this.grid.getCellByName(name);\n    };\n    Phaser2Grid.prototype.getCellByContent = function (content) {\n        return this.grid.getCellByContent(content);\n    };\n    /**\n     * @description Rebuilds Grid. Destroys existing grid and creates new one based on given or existing configuration\n     * @param config Input configuration object. Can be empty, to build with existing configuration\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.rebuild = function (config) {\n        var _this = this;\n        // saves cells references before destroying grid\n        var cells = this.grid.getCells();\n        // creates new grid\n        this._internalBuild(config || this.grid.config);\n        // sets old cells contents in new grid cells\n        cells.forEach(function (cell) { return cell.contents.forEach(function (content) { return _this._rebuildContent(cell.name, content); }); });\n    };\n    /**\n     * @description Creates Grid object based on input configuration object\n     * @param config Input configuration object.\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.build = function (config) {\n        this._internalBuild(config);\n    };\n    /**\n     * @description Adds the given Game Object, to this Container.\n     * @param cellName Cell name which will hold given child as content\n     * @param child The Game Object, to add to the Container.\n     * @param config Configuration object, which will be merged with cell configuration\n     * @returns {this}\n     */\n    Phaser2Grid.prototype.setChild = function (cellName, child) {\n        this.addChild(child);\n        this._patchChildDestroy(child, cellName);\n        this._rebuildContent(cellName, child);\n        if (child.postBuild !== undefined) {\n            child.postBuild();\n        }\n        this._debug.bringToTop();\n        return this;\n    };\n    Phaser2Grid.prototype.rebuildChild = function (child, cellName) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with \" + child);\n        }\n        if (cellName === undefined) {\n            cellName = cell.name;\n        }\n        this._removeContent(child);\n        this._rebuildContent(cellName, child);\n        return this;\n    };\n    Phaser2Grid.prototype._patchChildDestroy = function (child, cellName) {\n        var _this = this;\n        var childDestroy = child.destroy;\n        child.destroy = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            childDestroy.call.apply(childDestroy, __spread([child], args));\n            _this._removeContent(child);\n        };\n    };\n    Phaser2Grid.prototype._internalBuild = function (config) {\n        this.grid = new grid_core_1.Cell(config);\n        this._debug.clear();\n        this._debug.draw(this.grid);\n    };\n    Phaser2Grid.prototype._rebuildContent = function (cellName, child) {\n        var cell = this.grid.getCellByName(cellName);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with name \" + cellName);\n        }\n        this._removeContent(child);\n        this._addContent(child, cell);\n        this._resetContent(child, cell);\n        this._adjustContent(child, cell);\n    };\n    Phaser2Grid.prototype._addContent = function (child, cell) {\n        cell.contents.push(child);\n    };\n    Phaser2Grid.prototype._removeContent = function (child) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            return;\n        }\n        cell.contents.splice(cell.contents.indexOf(child), 1);\n    };\n    Phaser2Grid.prototype._adjustContent = function (child, cell) {\n        child instanceof Phaser2Grid ? this._adjustGridChild(child, cell) : this._adjustChild(child, cell);\n    };\n    Phaser2Grid.prototype._adjustGridChild = function (child, cell) {\n        var gridConfig = child.getGridConfig();\n        gridConfig.bounds = cell.area;\n        child.rebuild(gridConfig);\n    };\n    Phaser2Grid.prototype._adjustChild = function (child, cell) {\n        var childBounds = child.getBounds();\n        this._scaleContent(child, cell, childBounds);\n        this._positionContent(child, cell, childBounds);\n    };\n    Phaser2Grid.prototype._scaleContent = function (child, cell, childBounds) {\n        switch (cell.scale) {\n            case grid_core_1.CellScale.None:\n                break;\n            case grid_core_1.CellScale.Custom:\n                if (!child.resize) {\n                    throw new Error('resize() function does not implemented');\n                }\n                child.resize(cell.area.width, cell.area.height);\n                break;\n            default:\n                var childDimensions = {\n                    width: childBounds.width / child.worldScale.x,\n                    height: childBounds.height / child.worldScale.y,\n                };\n                var scale = grid_core_1.fit(childDimensions, cell.area, cell.scale);\n                child.scale.set(scale.x, scale.y);\n        }\n    };\n    Phaser2Grid.prototype._positionContent = function (child, cell, childBounds) {\n        var childDimensions = {\n            width: (childBounds.width / child.worldScale.x) * child.scale.x,\n            height: (childBounds.height / child.worldScale.y) * child.scale.y,\n        };\n        var pos = grid_core_1.align(childDimensions, cell.area, cell.align);\n        child.position.set(pos.x, pos.y);\n        child.x -= (childBounds.x / child.worldScale.x) * child.scale.x;\n        child.y -= (childBounds.y / child.worldScale.y) * child.scale.y;\n    };\n    Phaser2Grid.prototype._resetContent = function (child, cell) {\n        child.position.set(0, 0);\n        if (cell.scale !== grid_core_1.CellScale.None) {\n            child.scale.set(1, 1);\n        }\n        child.updateTransform();\n    };\n    return Phaser2Grid;\n}(Phaser.Group));\nexports.Phaser2Grid = Phaser2Grid;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grid_core_1 = require(\"@armathai/grid-core\");\nObject.defineProperty(exports, \"CellAlign\", { enumerable: true, get: function () { return grid_core_1.CellAlign; } });\nObject.defineProperty(exports, \"CellScale\", { enumerable: true, get: function () { return grid_core_1.CellScale; } });\nvar Phaser2Grid_1 = require(\"./Phaser2Grid\");\nObject.defineProperty(exports, \"Phaser2Grid\", { enumerable: true, get: function () { return Phaser2Grid_1.Phaser2Grid; } });\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatch = void 0;\nvar NinePatch = /** @class */ (function (_super) {\n    __extends(NinePatch, _super);\n    function NinePatch(game, x, y, key, frame, width, height, data) {\n        var _this = _super.call(this, game, x, y, key, frame) || this;\n        /**\n         * The eventual sizes of the container\n         */\n        _this.localWidth = 1;\n        _this.localHeight = 1;\n        _this.localWidth = width;\n        _this.localHeight = height;\n        _this.setPatchesData(key, frame, data);\n        _this.render();\n        return _this;\n    }\n    /**\n     * Changes the base texture the Game Object is using. The old texture is removed and the new one is referenced or fetched from the Cache.\n     *\n     * If your Game Object is using a frame from a texture atlas and you just wish to change to another frame, then see the `frame` or `frameName` properties instead.\n     *\n     * You should only use `loadTexture` if you want to replace the base texture entirely.\n     *\n     * Calling this method causes a WebGL texture update, so use sparingly or in low-intensity portions of your game, or if you know the new texture is already on the GPU.\n     *\n     * You can use the new const `Phaser.PENDING_ATLAS` as the texture key for any sprite.\n     * Doing this then sets the key to be the `frame` argument (the frame is set to zero).\n     *\n     * This allows you to create sprites using `load.image` during development, and then change them\n     * to use a Texture Atlas later in development by simply searching your code for 'PENDING_ATLAS'\n     * and swapping it to be the key of the atlas data.\n     *\n     * Note: You cannot use a RenderTexture as a texture for a TileSprite.\n     *\n     * @param key This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache Image entry, or an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n     * @param frame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.\n     * @param stopAnimation If an animation is already playing on this Sprite you can choose to stop it or let it carry on playing. - Default: true\n     */\n    NinePatch.prototype.loadTexture = function (key, frame, stopAnimation) {\n        this.baseFrameName = frame;\n        _super.prototype.loadTexture.call(this, key, frame, stopAnimation);\n        this.baseTexture = this.texture.baseTexture;\n        this.setBaseFrame(this.texture.frame);\n        if (this.texture) {\n            this.texture.destroy(false);\n        }\n        this.texture = new Phaser.RenderTexture(this.game, this.localWidth, this.localHeight);\n        if (this.patchesData) {\n            this.render();\n        }\n    };\n    Object.defineProperty(NinePatch.prototype, \"frameName\", {\n        /**\n         * Sets the current frame name of the texture being used to render this Game Object.\n         *\n         * To change the frame set `frameName` to the name of the new frame in the texture atlas you wish this Game Object to use,\n         * for example: `player.frameName = \"idle\"`.\n         *\n         * If the frame name given doesn't exist it will revert to the first frame found in the texture and throw a console warning.\n         *\n         * If you are using a sprite sheet then you should use the `frame` property instead.\n         *\n         * If you wish to fully replace the texture being used see `loadTexture`.\n         */\n        set: function (value) {\n            this.loadTexture(this.key, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"height\", {\n        /**\n         * The height of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localHeight;\n        },\n        set: function (value) {\n            this.resize(this.localWidth, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"width\", {\n        /**\n         * The width of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localWidth;\n        },\n        set: function (value) {\n            this.resize(value, this.localHeight);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Set the size of the container, then update all the parts\n     *\n     * @param width\n     * @param height\n     */\n    NinePatch.prototype.resize = function (width, height) {\n        this.localWidth = Math.round(width);\n        this.localHeight = Math.round(height);\n        this.render();\n    };\n    /**\n     * Override the destroy to fix PIXI leaking CanvasBuffers\n     *\n     * @param args\n     */\n    NinePatch.prototype.destroy = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        _super.prototype.destroy.call(this, args[0]);\n        this.texture.destroy(true);\n        this.baseTexture = undefined;\n        this.baseFrame = undefined;\n    };\n    NinePatch.prototype.setPatchesData = function (key, frame, data) {\n        var game = this.game;\n        this.patchesData = data || game.cache.getNinePatch(key) || game.cache.getNinePatch(frame);\n        if (!this.patchesData) {\n            throw Error('Cannot crate NinePatch without patches data.');\n        }\n    };\n    NinePatch.prototype.setBaseFrame = function (f) {\n        this.baseFrame = f;\n    };\n    /**\n     * Redraw the the current texture to adjust for the new sizes;\n     */\n    NinePatch.prototype.render = function () {\n        var renderTexture = this.texture;\n        var _a = this, localWidth = _a.localWidth, localHeight = _a.localHeight;\n        // Set a new empty texture\n        renderTexture.resize(localWidth, localHeight, true);\n        var _b = this.patchesData, top = _b.top, _c = _b.left, left = _c === void 0 ? top : _c, _d = _b.right, right = _d === void 0 ? top : _d, _e = _b.bottom, bottom = _e === void 0 ? top : _e;\n        var _f = this.baseFrame, baseFrameWidth = _f.width, baseFrameHeight = _f.height;\n        // The positions we want from the base texture\n        var textureXs = [0, left, baseFrameWidth - right, baseFrameWidth];\n        var textureYs = [0, top, baseFrameHeight - bottom, baseFrameHeight];\n        // These are the positions we need the eventual texture to have\n        var finalXs = [0, left, localWidth - right, localWidth];\n        var finalYs = [0, top, localHeight - bottom, localHeight];\n        renderTexture.clear();\n        for (var yi = 0; yi < 3; yi++) {\n            for (var xi = 0; xi < 3; xi++) {\n                var s = this.createTexturePart(textureXs[xi], // x\n                textureYs[yi], // y\n                textureXs[xi + 1] - textureXs[xi], // width\n                textureYs[yi + 1] - textureYs[yi]);\n                s.width = finalXs[xi + 1] - finalXs[xi];\n                s.height = finalYs[yi + 1] - finalYs[yi];\n                renderTexture.renderXY(s, finalXs[xi], finalYs[yi]);\n            }\n        }\n    };\n    /**\n     * Here we create a sprite part for the container based on the given input\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     * @returns {PIXI.Sprite}\n     */\n    NinePatch.prototype.createTexturePart = function (x, y, width, height) {\n        var frame = new PIXI.Rectangle(this.baseFrame.x + this.texture.frame.x + x, this.baseFrame.y + this.texture.frame.y + y, Math.max(width, 1), Math.max(height, 1));\n        return new Phaser.Sprite(this.game, 0, 0, new PIXI.Texture(this.baseTexture, frame));\n    };\n    return NinePatch;\n}(Phaser.Sprite));\nexports.NinePatch = NinePatch;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatchPlugin = void 0;\nvar NinePatch_1 = require(\"./NinePatch\");\nvar NinePatchPlugin = /** @class */ (function (_super) {\n    __extends(NinePatchPlugin, _super);\n    function NinePatchPlugin(game, parent) {\n        var _this = _super.call(this, game, parent) || this;\n        _this.addNinePatchCache();\n        _this.addNinePatchFactory();\n        _this.addNinePatchLoader();\n        return _this;\n    }\n    NinePatchPlugin.prototype.addNinePatchLoader = function () {\n        Phaser.Loader.prototype.ninePatch = function (key, url, top, left, right, bottom) {\n            var cacheData = {\n                top: top,\n            };\n            if (left) {\n                cacheData.left = left;\n            }\n            if (right) {\n                cacheData.right = right;\n            }\n            if (bottom) {\n                cacheData.bottom = bottom;\n            }\n            this.addToFileList('image', key, url);\n            this.game.cache.addNinePatch(key, cacheData);\n        };\n    };\n    /**\n     * Extends the GameObjectFactory prototype with the support of adding NinePatch. this allows us to add NinePatch methods to the game just like any other object:\n     * game.add.NinePatch();\n     */\n    NinePatchPlugin.prototype.addNinePatchFactory = function () {\n        Phaser.GameObjectFactory.prototype.ninePatch = function (x, y, key, frame, width, height, group) {\n            if (group === undefined) {\n                group = this.world;\n            }\n            var ninePatchObject = new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n            return group.add(ninePatchObject);\n        };\n        Phaser.GameObjectCreator.prototype.ninePatch = function (x, y, key, frame, width, height) {\n            return new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n        };\n    };\n    /**\n     * Extends the Phaser.Cache prototype with NinePatch properties\n     */\n    NinePatchPlugin.prototype.addNinePatchCache = function () {\n        // Create the cache space\n        Phaser.Cache.prototype.ninePatch = {};\n        // Method for adding a NinePatch dict to the cache space\n        Phaser.Cache.prototype.addNinePatch = function (key, data) {\n            this.ninePatch[key] = data;\n        };\n        // Method for fetching a NinePatch dict from the cache space\n        Phaser.Cache.prototype.getNinePatch = function (key) {\n            var data = this.ninePatch[key];\n            return data;\n        };\n    };\n    return NinePatchPlugin;\n}(Phaser.Plugin));\nexports.NinePatchPlugin = NinePatchPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NinePatch_1 = require(\"./NinePatch\");\nObject.defineProperty(exports, \"NinePatch\", { enumerable: true, get: function () { return NinePatch_1.NinePatch; } });\nvar NinePatchPlugin_1 = require(\"./NinePatchPlugin\");\nObject.defineProperty(exports, \"NinePatchPlugin\", { enumerable: true, get: function () { return NinePatchPlugin_1.NinePatchPlugin; } });\n","/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction A(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||\"-\"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+\" \"+(a.f+\"00\")+\" 300px \"+I(a.c)}function I(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function J(a){return a.a+a.f}function H(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);K(a,\"loading\")}function L(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}K(a,\"inactive\")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function N(a){u(a.c,\"body\",a.a)}function O(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+I(a.c)+\";\"+(\"font-style:\"+H(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+\",serif\",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+\",sans-serif\",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G(\"serif\",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G(\"sans-serif\",J(this.a));a=\nO(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:\"serif\",C:\"sans-serif\"},S=null;function T(){if(null===S){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.m.a.offsetWidth;this.A=q();U(this)};\nfunction la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,J(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\")]);K(b,\"fontactive\",a);this.m=!0;na(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,J(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\"));w(b.f,d,e)}K(b,\"fontinactive\",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),K(a,\"active\")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};\nfunction qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c(\"wf\",x.c,J(x).toString(),\"loading\")]);K(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}\nra.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||\"https://fast.fonts.net/jsapi\")+\"/\"+d+\".js\"+(e?\"?v=\"+e:\"\"),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+\nd]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||\"\"}var ua=\"https://fonts.googleapis.com/css\";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction wa(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}\nvar za={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Aa={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Ba={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nCa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(\",\"),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k=\"\";else{k=n[2];k=null==k||\"\"==k?\"n\":Ba[k];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Aa[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);k=[k,n].join(\"\")}}else k=\"\";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},A(this.c,(this.f.api||\"https://f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};\"function\"===typeof define&&define.amd?define(function(){return Z}):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}