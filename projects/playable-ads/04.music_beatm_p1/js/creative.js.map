{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/commands/ad/ad-live-command.js","js/commands/ad/ad-status-update-command.js","js/commands/ad/ad-view-state-update-command.js","js/commands/ad/cta/cta-idle-time-command.js","js/commands/ad/cta/cta-previsible-update-command.js","js/commands/ad/cta/cta-visible-update-command.js","js/commands/ad/cta/destroy-cta-model-command.js","js/commands/ad/cta/initialize-cta-model-command.js","js/commands/ad/cta/show-cta-command.js","js/commands/ad/decrease-retries-count-command.js","js/commands/ad/hint/destroy-hint-model-command.js","js/commands/ad/hint/initialize-hint-model-command.js","js/commands/ad/initialize-ad-model-command.js","js/commands/ad/map-ad-status-update-command.js","js/commands/ad/pcta/destroy-persistent-cta-model-command.js","js/commands/ad/pcta/initialize-persistent-cta-model-command.js","js/commands/ad/reset-time-command.js","js/commands/ad/set-ad-status-command.js","js/commands/ad/set-last-interaction-command.js","js/commands/ad/sound/initialize-sound-model-command.js","js/commands/ad/tutorial/complete-tutorial-sequence-command.js","js/commands/ad/tutorial/destroy-tutorial-model-command.js","js/commands/ad/tutorial/initialize-tutorial-model-command.js","js/commands/ad/tutorial/next-tutorial-sequence-command.js","js/commands/ad/tutorial/on-tutorial-complete-command.js","js/commands/ad/tutorial/on-tutorial-sequence-complete-command.js","js/commands/ad/tutorial/on-tutorial-skip-command.js","js/commands/ad/tutorial/set-tutorial-complete-command.js","js/commands/ad/tutorial/set-tutorial-skip-command.js","js/commands/ad/tutorial/show-tutorial-sequence-command.js","js/commands/ad/tutorial/tutorial-screen-click-command.js","js/commands/ad/tutorial/tutorial-sequence-view-complete-command.js","js/commands/board/board-simulate-command.js","js/commands/board/check-for-auto-play-sound-parts-command.js","js/commands/board/check-for-right-pad-clicked-command.js","js/commands/board/check-for-sequence-played-command.js","js/commands/board/check-for-simulation-command.js","js/commands/board/check-for-simulation-sequence-over-command.js","js/commands/board/check-hint-simulation-command.js","js/commands/board/disable-initial-pads-command.js","js/commands/board/disable-pad-command.js","js/commands/board/enable-initial-pads-command.js","js/commands/board/enable-pad-command.js","js/commands/board/idle-initial-pads-command.js","js/commands/board/idle-pad-command.js","js/commands/board/next-play-sequence-command.js","js/commands/board/on-pad-click-command.js","js/commands/board/reset-auto-play-sounds-command.js","js/commands/board/reset-play-sequence-command.js","js/commands/board/reset-simulation-sequence-command.js","js/commands/board/set-board-state-command.js","js/commands/board/start-simulation-command.js","js/commands/game-init-command.js","js/commands/game-shut-down-command.js","js/commands/game-start-command.js","js/commands/game/destroy-game-model-command.js","js/commands/game/initialize-game-model-command.js","js/commands/game/map-playable-commands-command.js","js/commands/game/on-progress-update-command.js","js/commands/game/on-timer-complete-command.js","js/commands/game/on-timer-remaining-update-command.js","js/commands/game/start-timer-from-command.js","js/commands/game/stop-timer-command.js","js/commands/game/timer-to-cta-command.js","js/commands/game/unmap-playable-commands-command.js","js/commands/game/update-progress-bar-dots.js","js/commands/game/update-progress-command.js","js/commands/initialize-models-command.js","js/commands/observants/initialize-analytics-observant-command.js","js/commands/observants/initialize-sound-observant-command.js","js/commands/observants/initialize-wrapper-observant-command.js","js/commands/player/destroy-player-model-command.js","js/commands/player/initialize-player-model-command.js","js/commands/resize-command.js","js/commands/retry-command.js","js/commands/shutdown-models-command.js","js/commands/startup-command.js","js/commands/states/initialize-phaser-states-command.js","js/commands/states/restart-game-state-command.js","js/commands/states/start-game-state-command.js","js/commands/view/initialize-ninepatches-command.js","js/commands/view/initialize-particles-command.js","js/commands/view/on-retry-click-command.js","js/commands/view/patch-text-for-localization-command.js","js/commands/view/user-interaction-command.js","js/configs/animation-configs.js","js/configs/board-config.js","js/configs/button-configs.js","js/configs/grid-configs.js","js/configs/grid/background-grid-configs.js","js/configs/grid/cta-container-grid-configs.js","js/configs/grid/cta-embedded-grid-configs.js","js/configs/grid/cta-standard-grid-configs.js","js/configs/grid/foreground-grid-configs.js","js/configs/grid/game-grid-configs.js","js/configs/grid/main-grid-configs.js","js/configs/grid/tutorial-grid-config.js","js/configs/grid/tutorial-sequence-grid-config.js","js/configs/grid/ui-grid-configs.js","js/configs/image-configs.js","js/configs/lego-config.js","js/configs/ninepatch-configs.js","js/configs/particles-configs.js","js/configs/spine-configs.js","js/configs/text-configs.js","js/configs/tutorial-config.js","js/constants.js","js/display/font-loader.js","js/display/layout-utils.js","js/display/lu/layout-utils-compact.js","js/display/lu/layout-utils-general.js","js/events/model-events.js","js/events/view-events.js","js/guards/ad/ad-live-guard.js","js/guards/ad/asec-guard.js","js/guards/ad/cta-model-guard.js","js/guards/ad/cta-previsible-guard.js","js/guards/ad/cta-visible-guard.js","js/guards/ad/hint-model-guard.js","js/guards/ad/hint-param-guard.js","js/guards/ad/persistent-cta-model-guard.js","js/guards/ad/persistent-cta-param-guard.js","js/guards/ad/sound-model-guard.js","js/guards/ad/sound-param-guard.js","js/guards/ad/tutorial-last-sequence-guard.js","js/guards/ad/tutorial-model-guard.js","js/guards/ad/tutorial-param-guard.js","js/guards/ad/tutorial-sequence-guard.js","js/guards/board/board-state-idle-guard.js","js/guards/board/board-state-playing-guard.js","js/guards/board/board-state-simulation-guard.js","js/guards/board/last-play-sequence-guard.js","js/guards/game/game-model-guard.js","js/guards/game/timer-complete-guard.js","js/guards/player/player-model-guard.js","js/kernel/atlas-rescale.js","js/kernel/globals.js","js/kernel/multiple-atlas.js","js/lib/particle-storm.js","js/main.js","js/models/ad/ad-model.js","js/models/ad/cta-model.js","js/models/ad/hint-model.js","js/models/ad/load-model.js","js/models/ad/persistent-cta-model.js","js/models/ad/sound-model.js","js/models/ad/tutorial-model.js","js/models/ad/tutorial-sequence-model.js","js/models/game/board/board-model.js","js/models/game/board/pad-model.js","js/models/game/board/sound-part-model.js","js/models/game/dot-model.js","js/models/game/game-model.js","js/models/game/progress-bar-model.js","js/models/game/timer-model.js","js/models/observable-model.js","js/models/player/player-model.js","js/models/store.js","js/module-bindings.js","js/objects/background/background-view.js","js/objects/cta/cta-container.js","js/objects/cta/cta-embedded-contnent.js","js/objects/cta/cta-embedded-view.js","js/objects/cta/cta-logo-view.js","js/objects/cta/cta-progress-component.js","js/objects/cta/cta-standard-title-component.js","js/objects/cta/cta-standard-view.js","js/objects/cta/cta-view.js","js/objects/cta/next-button.js","js/objects/cta/option-component.js","js/objects/cta/option-set-component.js","js/objects/foreground/foreground-view.js","js/objects/foreground/logo-view.js","js/objects/foreground/sound-icon-builder.js","js/objects/foreground/tutorial-sequence-view.js","js/objects/foreground/tutorial-view.js","js/objects/game/board/board-view.js","js/objects/game/board/pad-view.js","js/objects/game/dot-component.js","js/objects/game/game-view.js","js/objects/game/pointer-component.js","js/objects/game/progress-bar-view.js","js/objects/game/timer-view.js","js/objects/main-view.js","js/objects/ui/persistent-cta-view.js","js/objects/ui/ui-view.js","js/observants/analytics-observant.js","js/observants/sound-observant.js","js/observants/wrapper-observant.js","js/states/game-state.js","js/states/preloader-state.js","js/strings.js","js/utils/array/difference.js","js/utils/array/last.js","js/utils/button/abstract-button.js","js/utils/button/button.js","js/utils/button/input-handler.js","js/utils/container.js","js/utils/index.js","js/utils/object/object-keys.js","js/utils/tween/universal-tween.js","node_modules/@armathai/grid-core/lib/Cell.js","node_modules/@armathai/grid-core/lib/Types.js","node_modules/@armathai/grid-core/lib/index.js","node_modules/@armathai/grid-core/lib/utils/Utils.js","node_modules/@armathai/grid-core/lib/utils/geom/Point.js","node_modules/@armathai/grid-core/lib/utils/geom/Rect.js","node_modules/@armathai/lego/lib/Command.js","node_modules/@armathai/lego/lib/Emitter.js","node_modules/@armathai/lego/lib/Lego.js","node_modules/@armathai/lego/lib/Observe.js","node_modules/@armathai/lego/lib/index.js","node_modules/@armathai/lego/lib/utils/Map.js","node_modules/@armathai/lego/lib/utils/Utils.js","node_modules/@armathai/phaser2-grid/lib/Debugger.js","node_modules/@armathai/phaser2-grid/lib/Phaser2Grid.js","node_modules/@armathai/phaser2-grid/lib/index.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatch.js","node_modules/@armathai/phaser2-ninepatch/lib/NinePatchPlugin.js","node_modules/@armathai/phaser2-ninepatch/lib/index.js","node_modules/webfontloader/webfontloader.js"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;;ACdrGA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"creative.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { lego } from '@armathai/lego';\nimport { startGameStateCommand } from '../states/start-game-state-command';\n\nexport function adLiveCommand() {\n  lego.command.execute(startGameStateCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../constants';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../../guards/ad/persistent-cta-model-guard';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { gameModelGuard } from '../../guards/game/game-model-guard';\nimport { playerModelGuard } from '../../guards/player/player-model-guard';\nimport { destroyGameModelCommand } from '../game/destroy-game-model-command';\nimport { mapPlayableCommandsCommand } from '../game/map-playable-commands-command';\nimport { unmapPlayableCommandsCommand } from '../game/unmap-playable-commands-command';\nimport { initializeModelsCommand } from '../initialize-models-command';\nimport { destroyPlayerModelCommand } from '../player/destroy-player-model-command';\nimport { shutdownModelsCommand } from '../shutdown-models-command';\nimport { restartGameStateCommand } from '../states/restart-game-state-command';\nimport { destroyHintModelCommand } from './hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './pcta/destroy-persistent-cta-model-command';\nimport { setAdStatusCommand } from './set-ad-status-command';\nimport { setTutorialSkipCommand } from './tutorial/set-tutorial-skip-command';\n\nexport function adStatusUpdateCommand(status) {\n  switch (status) {\n    case AdStatus.Game:\n      lego.command.execute(mapPlayableCommandsCommand, initializeModelsCommand);\n      break;\n\n    case AdStatus.Restart:\n      lego.command.execute(restartGameStateCommand);\n      break;\n\n    case AdStatus.PreCta:\n      lego.command\n        .guard(tutorialModelGuard)\n        .execute(setTutorialSkipCommand)\n\n        .execute(unmapPlayableCommandsCommand)\n\n        .guard(hintModelGuard)\n        .execute(destroyHintModelCommand);\n      break;\n\n    case AdStatus.Cta:\n      lego.command\n        .guard(playerModelGuard)\n        .execute(destroyPlayerModelCommand)\n\n        .guard(gameModelGuard)\n        .execute(destroyGameModelCommand)\n\n        .guard(persistentCtaModelGuard)\n        .execute(destroyPersistentCtaModelCommand);\n\n      break;\n\n    case AdStatus.Retry:\n      lego.command\n        //\n        .execute(shutdownModelsCommand)\n\n        .payload(AdStatus.Game)\n        .execute(setAdStatusCommand);\n      break;\n    default:\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState } from '../../constants';\nimport { gameInitCommand } from '../game-init-command';\nimport { gameShutDownCommand } from '../game-shut-down-command';\nimport { gameStartCommand } from '../game-start-command';\n\nexport function adViewStateUpdateCommand(state) {\n  switch (state) {\n    case AdViewState.Init:\n      lego.command.execute(gameInitCommand);\n      break;\n\n    case AdViewState.Create:\n      lego.command.execute(gameStartCommand);\n      break;\n\n    case AdViewState.ShutDown:\n      lego.command.execute(gameShutDownCommand);\n      break;\n    default:\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { GameOverReasons } from '../../../constants';\nimport { showCtaCommand } from './show-cta-command';\n\nexport function ctaIdleTimeCommand() {\n  lego.command\n    //\n    .payload(GameOverReasons.Idled, 0)\n    .execute(showCtaCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { ctaPreVisibleGuard } from '../../../guards/ad/cta-previsible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaPreVisibleUpdateCommand() {\n  lego.command\n    .guard(ctaPreVisibleGuard)\n    .payload(AdStatus.PreCta)\n    .execute(setAdStatusCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { AdStatus } from '../../../constants';\nimport { adLiveGuard } from '../../../guards/ad/ad-live-guard';\nimport { asecGuard } from '../../../guards/ad/asec-guard';\nimport { ctaVisibleGuard } from '../../../guards/ad/cta-visible-guard';\nimport { setAdStatusCommand } from '../set-ad-status-command';\n\nexport function ctaVisibleUpdateCommand() {\n  lego.command\n    .guard(ctaVisibleGuard, adLiveGuard, not(asecGuard))\n    .payload(AdStatus.Cta)\n    .execute(setAdStatusCommand)\n\n    .guard(ctaVisibleGuard, not(adLiveGuard))\n    .payload(AdStatus.Restart)\n    .execute(setAdStatusCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyCtaModelCommand() {\n  store.ad.destroyCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeCtaModelCommand() {\n  store.ad.initializeCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function showCtaCommand(reason, delay) {\n  store.ad.cta.show(reason, delay);\n}\n","import { store } from '../../models/store';\n\nexport function decreaseRetriesCountCommand() {\n  store.ad.decreaseRetriesCount();\n}\n","import { store } from '../../../models/store';\n\nexport function destroyHintModelCommand() {\n  store.ad.destroyHintModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeHintModelCommand() {\n  store.ad.initializeHintModel();\n}\n","import { store } from '../../models/store';\n\nexport function initializeAdModelCommand() {\n  store.initializeADModel();\n}\n","import { lego } from '@armathai/lego';\nimport { ModelEvents } from '../../events/model-events';\nimport { adStatusUpdateCommand } from './ad-status-update-command';\n\nexport function mapAdStatusUpdateCommand() {\n  lego.command\n    .off(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand)\n    .on(ModelEvents.AdModel.StatusUpdate, adStatusUpdateCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function destroyPersistentCtaModelCommand() {\n  store.ad.destroyPersistentCtaModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializePersistentCtaModelCommand() {\n  store.ad.initializePersistentCtaModel();\n}\n","export function resetTimeCommand() {\n  CI_API.game.time.reset();\n}\n","import { store } from '../../models/store';\n\nexport function setAdStatusCommand(status) {\n  store.ad.status = status;\n}\n","import Globals from '../../kernel/globals';\n\nexport function setLastInteractionCommand(value) {\n  Globals.LAST_INTERACTION_TIME = value;\n}\n","import { store } from '../../../models/store';\n\nexport function initializeSoundModelCommand() {\n  store.ad.initializeSoundModel();\n}\n","import { store } from '../../../models/store';\n\nexport function completeTutorialSequenceCommand() {\n  store.ad.tutorial.completeSequence();\n}\n","import { store } from '../../../models/store';\n\nexport function destroyTutorialModelCommand() {\n  store.ad.destroyTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function initializeTutorialModelCommand() {\n  store.ad.initializeTutorialModel();\n}\n","import { store } from '../../../models/store';\n\nexport function nextTutorialSequenceCommand() {\n  store.ad.tutorial.nextSequence();\n}\n","import { lego } from '@armathai/lego';\nimport { destroyTutorialModelCommand } from './destroy-tutorial-model-command';\n\nexport function onTutorialCompleteCommand() {\n  lego.command\n    //\n    .execute(destroyTutorialModelCommand);\n}\n","export function onTutorialSequenceCompleteCommand() {\n  // You can detect what sequence completed, and execute some commands on it.\n  // const { index } = store.ad.tutorial.getSequenceByUuid(uuid);\n}\n","import { lego } from '@armathai/lego';\nimport { destroyTutorialModelCommand } from './destroy-tutorial-model-command';\n\nexport function onTutorialSkipCommand() {\n  lego.command\n    //\n    .execute(destroyTutorialModelCommand);\n}\n","import { store } from '../../../models/store';\n\nexport function setTutorialCompleteCommand() {\n  store.ad.tutorial.complete = true;\n}\n","import { store } from '../../../models/store';\n\nexport function setTutorialSkipCommand() {\n  store.ad.tutorial.skip = true;\n}\n","import { store } from '../../../models/store';\n\nexport function showTutorialSequenceCommand() {\n  store.ad.tutorial.showSequence();\n}\n","import { lego } from '@armathai/lego';\nimport { lastTutorialSequenceGuard } from '../../../guards/ad/tutorial-last-sequence-guard';\nimport { tutorialSequenceGuard } from '../../../guards/ad/tutorial-sequence-guard';\nimport { startSimulationCommand } from '../../board/start-simulation-command';\nimport { completeTutorialSequenceCommand } from './complete-tutorial-sequence-command';\nimport { setTutorialSkipCommand } from './set-tutorial-skip-command';\n\nexport function tutorialScreenClickCommand() {\n  lego.command\n    //\n    .payload(0)\n    .guard(tutorialSequenceGuard)\n    .execute(startSimulationCommand, completeTutorialSequenceCommand)\n\n    .payload(2)\n    .guard(tutorialSequenceGuard)\n    .execute(startSimulationCommand, completeTutorialSequenceCommand)\n\n    .guard(lastTutorialSequenceGuard)\n    .execute(setTutorialSkipCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { lastTutorialSequenceGuard } from '../../../guards/ad/tutorial-last-sequence-guard';\nimport { tutorialModelGuard } from '../../../guards/ad/tutorial-model-guard';\nimport { setTutorialCompleteCommand } from './set-tutorial-complete-command';\n\nexport function tutorialSequenceViewCompleteCommand() {\n  lego.command\n    //\n    .guard(tutorialModelGuard, lastTutorialSequenceGuard)\n    .execute(setTutorialCompleteCommand);\n}\n","import { store } from '../../models/store';\n\nexport function boardSimulateCommand() {\n  store.game.boardModel.simulate();\n}\n","import { SoundPartState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function checkForAutoPlaySoundsCommand(timePast) {\n  store.game.boardModel.autoPlaySounds.forEach(sound => {\n    const { startTime } = sound;\n\n    if (timePast > startTime && sound.state !== SoundPartState.Autoplay) {\n      sound.state = SoundPartState.Autoplay;\n    }\n  });\n}\n","import { SoundPartState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function checkForRightPadClickedCommand(sound, time) {\n  store.game.boardModel.playSequence.forEach(sequence => {\n    const { name, startTime, state } = sequence;\n    const offset = 300;\n\n    if (sound === name && state !== SoundPartState.Play && time > startTime - offset && time < startTime + offset) {\n      sequence.state = SoundPartState.Play;\n      store.player.score += 1;\n    }\n  });\n}\n","import { lego, not } from '@armathai/lego';\nimport { getSequenceStartEndTime } from '../../configs/board-config';\nimport { BoardState, GameOverReasons } from '../../constants';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { lastTutorialSequenceGuard } from '../../guards/ad/tutorial-last-sequence-guard';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { lastPlaySequenceGuard } from '../../guards/board/last-play-sequence-guard';\nimport { store } from '../../models/store';\nimport { showCtaCommand } from '../ad/cta/show-cta-command';\nimport { destroyHintModelCommand } from '../ad/hint/destroy-hint-model-command';\nimport { nextTutorialSequenceCommand } from '../ad/tutorial/next-tutorial-sequence-command';\nimport { showTutorialSequenceCommand } from '../ad/tutorial/show-tutorial-sequence-command';\nimport { stopTimerCommand } from '../game/stop-timer-command';\nimport { disableInitialPadsCommand } from './disable-initial-pads-command';\nimport { nextPlaySequenceCommand } from './next-play-sequence-command';\nimport { resetAutoPlaySoundsCommand } from './reset-auto-play-sounds-command';\nimport { resetPlaySequenceCommand } from './reset-play-sequence-command';\nimport { resetSimulationSequenceCommand } from './reset-simulation-sequence-command';\nimport { setBoardStateCommand } from './set-board-state-command';\n\nexport function checkForSequencePlayedCommand(timePast) {\n  const { endTime } = getSequenceStartEndTime(store.game.boardModel.sequence);\n\n  if (timePast >= endTime) {\n    lego.command\n      //\n      .execute(stopTimerCommand)\n\n      .payload(BoardState.Idle)\n      .execute(setBoardStateCommand)\n\n      .payload(GameOverReasons.ItemsToCtaReached, 500)\n      .guard(lastPlaySequenceGuard)\n      .execute(showCtaCommand)\n\n      .guard(not(lastPlaySequenceGuard))\n      .execute(\n        nextPlaySequenceCommand,\n        resetAutoPlaySoundsCommand,\n        resetSimulationSequenceCommand,\n        resetPlaySequenceCommand\n      )\n\n      .guard(tutorialModelGuard, not(lastTutorialSequenceGuard))\n      .execute(nextTutorialSequenceCommand, showTutorialSequenceCommand)\n\n      .guard(hintModelGuard)\n      .execute(destroyHintModelCommand)\n\n      .execute(disableInitialPadsCommand);\n  }\n}\n","import { SoundPartState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function checkForSimulationCommand(timePast) {\n  store.game.boardModel.simulationSequence.forEach(sound => {\n    const { startTime } = sound;\n\n    if (timePast > startTime && sound.state !== SoundPartState.Simulate) {\n      sound.state = SoundPartState.Simulate;\n    }\n  });\n}\n","import { lego, not } from '@armathai/lego';\nimport { getSequenceStartEndTime } from '../../configs/board-config';\nimport { BoardState } from '../../constants';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { hintParamGuard } from '../../guards/ad/hint-param-guard';\nimport { lastTutorialSequenceGuard } from '../../guards/ad/tutorial-last-sequence-guard';\nimport { store } from '../../models/store';\nimport { initializeHintModelCommand } from '../ad/hint/initialize-hint-model-command';\nimport { nextTutorialSequenceCommand } from '../ad/tutorial/next-tutorial-sequence-command';\nimport { showTutorialSequenceCommand } from '../ad/tutorial/show-tutorial-sequence-command';\nimport { stopTimerCommand } from '../game/stop-timer-command';\nimport { enableInitialPadsCommand } from './enable-initial-pads-command';\nimport { resetAutoPlaySoundsCommand } from './reset-auto-play-sounds-command';\nimport { resetSimulationSequenceCommand } from './reset-simulation-sequence-command';\nimport { setBoardStateCommand } from './set-board-state-command';\n\nexport function checkForSimulationSequenceOverCommand(timePast) {\n  const { endTime } = getSequenceStartEndTime(store.game.boardModel.sequence);\n\n  if (timePast >= endTime) {\n    lego.command\n      //\n      .payload(BoardState.Idle)\n      .execute(setBoardStateCommand)\n\n      .execute(stopTimerCommand)\n\n      .guard(not(lastTutorialSequenceGuard))\n      .execute(nextTutorialSequenceCommand, showTutorialSequenceCommand)\n\n      .guard(hintParamGuard, not(hintModelGuard))\n      .execute(initializeHintModelCommand)\n\n      .execute(resetAutoPlaySoundsCommand, resetSimulationSequenceCommand)\n\n      .execute(enableInitialPadsCommand);\n  }\n}\n","import { SoundPartState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function checkForHintCommand(timePast) {\n  store.game.boardModel.simulationSequence.forEach(sound => {\n    const { startTime } = sound;\n\n    if (timePast > startTime && sound.state !== SoundPartState.Hint) {\n      sound.state = SoundPartState.Hint;\n    }\n  });\n}\n","import { lego } from '@armathai/lego';\nimport { getOpeningPads } from '../../configs/board-config';\nimport { disablePadCommand } from './disable-pad-command';\n\nexport function disableInitialPadsCommand() {\n  const pads = getOpeningPads();\n\n  pads.forEach(pad => {\n    const { row, column } = pad;\n\n    lego.command\n      //\n      .payload(row, column)\n      .execute(disablePadCommand);\n  });\n}\n","import { store } from '../../models/store';\n\nexport function disablePadCommand(row, column) {\n  store.game.boardModel.getPadByPosition(row, column).disable();\n}\n","import { lego } from '@armathai/lego';\nimport { getOpeningPads } from '../../configs/board-config';\nimport { enablePadCommand } from './enable-pad-command';\n\nexport function enableInitialPadsCommand() {\n  const pads = getOpeningPads();\n\n  pads.forEach(pad => {\n    const { row, column } = pad;\n\n    lego.command\n      //\n      .payload(row, column)\n      .execute(enablePadCommand);\n  });\n}\n","import { store } from '../../models/store';\n\nexport function enablePadCommand(row, column) {\n  store.game.boardModel.getPadByPosition(row, column).enable();\n}\n","import { lego } from '@armathai/lego';\nimport { getOpeningPads } from '../../configs/board-config';\nimport { idlePadCommand } from './idle-pad-command';\n\nexport function idleInitialPadsCommand() {\n  const pads = getOpeningPads();\n\n  pads.forEach(pad => {\n    const { row, column } = pad;\n\n    lego.command\n      //\n      .payload(row, column)\n      .execute(idlePadCommand);\n  });\n}\n","import { store } from '../../models/store';\n\nexport function idlePadCommand(row, column) {\n  store.game.boardModel.getPadByPosition(row, column).idle();\n}\n","import { store } from '../../models/store';\n\nexport function nextPlaySequenceCommand() {\n  store.game.boardModel.sequence += 1;\n}\n","import { lego } from '@armathai/lego';\nimport { getGameTime, getSequenceStartEndTime } from '../../configs/board-config';\nimport { BoardState } from '../../constants';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { tutorialSequenceGuard } from '../../guards/ad/tutorial-sequence-guard';\nimport { boardStateIdleGuard } from '../../guards/board/board-state-idle-guard';\nimport { store } from '../../models/store';\nimport { completeTutorialSequenceCommand } from '../ad/tutorial/complete-tutorial-sequence-command';\nimport { startTimerFromCommand } from '../game/start-timer-from-command';\nimport { checkForRightPadClickedCommand } from './check-for-right-pad-clicked-command';\nimport { setBoardStateCommand } from './set-board-state-command';\n\nexport function onPadClickCommand(uuid) {\n  const pad = store.game.boardModel.getPadByUuid(uuid);\n  const { startTime } = getSequenceStartEndTime(store.game.boardModel.sequence);\n\n  lego.command\n    //\n    .payload(1)\n    .guard(tutorialModelGuard, tutorialSequenceGuard, boardStateIdleGuard)\n    .execute(completeTutorialSequenceCommand)\n\n    .payload(3)\n    .guard(tutorialModelGuard, tutorialSequenceGuard, boardStateIdleGuard)\n    .execute(completeTutorialSequenceCommand)\n\n    .payload(startTime, false)\n    .guard(boardStateIdleGuard)\n    .execute(startTimerFromCommand)\n\n    .payload(BoardState.Playing)\n    .execute(setBoardStateCommand)\n\n    .payload(pad.sound, getGameTime() - store.game.timerModel.remaining)\n    .execute(checkForRightPadClickedCommand);\n}\n","import { store } from '../../models/store';\n\nexport function resetAutoPlaySoundsCommand() {\n  store.game.boardModel.resetAutoPlaySounds();\n}\n","import { store } from '../../models/store';\n\nexport function resetPlaySequenceCommand() {\n  store.game.boardModel.resetPlaySequence();\n}\n","import { store } from '../../models/store';\n\nexport function resetSimulationSequenceCommand() {\n  store.game.boardModel.resetSimulationSequence();\n}\n","import { store } from '../../models/store';\n\nexport function setBoardStateCommand(state) {\n  store.game.boardModel.state = state;\n}\n","import { lego } from '@armathai/lego';\nimport { getSequenceStartEndTime } from '../../configs/board-config';\nimport { store } from '../../models/store';\nimport { startTimerFromCommand } from '../game/start-timer-from-command';\nimport { boardSimulateCommand } from './board-simulate-command';\n\nexport function startSimulationCommand() {\n  const { startTime } = getSequenceStartEndTime(store.game.boardModel.sequence);\n\n  lego.command\n    //\n    .execute(boardSimulateCommand)\n\n    .payload(startTime, true)\n    .execute(startTimerFromCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { resetTimeCommand } from './ad/reset-time-command';\n\nexport function gameInitCommand() {\n  lego.command.execute(resetTimeCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { tutorialModelGuard } from '../guards/ad/tutorial-model-guard';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\nimport { setLastInteractionCommand } from './ad/set-last-interaction-command';\nimport { setTutorialSkipCommand } from './ad/tutorial/set-tutorial-skip-command';\nimport { unmapPlayableCommandsCommand } from './game/unmap-playable-commands-command';\nimport { shutdownModelsCommand } from './shutdown-models-command';\n\nexport function gameShutDownCommand() {\n  lego.command\n    .guard(tutorialModelGuard)\n    .execute(setTutorialSkipCommand)\n\n    .execute(unmapPlayableCommandsCommand)\n\n    .execute(shutdownModelsCommand)\n\n    .payload(0)\n    .execute(setLastInteractionCommand)\n\n    .payload(AdStatus.Unknown)\n    .execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { mapAdStatusUpdateCommand } from './ad/map-ad-status-update-command';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\n\nexport function gameStartCommand() {\n  lego.command\n    .execute(mapAdStatusUpdateCommand)\n\n    .payload(AdStatus.Game)\n    .execute(setAdStatusCommand);\n}\n","import { store } from '../../models/store';\n\nexport function destroyGameModelCommand() {\n  store.destroyGameModel();\n}\n","import { store } from '../../models/store';\n\nexport function initializeGameModelCommand() {\n  store.initializeGameModel();\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function mapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.on(entry.event, entry.command));\n}\n","import { lego } from '@armathai/lego';\nimport { updateProgressBarDots } from './update-progress-bar-dots';\n\nexport function onProgressUpdateCommand(progress) {\n  lego.command\n    //\n    .payload(progress)\n    .execute(updateProgressBarDots);\n}\n","import { lego, not } from '@armathai/lego';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { boardStatePlayingGuard } from '../../guards/board/board-state-playing-guard';\nimport { timerCompleteGuard } from '../../guards/game/timer-complete-guard';\nimport { timerToCtaCommand } from './timer-to-cta-command';\n\nexport function onTimerCompleteUpdateCommand(complete) {\n  lego.command\n    //\n    .payload(complete)\n    .guard(not(tutorialModelGuard), timerCompleteGuard, boardStatePlayingGuard)\n    .execute(timerToCtaCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { getGameTime } from '../../configs/board-config';\nimport { hintModelGuard } from '../../guards/ad/hint-model-guard';\nimport { tutorialModelGuard } from '../../guards/ad/tutorial-model-guard';\nimport { boardStateIdleGuard } from '../../guards/board/board-state-idle-guard';\nimport { boardStatePlayingGuard } from '../../guards/board/board-state-playing-guard';\nimport { boardStateSimulationGuard } from '../../guards/board/board-state-simulation-guard';\nimport { checkForAutoPlaySoundsCommand } from '../board/check-for-auto-play-sound-parts-command';\nimport { checkForSequencePlayedCommand } from '../board/check-for-sequence-played-command';\nimport { checkForSimulationCommand } from '../board/check-for-simulation-command';\nimport { checkForSimulationSequenceOverCommand } from '../board/check-for-simulation-sequence-over-command';\nimport { checkForHintCommand } from '../board/check-hint-simulation-command';\nimport { updateProgressCommand } from './update-progress-command';\n\nexport function onTimerRemainingUpdateCommand(remaining) {\n  lego.command\n    //\n    .payload(getGameTime() - remaining)\n    .guard(boardStateSimulationGuard)\n    .execute(checkForSimulationSequenceOverCommand)\n\n    .payload(getGameTime() - remaining)\n    .guard(boardStateSimulationGuard)\n    .execute(checkForSimulationCommand)\n\n    .payload(getGameTime() - remaining)\n    .guard(not(boardStateIdleGuard))\n    .execute(checkForAutoPlaySoundsCommand)\n\n    .payload(getGameTime() - remaining)\n    .guard(hintModelGuard, boardStatePlayingGuard)\n    .execute(checkForHintCommand)\n\n    .payload(getGameTime() - remaining)\n    .guard(tutorialModelGuard, boardStatePlayingGuard)\n    .execute(checkForSequencePlayedCommand)\n\n    .payload(remaining)\n    .guard(boardStatePlayingGuard)\n    .execute(updateProgressCommand);\n}\n","import { store } from '../../models/store';\n\nexport function startTimerFromCommand(time, delay) {\n  store.game.timerModel.startTimerFrom(time, delay);\n}\n","import { store } from '../../models/store';\n\nexport function stopTimerCommand() {\n  store.game.timerModel.stopTimer();\n}\n","import { lego } from '@armathai/lego';\nimport { GameOverReasons } from '../../constants';\nimport { showCtaCommand } from '../ad/cta/show-cta-command';\n\nexport function timerToCtaCommand() {\n  lego.command\n    //\n    .payload(GameOverReasons.ItemsToCtaReached, 500)\n    .execute(showCtaCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { playCommands } from '../../configs/lego-config';\n\nexport function unmapPlayableCommandsCommand() {\n  playCommands.forEach(entry => lego.command.off(entry.event, entry.command));\n}\n","import { DotState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function updateProgressBarDots(progress) {\n  if (progress === 0) {\n    const firstDot = store.game.progressBarModel.getDotAtPosition(0);\n    firstDot.state = DotState.Filled;\n\n    const secondDot = store.game.progressBarModel.getDotAtPosition(1);\n    secondDot.state = DotState.Glowing;\n  } else if (progress >= 0.5 && progress < 1) {\n    const firstDot = store.game.progressBarModel.getDotAtPosition(1);\n\n    if (firstDot.state !== DotState.Filled) {\n      firstDot.state = DotState.Idle;\n      firstDot.state = DotState.Filled;\n    }\n\n    const secondDot = store.game.progressBarModel.getDotAtPosition(2);\n    secondDot.state = DotState.Glowing;\n  } else if (progress >= 1) {\n    const firstDot = store.game.progressBarModel.getDotAtPosition(2);\n    firstDot.state = DotState.Idle;\n    firstDot.state = DotState.Filled;\n  }\n}\n","import { getGameTime } from '../../configs/board-config';\nimport { store } from '../../models/store';\n\nexport function updateProgressCommand(remainingTime) {\n  const progress = 1 - remainingTime / getGameTime();\n  store.game.progressBarModel.progress = Math.min(1, progress);\n}\n","import { lego, not } from '@armathai/lego';\nimport { hintParamGuard } from '../guards/ad/hint-param-guard';\nimport { persistentCtaParamGuard } from '../guards/ad/persistent-cta-param-guard';\nimport { soundModelGuard } from '../guards/ad/sound-model-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { tutorialModelGuard } from '../guards/ad/tutorial-model-guard';\nimport { tutorialParamGuard } from '../guards/ad/tutorial-param-guard';\nimport { initializeCtaModelCommand } from './ad/cta/initialize-cta-model-command';\nimport { initializeHintModelCommand } from './ad/hint/initialize-hint-model-command';\nimport { initializePersistentCtaModelCommand } from './ad/pcta/initialize-persistent-cta-model-command';\nimport { initializeSoundModelCommand } from './ad/sound/initialize-sound-model-command';\nimport { initializeTutorialModelCommand } from './ad/tutorial/initialize-tutorial-model-command';\nimport { enableInitialPadsCommand } from './board/enable-initial-pads-command';\nimport { idleInitialPadsCommand } from './board/idle-initial-pads-command';\nimport { initializeGameModelCommand } from './game/initialize-game-model-command';\nimport { initializePlayerModelCommand } from './player/initialize-player-model-command';\n\nexport function initializeModelsCommand() {\n  lego.command\n    .execute(initializePlayerModelCommand)\n\n    .execute(initializeGameModelCommand)\n\n    .execute(initializeCtaModelCommand)\n\n    .guard(soundParamGuard, not(soundModelGuard))\n    .execute(initializeSoundModelCommand)\n\n    .guard(tutorialParamGuard)\n    .execute(initializeTutorialModelCommand)\n\n    .guard(tutorialModelGuard)\n    .execute(idleInitialPadsCommand)\n\n    .guard(not(tutorialModelGuard))\n    .execute(idleInitialPadsCommand, enableInitialPadsCommand)\n\n    .guard(hintParamGuard, not(tutorialModelGuard))\n    .execute(initializeHintModelCommand)\n\n    .guard(persistentCtaParamGuard)\n    .execute(initializePersistentCtaModelCommand);\n}\n","import { AnalyticsObservant } from '../../observants/analytics-observant';\n\nexport function initializeAnalyticsObservantCommand() {\n  AnalyticsObservant();\n}\n","import { SoundObservant } from '../../observants/sound-observant';\n\nexport function initializeSoundObservantCommand() {\n  SoundObservant();\n}\n","import { WrapperObservant } from '../../observants/wrapper-observant';\n\nexport function initializeWrapperObservantCommand() {\n  WrapperObservant();\n}\n","import { store } from '../../models/store';\n\nexport function destroyPlayerModelCommand() {\n  store.destroyPlayerModel();\n}\n","import { store } from '../../models/store';\n\nexport function initializePlayerModelCommand() {\n  store.initializePlayerModel();\n}\n","export function resizeCommand() {\n  //\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus } from '../constants';\nimport { setAdStatusCommand } from './ad/set-ad-status-command';\n\nexport function retryCommand() {\n  lego.command.payload(AdStatus.Retry).execute(setAdStatusCommand);\n}\n","import { lego } from '@armathai/lego';\nimport { ctaModelGuard } from '../guards/ad/cta-model-guard';\nimport { hintModelGuard } from '../guards/ad/hint-model-guard';\nimport { persistentCtaModelGuard } from '../guards/ad/persistent-cta-model-guard';\nimport { gameModelGuard } from '../guards/game/game-model-guard';\nimport { playerModelGuard } from '../guards/player/player-model-guard';\nimport { destroyCtaModelCommand } from './ad/cta/destroy-cta-model-command';\nimport { destroyHintModelCommand } from './ad/hint/destroy-hint-model-command';\nimport { destroyPersistentCtaModelCommand } from './ad/pcta/destroy-persistent-cta-model-command';\nimport { destroyGameModelCommand } from './game/destroy-game-model-command';\nimport { destroyPlayerModelCommand } from './player/destroy-player-model-command';\n\nexport function shutdownModelsCommand() {\n  lego.command\n    .guard(playerModelGuard)\n    .execute(destroyPlayerModelCommand)\n\n    .guard(gameModelGuard)\n    .execute(destroyGameModelCommand)\n\n    .guard(ctaModelGuard)\n    .execute(destroyCtaModelCommand)\n\n    .guard(hintModelGuard)\n    .execute(destroyHintModelCommand)\n\n    .guard(persistentCtaModelGuard)\n    .execute(destroyPersistentCtaModelCommand);\n}\n","import { lego, not } from '@armathai/lego';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { soundModelGuard } from '../guards/ad/sound-model-guard';\nimport { soundParamGuard } from '../guards/ad/sound-param-guard';\nimport { adLiveCommand } from './ad/ad-live-command';\nimport { adViewStateUpdateCommand } from './ad/ad-view-state-update-command';\nimport { ctaIdleTimeCommand } from './ad/cta/cta-idle-time-command';\nimport { ctaVisibleUpdateCommand } from './ad/cta/cta-visible-update-command';\nimport { initializeAdModelCommand } from './ad/initialize-ad-model-command';\nimport { initializeAnalyticsObservantCommand } from './observants/initialize-analytics-observant-command';\nimport { initializeSoundObservantCommand } from './observants/initialize-sound-observant-command';\nimport { initializeWrapperObservantCommand } from './observants/initialize-wrapper-observant-command';\nimport { resizeCommand } from './resize-command';\nimport { initializePhaserStatesCommand } from './states/initialize-phaser-states-command';\nimport { initializeNinePatchesCommand } from './view/initialize-ninepatches-command';\nimport { initializeParticlesCommand } from './view/initialize-particles-command';\nimport { onRetryClickCommand } from './view/on-retry-click-command';\nimport { patchTextForLocalizationCommand } from './view/patch-text-for-localization-command';\nimport { userInteractionCommand } from './view/user-interaction-command';\n\nexport function startupCommand() {\n  lego.command\n\n    // .execute(addOverlayCommand)\n    .execute(patchTextForLocalizationCommand)\n    .execute(initializeNinePatchesCommand)\n    .execute(initializeParticlesCommand)\n    .execute(initializeAdModelCommand)\n    .execute(initializePhaserStatesCommand)\n    .execute(initializeWrapperObservantCommand)\n    .execute(initializeAnalyticsObservantCommand)\n\n    .guard(soundParamGuard, not(soundModelGuard))\n    .execute(initializeSoundObservantCommand)\n\n    .on(ViewEvents.Ad.Live, adLiveCommand)\n    .on(ViewEvents.Game.Resize, resizeCommand)\n    .on(ViewEvents.Game.UserInteraction, userInteractionCommand)\n    .on(ViewEvents.GameState.CtaIdleTime, ctaIdleTimeCommand)\n    .on(ModelEvents.AdModel.ViewStateUpdate, adViewStateUpdateCommand)\n    .on(ModelEvents.CtaModel.VisibleUpdate, ctaVisibleUpdateCommand)\n    .on(ViewEvents.CtaView.RetryClick, onRetryClickCommand);\n}\n","import { PhaserState } from '../../constants';\nimport { GameState } from '../../states/game-state';\nimport { PreloaderState } from '../../states/preloader-state';\n\nexport function initializePhaserStatesCommand() {\n  const { game, states } = CI_API;\n  states.preloader = CI_API.game.state.add(PhaserState.Preload, PreloaderState, false);\n  states.game = CI_API.game.state.add(PhaserState.Game, GameState, false);\n  game.state.start(PhaserState.Preload);\n}\n","export function restartGameStateCommand() {\n  CI_API.game.state.restart();\n}\n","import { PhaserState } from '../../constants';\n\nexport function startGameStateCommand() {\n  CI_API.game.state.start(PhaserState.Game);\n}\n","import { NinePatchPlugin } from '@armathai/phaser2-ninepatch';\nimport { ninePatches } from '../../configs/ninepatch-configs';\n\nconst addNinePatch = config => {\n  const { key, data } = config;\n  CI_API.game.cache.addNinePatch(key, data);\n};\n\nexport function initializeNinePatchesCommand() {\n  const { game } = CI_API;\n  game.plugins.add(NinePatchPlugin);\n  ninePatches.forEach(ninePatch => addNinePatch(ninePatch));\n}\n","import { particles } from '../../configs/particles-configs';\n\nconst addData = config => {\n  const { key, data } = config;\n  CI_API.game.particleStorm.addData(key, data);\n};\n\nexport function initializeParticlesCommand() {\n  const { game } = CI_API;\n  game.particleStorm = game.plugins.add(Phaser.ParticleStorm);\n  particles.forEach(p => addData(p));\n}\n","import { lego } from '@armathai/lego';\nimport { decreaseRetriesCountCommand } from '../ad/decrease-retries-count-command';\nimport { retryCommand } from '../retry-command';\n\nexport function onRetryClickCommand() {\n  lego.command\n    //\n    .execute(decreaseRetriesCountCommand)\n    .execute(retryCommand);\n}\n","/* eslint-disable no-underscore-dangle */\nexport function patchTextForLocalizationCommand() {\n  localization.has = function has(str) {\n    return !!this._strings[str];\n  };\n\n  if (delete Phaser.Text.prototype._text) {\n    const localize = (newValue, macros = undefined) => {\n      if (!localization.has(newValue)) {\n        throw Error(`\"${newValue}\" is not localized.`);\n      }\n      return localization.get(newValue, macros);\n    };\n\n    Object.defineProperty(Phaser.Text.prototype, '_text', {\n      get() {\n        return this.__text || '';\n      },\n\n      set(value) {\n        if (typeof value === 'object') {\n          const { text, macros, ignoreLocalization } = value;\n          if (ignoreLocalization) {\n            this.__text = text;\n            return;\n          }\n          this.__text = localize(text, macros);\n          return;\n        }\n\n        if (value.length === 0 || !value.trim()) {\n          this.__text = value;\n          return;\n        }\n\n        this.__text = localize(value);\n      },\n      configurable: true\n    });\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { setLastInteractionCommand } from '../ad/set-last-interaction-command';\n\nexport function userInteractionCommand() {\n  lego.command.payload(CI_API.game.time.totalElapsedSeconds()).execute(setLastInteractionCommand);\n}\n","export const Animations = {\n  Item: {\n    Fall: 'fall'\n  }\n};\n\n// export function getScrollAnimationConfig(x, y) {\n//   return {\n//     key: ASSETS,\n//     x,\n//     y,\n//     data: [\n//       {\n//         name: Animations.Scroll.Open,\n//         prefix: 'animations/scroll/',\n//         start: 0,\n//         stop: 5,\n//         suffix: '.png',\n//         zeroPad: 0,\n//         frameRate: 12,\n//         loop: false\n//       },\n//       {\n//         name: Animations.Scroll.Close,\n//         prefix: 'animations/scroll/',\n//         start: 5,\n//         stop: 1,\n//         suffix: '.png',\n//         zeroPad: 0,\n//         frameRate: 12,\n//         loop: false\n//       }\n//     ]\n//   };\n// }\n\nexport function getCoinFallAnimationConfig() {\n  return {\n    data: [\n      {\n        name: Animations.Item.Fall,\n        prefix: 'animation/coins/coin_',\n        start: 1,\n        stop: 10,\n        suffix: '.png',\n        zeroPad: 0,\n        frameRate: 40,\n        loop: true\n      }\n    ]\n  };\n}\n","import { PadColor } from '../constants';\n\nexport const Row = 4;\nexport const Column = 3;\n\nexport function getGameTime() {\n  let time;\n\n  switch (CI_API.Globals.PARAMS.difficulty) {\n    case 'easy':\n      time = CI_API.Globals.PARAMS.short_version ? 4000 : 19000;\n      break;\n    case 'medium':\n      time = CI_API.Globals.PARAMS.short_version ? 7000 : 19000;\n      break;\n    case 'hard':\n      time = CI_API.Globals.PARAMS.short_version ? 7400 : 19000;\n      break;\n    default:\n      break;\n  }\n\n  return time;\n}\n\nexport function getPadsConfig() {\n  let config = [];\n\n  switch (CI_API.Globals.PARAMS.difficulty) {\n    case 'easy':\n      config = [\n        [\n          { row: 0, column: 0, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 1, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 2, color: PadColor.BlueBright, sound: null }\n        ],\n        [\n          { row: 1, column: 0, color: PadColor.Pink, sound: null },\n          { row: 1, column: 1, color: PadColor.Pink, sound: null },\n          { row: 1, column: 2, color: PadColor.Pink, sound: null }\n        ],\n        [\n          { row: 2, column: 0, color: PadColor.Pink, sound: null },\n          { row: 2, column: 1, color: PadColor.Yellow, sound: 'missing_part_1' },\n          { row: 2, column: 2, color: PadColor.Yellow, sound: 'missing_part_2' }\n        ],\n        [\n          { row: 3, column: 0, color: PadColor.Purple, sound: 'drum_1' },\n          { row: 3, column: 1, color: PadColor.Purple, sound: 'drum_2' },\n          { row: 3, column: 2, color: PadColor.Purple, sound: 'drum_3' }\n        ]\n      ];\n      break;\n    case 'medium':\n      config = [\n        [\n          { row: 0, column: 0, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 1, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 2, color: PadColor.BlueBright, sound: null }\n        ],\n        [\n          { row: 1, column: 0, color: PadColor.Pink, sound: null },\n          { row: 1, column: 1, color: PadColor.Pink, sound: null },\n          { row: 1, column: 2, color: PadColor.Pink, sound: null }\n        ],\n        [\n          { row: 2, column: 0, color: PadColor.Pink, sound: null },\n          { row: 2, column: 1, color: PadColor.Yellow, sound: 'missing_part_1' },\n          { row: 2, column: 2, color: PadColor.Yellow, sound: 'missing_part_2' }\n        ],\n        [\n          { row: 3, column: 0, color: PadColor.Purple, sound: 'drum_1' },\n          { row: 3, column: 1, color: PadColor.Purple, sound: 'drum_2' },\n          { row: 3, column: 2, color: PadColor.Purple, sound: 'drum_3' }\n        ]\n      ];\n      break;\n    case 'hard':\n      config = [\n        [\n          { row: 0, column: 0, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 1, color: PadColor.BlueBright, sound: null },\n          { row: 0, column: 2, color: PadColor.BlueBright, sound: null }\n        ],\n        [\n          { row: 1, column: 0, color: PadColor.Pink, sound: null },\n          { row: 1, column: 1, color: PadColor.Pink, sound: null },\n          { row: 1, column: 2, color: PadColor.Pink, sound: null }\n        ],\n        [\n          { row: 2, column: 0, color: PadColor.Pink, sound: null },\n          { row: 2, column: 1, color: PadColor.Yellow, sound: 'missing_part_1' },\n          { row: 2, column: 2, color: PadColor.Yellow, sound: 'missing_part_2' }\n        ],\n        [\n          { row: 3, column: 0, color: PadColor.Purple, sound: 'drum_1' },\n          { row: 3, column: 1, color: PadColor.Purple, sound: 'drum_2' },\n          { row: 3, column: 2, color: PadColor.Purple, sound: 'drum_3' }\n        ]\n      ];\n      break;\n    default:\n      break;\n  }\n\n  return config;\n}\n\nexport function getOpeningPads() {\n  let pads = [];\n\n  switch (CI_API.Globals.PARAMS.difficulty) {\n    case 'easy':\n      pads = [\n        {\n          row: 3,\n          column: 0\n        },\n        {\n          row: 3,\n          column: 1\n        },\n        {\n          row: 3,\n          column: 2\n        }\n      ];\n      break;\n    case 'medium':\n      pads = [\n        {\n          row: 2,\n          column: 2\n        },\n        {\n          row: 3,\n          column: 0\n        },\n        {\n          row: 3,\n          column: 1\n        },\n        {\n          row: 3,\n          column: 2\n        }\n      ];\n      break;\n    case 'hard':\n      pads = [\n        {\n          row: 2,\n          column: 1\n        },\n        {\n          row: 2,\n          column: 2\n        },\n        {\n          row: 3,\n          column: 0\n        },\n        {\n          row: 3,\n          column: 1\n        },\n        {\n          row: 3,\n          column: 2\n        }\n      ];\n      break;\n    default:\n      break;\n  }\n\n  return pads;\n}\n\nexport function getAutoPlaySoundPartsConfig() {\n  let parts = [];\n\n  switch (CI_API.Globals.PARAMS.difficulty) {\n    case 'easy':\n      parts = [\n        [{ name: 'first_sequence', startTime: 0 }],\n        [\n          { name: 'missing_part_1', startTime: 4000 },\n          { name: 'missing_part_2', startTime: 7000 },\n          { name: 'second_sequence', startTime: 7400 }\n        ]\n      ];\n      break;\n    case 'medium':\n      parts = [\n        [\n          { name: 'first_sequence', startTime: 0 },\n          { name: 'missing_part_1', startTime: 4000 }\n        ],\n        [{ name: 'second_sequence', startTime: 7400 }]\n      ];\n      break;\n    case 'hard':\n      parts = [[{ name: 'first_sequence', startTime: 0 }], [{ name: 'second_sequence', startTime: 7400 }]];\n      break;\n    default:\n      break;\n  }\n\n  return parts;\n}\n\nexport function getPlaySequence() {\n  let sequence = [];\n\n  switch (CI_API.Globals.PARAMS.difficulty) {\n    case 'easy':\n      sequence = [\n        [\n          { name: 'drum_1', startTime: 0 },\n          { name: 'drum_3', startTime: 450 - 25 },\n          { name: 'drum_1', startTime: 900 - 25 },\n          { name: 'drum_3', startTime: 1350 - 25 },\n          { name: 'drum_1', startTime: 1800 - 25 },\n          { name: 'drum_3', startTime: 2250 - 25 },\n          { name: 'drum_1', startTime: 2700 - 25 },\n          { name: 'drum_3', startTime: 3150 - 25 }\n        ],\n        [\n          { name: 'drum_1', startTime: 7450 + 0 },\n          { name: 'drum_3', startTime: 7450 + 450 - 50 },\n          { name: 'drum_1', startTime: 7450 + 900 - 50 },\n          { name: 'drum_3', startTime: 7450 + 1350 - 50 },\n          { name: 'drum_1', startTime: 7450 + 1800 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 450 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 900 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 1350 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 1800 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 2250 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 2700 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 450 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 900 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 1350 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 1800 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 2250 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 2700 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 3150 + 50 }\n        ]\n      ];\n      break;\n    case 'medium':\n      sequence = [\n        [\n          { name: 'drum_1', startTime: 0 },\n          { name: 'drum_2', startTime: 250 - 25 },\n          { name: 'drum_3', startTime: 450 - 25 },\n          { name: 'drum_2', startTime: 700 - 25 },\n          { name: 'drum_1', startTime: 900 - 25 },\n          { name: 'drum_2', startTime: 1150 - 25 },\n          { name: 'drum_3', startTime: 1350 - 25 },\n          { name: 'drum_2', startTime: 1600 - 25 },\n          { name: 'drum_1', startTime: 1800 - 25 },\n          { name: 'drum_2', startTime: 2050 - 25 },\n          { name: 'drum_3', startTime: 2250 - 25 },\n          { name: 'drum_2', startTime: 2500 - 25 },\n          { name: 'drum_1', startTime: 2700 - 25 },\n          { name: 'drum_2', startTime: 2950 - 25 },\n          { name: 'drum_3', startTime: 3150 - 25 },\n          { name: 'drum_2', startTime: 3400 - 25 }\n        ],\n        [\n          { name: 'missing_part_2', startTime: 7000 },\n\n          { name: 'drum_1', startTime: 7450 + 0 },\n          { name: 'drum_3', startTime: 7450 + 450 - 50 },\n          { name: 'drum_1', startTime: 7450 + 900 - 50 },\n          { name: 'drum_3', startTime: 7450 + 1350 - 50 },\n          { name: 'drum_1', startTime: 7450 + 1800 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 450 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 900 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 1350 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 1800 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 2250 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 2700 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 450 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 900 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 1350 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 1800 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 2250 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 2700 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 3150 + 50 }\n        ]\n      ];\n      break;\n    case 'hard':\n      sequence = [\n        [\n          { name: 'drum_1', startTime: 0 },\n          { name: 'drum_2', startTime: 250 - 25 },\n          { name: 'drum_3', startTime: 450 - 25 },\n          { name: 'drum_2', startTime: 700 - 25 },\n          { name: 'drum_1', startTime: 900 - 25 },\n          { name: 'drum_2', startTime: 1150 - 25 },\n          { name: 'drum_3', startTime: 1350 - 25 },\n          { name: 'drum_2', startTime: 1600 - 25 },\n          { name: 'drum_1', startTime: 1800 - 25 },\n          { name: 'drum_2', startTime: 2050 - 25 },\n          { name: 'drum_3', startTime: 2250 - 25 },\n          { name: 'drum_2', startTime: 2500 - 25 },\n          { name: 'drum_1', startTime: 2700 - 25 },\n          { name: 'drum_2', startTime: 2950 - 25 },\n          { name: 'drum_3', startTime: 3150 - 25 },\n          { name: 'drum_2', startTime: 3400 - 25 },\n\n          { name: 'missing_part_1', startTime: 4000 },\n          { name: 'missing_part_2', startTime: 7000 }\n        ],\n        [\n          { name: 'drum_1', startTime: 7450 + 0 },\n          { name: 'drum_2', startTime: 7450 + 250 - 50 },\n          { name: 'drum_3', startTime: 7450 + 450 - 50 },\n          { name: 'drum_2', startTime: 7450 + 700 - 50 },\n          { name: 'drum_1', startTime: 7450 + 900 - 50 },\n          { name: 'drum_2', startTime: 7450 + 1150 - 50 },\n          { name: 'drum_3', startTime: 7450 + 1350 - 50 },\n          { name: 'drum_2', startTime: 7450 + 1600 - 50 },\n          { name: 'drum_1', startTime: 7450 + 1800 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 250 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 450 - 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 700 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 900 - 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 1150 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 1350 - 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 1600 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 1800 - 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 2050 - 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 2250 - 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 2500 - 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 2700 - 50 },\n\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 250 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 450 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 700 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 900 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 1150 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 1350 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 1600 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 1800 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 2050 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 2250 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 2500 + 50 },\n          { name: 'drum_1', startTime: 7450 + 3400 + 3400 + 2700 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 2950 + 50 },\n          { name: 'drum_3', startTime: 7450 + 3400 + 3400 + 3150 + 50 },\n          { name: 'drum_2', startTime: 7450 + 3400 + 3400 + 3400 + 50 }\n        ]\n      ];\n      break;\n    default:\n      break;\n  }\n\n  return sequence;\n}\n\nexport function getSequenceStartEndTime(sequence) {\n  const { difficulty } = CI_API.Globals.PARAMS;\n  let time;\n\n  switch (sequence) {\n    case 0:\n      if (difficulty === 'easy') {\n        time = { startTime: 0, endTime: 4000 };\n      } else if (difficulty === 'medium') {\n        time = { startTime: 0, endTime: 7000 };\n      } else if (difficulty === 'hard') {\n        time = { startTime: 0, endTime: 7400 };\n      }\n      break;\n    case 1:\n      if (difficulty === 'easy') {\n        time = { startTime: 4000, endTime: 19000 };\n      } else if (difficulty === 'medium') {\n        time = { startTime: 7000, endTime: 19000 };\n      } else if (difficulty === 'hard') {\n        time = { startTime: 7400, endTime: 19000 };\n      }\n      break;\n    default:\n      break;\n  }\n\n  return time;\n}\n","import { InputPriority } from '../constants';\nimport { getPlayButtonImageConfig, getRetryButtonImageConfig } from './image-configs';\nimport { getCtaPlayButtonTextConfig, getCtaRetryButtonTextConfig, getPersistentCtaTextConfig } from './text-configs';\n\n// PERSISTENT CTA\nexport function getPersistentCtaButtonConfig() {\n  return {\n    input: {\n      name: 'persistent_cta_button',\n      priority: InputPriority.Game\n    },\n    states: {\n      up: {\n        bg: getPlayButtonImageConfig(),\n        label: getPersistentCtaTextConfig(),\n        fitWidth: 0.8,\n        fitHeight: 0.8\n      }\n    }\n  };\n}\n\n// CTA\nexport function getCtaPlayButtonConfig(text) {\n  return {\n    input: {\n      name: 'cta_play_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getPlayButtonImageConfig(),\n        label: getCtaPlayButtonTextConfig(text),\n        fitWidth: 0.75\n      }\n    }\n  };\n}\n\nexport function getCtaRetryButtonConfig() {\n  return {\n    input: {\n      name: 'cta_retry_button',\n      priority: InputPriority.Cta + 1\n    },\n    states: {\n      up: {\n        bg: getRetryButtonImageConfig(),\n        label: getCtaRetryButtonTextConfig()\n      }\n    }\n  };\n}\n","import { getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig } from './grid/background-grid-configs';\nimport {\n  getCTAContainerGridLandscapeConfig,\n  getCTAContainerGridPortraitConfig\n} from './grid/cta-container-grid-configs';\nimport { getCTAEmbeddedGridLandscapeConfig, getCTAEmbeddedGridPortraitConfig } from './grid/cta-embedded-grid-configs';\nimport { getCTAStandardGridLandscapeConfig, getCTAStandardGridPortraitConfig } from './grid/cta-standard-grid-configs';\nimport { getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig } from './grid/foreground-grid-configs';\nimport { getGameGridLandscapeConfig, getGameGridPortraitConfig } from './grid/game-grid-configs';\nimport { getMainGridLandscapeConfig, getMainGridPortraitConfig } from './grid/main-grid-configs';\nimport { getTutorialGridLandscapeConfig, getTutorialGridPortraitConfig } from './grid/tutorial-grid-config';\nimport {\n  getTutorialSequenceGridLandscapeConfig,\n  getTutorialSequenceGridPortraitConfig\n} from './grid/tutorial-sequence-grid-config';\nimport { getUIGridLandscapeConfig, getUIGridPortraitConfig } from './grid/ui-grid-configs';\n\nexport function getMainGridConfig() {\n  return LP(getMainGridLandscapeConfig, getMainGridPortraitConfig).call(null);\n}\n\nexport function getForegroundGridConfig() {\n  return LP(getForegroundGridLandscapeConfig, getForegroundGridPortraitConfig).call(null);\n}\n\nexport function getTutorialGridConfig() {\n  return LP(getTutorialGridLandscapeConfig, getTutorialGridPortraitConfig).call(null);\n}\n\nexport function getTutorialSequenceGridConfig() {\n  return LP(getTutorialSequenceGridLandscapeConfig, getTutorialSequenceGridPortraitConfig).call(null);\n}\n\nexport function getBackgroundGridConfig() {\n  return LP(getBackgroundGridLandscapeConfig, getBackgroundGridPortraitConfig).call(null);\n}\n\nexport function getUIGridConfig() {\n  return LP(getUIGridLandscapeConfig, getUIGridPortraitConfig).call(null);\n}\n\nexport function getGameGridConfig() {\n  return LP(getGameGridLandscapeConfig, getGameGridPortraitConfig).call(null);\n}\n\nexport function getCTAContainerGridConfig() {\n  return LP(getCTAContainerGridLandscapeConfig, getCTAContainerGridPortraitConfig).call(null);\n}\n\nexport function getCTAStandardGridConfig() {\n  return LP(getCTAStandardGridLandscapeConfig, getCTAStandardGridPortraitConfig).call(null);\n}\n\nexport function getCTAEmbeddedGridConfig() {\n  return LP(getCTAEmbeddedGridLandscapeConfig, getCTAEmbeddedGridPortraitConfig).call(null);\n}\n","import { CellScale } from '@armathai/phaser2-grid';\n\nexport function getBackgroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'bg',\n        scale: CellScale.Envelop,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getBackgroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'background',\n    cells: [\n      {\n        name: 'bg',\n        scale: CellScale.Envelop,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n","export function getCTAContainerGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta_container',\n    cells: [\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'cta'\n      }\n    ]\n  };\n}\n\nexport function getCTAContainerGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta_container',\n    cells: [\n      {\n        bounds: { x: 0, y: 0, width: 1, height: 1 },\n        name: 'cta'\n      }\n    ]\n  };\n}\n","import { CellAlign, CellScale } from '@armathai/phaser2-grid';\nimport { isSquareLikeScreen } from '../../utils';\n\nexport function getCTAEmbeddedGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.125, width: 0.3, height: 0.3 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'retry_button',\n        align: CellAlign.CenterBottom,\n        bounds: { x: 0, y: 0.6 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'play_button',\n        align: CellAlign.CenterTop,\n        bounds: { x: 0, y: 0.77 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'play_button_no_retry',\n        bounds: { x: 0, y: 0.68 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'content',\n        bounds: { x: 0.3, y: 0, width: 0.7, height: 1 },\n        padding: { x: 0.1, y: 0.15, height: 0.7, width: 0.7 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getCTAEmbeddedGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.05, width: 1, height: 0.15 }\n      },\n      {\n        name: 'content',\n        align: CellAlign.CenterTop,\n        bounds: { x: 0.1, y: 0.23, width: 0.8, height: 0.5 }\n      },\n      {\n        name: 'retry_button',\n        align: CellAlign.CenterBottom,\n        bounds: { x: 0.1, y: 0.77 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 },\n        padding: { height: 0.9 }\n      },\n      {\n        name: 'play_button',\n        align: CellAlign.CenterTop,\n        bounds: { x: 0.1, y: 0.77 + 0.1 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 },\n        padding: { y: 0.1 }\n      },\n      {\n        name: 'play_button_no_retry',\n        bounds: { x: 0.1, y: 0.81 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n","import { CellAlign, CellScale } from '@armathai/phaser2-grid';\nimport { isNarrowScreen, isSquareLikeScreen } from '../../utils';\n\nexport function getCTAStandardGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.05, width: 0.3, height: 0.3 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'title',\n        // align: CellAlign.CenterBottom,\n        bounds: { x: 0, y: isNarrowScreen() ? 0.35 : 0.3, width: 0.3, height: 0.1 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'retry_button',\n        align: CellAlign.CenterBottom,\n        bounds: { x: 0, y: 0.6 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'play_button',\n        align: CellAlign.CenterTop,\n        bounds: { x: 0, y: 0.77 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'play_button_no_retry',\n        bounds: { x: 0, y: 0.68 - (isSquareLikeScreen() ? 0.025 : 0), width: 0.3, height: 0.15 },\n        padding: { x: 0.1, width: 0.8 }\n      },\n      {\n        name: 'content',\n        bounds: { x: 0.3, y: 0, width: 0.7, height: 1 },\n        padding: { x: 0.1, y: 0.15, height: 0.7, width: 0.7 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getCTAStandardGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4bdbd4 },\n    name: 'cta',\n    cells: [\n      {\n        name: 'logo',\n        bounds: { x: 0, y: 0.05, width: 1, height: 0.18 }\n      },\n      {\n        name: 'title',\n        align: CellAlign.CenterBottom,\n        bounds: { x: 0.1, y: 0.25, width: 0.8, height: 0.08 }\n      },\n      {\n        name: 'content',\n        align: CellAlign.Center,\n        bounds: { x: 0.1, y: 0.35, width: 0.8, height: 0.4 - (isSquareLikeScreen() ? 0.025 : 0.05) }\n      },\n      {\n        name: 'retry_button',\n        align: CellAlign.CenterBottom,\n        bounds: { x: 0.1, y: 0.77 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 },\n        padding: { height: 0.9 }\n      },\n      {\n        name: 'play_button',\n        align: CellAlign.CenterTop,\n        bounds: { x: 0.1, y: 0.77 + 0.1 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 },\n        padding: { y: 0.1 }\n      },\n      {\n        name: 'play_button_no_retry',\n        bounds: { x: 0.1, y: 0.81 - (isSquareLikeScreen() ? 0.025 : 0.05), width: 0.8, height: 0.1 }\n      },\n      {\n        name: 'blocker',\n        scale: CellScale.Fill,\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n","export function getForegroundGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        padding: 0.05,\n        bounds: { x: 0, y: 0.2, width: 0.3, height: 0.22 }\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getForegroundGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'foreground',\n    cells: [\n      {\n        name: 'logo',\n        padding: 0.1,\n        bounds: { x: 0, y: 0, width: 0.7, height: 0.1 }\n      },\n      {\n        name: 'tutorial',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\n\nexport function getGameGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'progress_bar',\n        bounds: { x: 0.9, y: 0, width: 0.1, height: 1 }\n      },\n      {\n        name: 'timer',\n        bounds: { x: 0, y: 0, width: 0.3, height: 0.2 }\n      },\n      {\n        name: 'board',\n        padding: { x: 0.025, width: 0.9 },\n        bounds: { x: 0.3, y: 0, width: 0.6, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getGameGridPortraitConfig() {\n  return {\n    // debug: { color: 0x2fc900 },\n    name: 'game',\n    cells: [\n      {\n        name: 'progress_bar',\n        align: CellAlign.CenterBottom,\n        padding: { x: 0, y: 0, width: 1, height: 0.8 },\n        bounds: { x: 0, y: 0.1, width: 1, height: 0.125 }\n      },\n      {\n        name: 'timer',\n        bounds: { x: 0.7, y: 0, width: 0.3, height: 0.1 }\n      },\n      {\n        name: 'board',\n        bounds: { x: 0, y: 0.225, width: 1, height: 0.625 }\n      }\n    ]\n  };\n}\n","import { CellScale } from '@armathai/phaser2-grid';\nimport { getGameBounds } from '../../utils';\n\nexport function getMainGridLandscapeConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n\nexport function getMainGridPortraitConfig() {\n  return {\n    name: 'main',\n    bounds: getGameBounds(),\n    // debug: { color: 0xffffff },\n    scale: CellScale.None\n  };\n}\n","export function getTutorialGridLandscapeConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'tutorial',\n    cells: [\n      {\n        name: 'sequence',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getTutorialGridPortraitConfig() {\n  return {\n    // debug: { color: 0xd95027 },\n    name: 'tutorial',\n    cells: [\n      {\n        name: 'sequence',\n        bounds: { x: 0, y: 0, width: 1, height: 1 }\n      }\n    ]\n  };\n}\n","export function getTutorialSequenceGridLandscapeConfig() {\n  // const x = isNarrowScreen() ? 0.4 : 0.415;\n  // const width = isNarrowScreen() ? 0.425 : 0.4;\n\n  return {\n    // debug: { color: 0xd95777 },\n    name: 'tutorial_sequence',\n    cells: [\n      {\n        name: '0',\n        bounds: { x: 0.25, y: 0, width: 0.5, height: 1 }\n      },\n      {\n        name: '1',\n        bounds: { x: 0.25, y: 0, width: 0.5, height: 1 }\n      },\n      {\n        name: '2',\n        bounds: { x: 0.25, y: 0, width: 0.5, height: 1 }\n      },\n      {\n        name: '3',\n        bounds: { x: 0.25, y: 0, width: 0.5, height: 1 }\n      }\n    ]\n  };\n}\n\nexport function getTutorialSequenceGridPortraitConfig() {\n  // const y = isNarrowScreen() ? 0.3 : 0.25;\n  // const height = isNarrowScreen() ? 0.275 : 0.3;\n\n  return {\n    // debug: { color: 0xd95777 },\n    name: 'tutorial_sequence',\n    cells: [\n      {\n        name: '0',\n        bounds: { x: 0, y: 0.25, width: 1, height: 0.5 }\n      },\n      {\n        name: '1',\n        bounds: { x: 0, y: 0.25, width: 1, height: 0.5 }\n      },\n      {\n        name: '2',\n        bounds: { x: 0, y: 0.25, width: 1, height: 0.5 }\n      },\n      {\n        name: '3',\n        bounds: { x: 0, y: 0.25, width: 1, height: 0.5 }\n      }\n    ]\n  };\n}\n","import { CellAlign } from '@armathai/phaser2-grid';\nimport { isNarrowScreen } from '../../utils';\n\nexport function getUIGridLandscapeConfig() {\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'p_cta',\n        padding: 0.05,\n        bounds: { x: 0, y: 0.6, width: 0.3, height: 0.175 }\n      }\n    ]\n  };\n}\n\nexport function getUIGridPortraitConfig() {\n  return {\n    // debug: { color: 0x4287f5 },\n    name: 'ui',\n    cells: [\n      {\n        name: 'p_cta',\n        align: isNarrowScreen() ? CellAlign.CenterTop : CellAlign.Center,\n        bounds: { x: 0, y: 0.85, width: 1, height: 0.155 }\n      }\n    ]\n  };\n}\n","export function getBackgroundImageConfig(key) {\n  return {\n    frame: key\n  };\n}\n\nexport function getPadImageConfig(color) {\n  return {\n    frame: `pads/${color}.png`\n  };\n}\n\nexport function getPadInnerGlowImageConfig() {\n  return {\n    frame: 'fx/tap_light.png'\n  };\n}\n\nexport function getPlayMusicImageConfig() {\n  return {\n    frame: 'cta/play_music.png'\n  };\n}\n\nexport function getPauseMusicImageConfig() {\n  return {\n    frame: 'cta/pause_music.png'\n  };\n}\n\nexport function getSingerImageConfig(singer) {\n  return {\n    frame: `cta/${singer}.png`\n  };\n}\n\nexport function getPlayButtonImageConfig() {\n  return {\n    frame: 'ui/play_button.png'\n  };\n}\n\nexport function getRetryButtonImageConfig() {\n  return {\n    frame: 'ui/retry_button.png'\n  };\n}\n\nexport function getSoundIconImageConfig() {\n  return {\n    frame: 'ui/sound_icon.png'\n  };\n}\n\nexport function getBallImageConfig() {\n  return {\n    frame: 'ui/ball.png'\n  };\n}\n\nexport function getProgressBarDotImageConfig() {\n  return {\n    frame: 'ui/dot.png'\n  };\n}\n\nexport function getProgressBarDotGlowImageConfig() {\n  return {\n    frame: 'ui/dot_glow.png'\n  };\n}\n\nexport function getProgressBarTriangleImageConfig() {\n  return {\n    frame: 'ui/triangle.png'\n  };\n}\n\nexport function getNextButtonIconImageConfig() {\n  return {\n    frame: 'ui/arrow.png'\n  };\n}\n\nexport function getHandImageConfig() {\n  return {\n    frame: 'ui/hand.png',\n    anchor: { x: 0.4, y: 0 }\n  };\n}\n","import { ctaPreVisibleUpdateCommand } from '../commands/ad/cta/cta-previsible-update-command';\nimport { onTutorialCompleteCommand } from '../commands/ad/tutorial/on-tutorial-complete-command';\nimport { onTutorialSequenceCompleteCommand } from '../commands/ad/tutorial/on-tutorial-sequence-complete-command';\nimport { onTutorialSkipCommand } from '../commands/ad/tutorial/on-tutorial-skip-command';\nimport { tutorialScreenClickCommand } from '../commands/ad/tutorial/tutorial-screen-click-command';\nimport { tutorialSequenceViewCompleteCommand } from '../commands/ad/tutorial/tutorial-sequence-view-complete-command';\nimport { onPadClickCommand } from '../commands/board/on-pad-click-command';\nimport { onProgressUpdateCommand } from '../commands/game/on-progress-update-command';\nimport { onTimerCompleteUpdateCommand } from '../commands/game/on-timer-complete-command';\nimport { onTimerRemainingUpdateCommand } from '../commands/game/on-timer-remaining-update-command';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\n\nexport const legoLoggerConfig = Object.freeze({\n  debugGuards: true,\n  debugCommand: true,\n  debugEventArguments: true,\n  debugRedundantEventFlag: true,\n  debugEvents: true,\n  fontSize: 12,\n  excludedEvents: [''],\n  padding: 1,\n  fontFamily: 'Arial'\n});\n\nexport const playCommands = Object.freeze([\n  {\n    event: ModelEvents.TutorialModel.CompleteUpdate,\n    command: onTutorialCompleteCommand\n  },\n  {\n    event: ModelEvents.TutorialModel.SkipUpdate,\n    command: onTutorialSkipCommand\n  },\n  {\n    event: ViewEvents.TutorialView.ScreenClick,\n    command: tutorialScreenClickCommand\n  },\n  {\n    event: ViewEvents.TutorialView.SequenceHideComplete,\n    command: tutorialSequenceViewCompleteCommand\n  },\n  {\n    event: ModelEvents.CtaModel.PreVisibleUpdate,\n    command: ctaPreVisibleUpdateCommand\n  },\n  {\n    event: ModelEvents.TutorialSequenceModel.CompleteUpdate,\n    command: onTutorialSequenceCompleteCommand\n  },\n  {\n    event: ViewEvents.BoardView.PadClick,\n    command: onPadClickCommand\n  },\n  {\n    event: ModelEvents.TimerModel.RemainingUpdate,\n    command: onTimerRemainingUpdateCommand\n  },\n  {\n    event: ModelEvents.ProgressBarModel.ProgressUpdate,\n    command: onProgressUpdateCommand\n  },\n  {\n    event: ModelEvents.TimerModel.CompleteUpdate,\n    command: onTimerCompleteUpdateCommand\n  }\n]);\n","const musicBar = 'cta/music_bar.png';\nconst musicBarGlow = 'cta/music_bar_glow.png';\n\nexport function getMusicBarPatchConfig() {\n  return {\n    width: 588,\n    height: 235,\n    frame: musicBar\n  };\n}\n\nexport function getMusicBarGlowPatchConfig() {\n  return {\n    width: 588,\n    height: 235,\n    frame: musicBarGlow\n  };\n}\n\nexport const ninePatches = [\n  {\n    key: musicBar,\n    data: {\n      left: 0,\n      right: 0,\n      top: 60,\n      bottom: 60\n    }\n  },\n  {\n    key: musicBarGlow,\n    data: {\n      left: 0,\n      right: 0,\n      top: 60,\n      bottom: 60\n    }\n  }\n];\n","const sparkle = 'sparkle';\nconst ctaSparkle = 'cta_sparkle';\n\nfunction getEmbeddedCTAParticlesConfig() {\n  return {\n    key: ctaSparkle,\n    data: {\n      lifespan: 1500,\n      frame: ['fx/star.png', 'fx/sparkle.png'],\n      scale: {\n        initial: 0,\n        value: 1,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.3, y: 1 },\n          { x: 1, y: 0 }\n        ]\n      },\n      alpha: {\n        initial: 0,\n        value: 1,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.3, y: 1 },\n          { x: 1, y: 0 }\n        ]\n      },\n      vy: { min: -2, max: 2 },\n      vx: { min: -2, max: 2 },\n      rotation: { delta: { min: -3, max: 3 } }\n    }\n  };\n}\n\nexport function getSparkleParticlesConfig() {\n  return {\n    key: sparkle,\n    data: {\n      lifespan: 600,\n      frame: ['fx/fx_star.png'],\n      scale: {\n        initial: 0,\n        value: 1,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.3, y: 1 },\n          { x: 1, y: 0 }\n        ]\n      },\n      alpha: {\n        initial: 0,\n        value: 1,\n        control: [\n          { x: 0, y: 0.5 },\n          { x: 0.3, y: 1 },\n          { x: 1, y: 0 }\n        ]\n      },\n      vy: { min: -2, max: 2 },\n      vx: { min: -2, max: 2 },\n      rotation: { delta: { min: -10, max: 10 } }\n    }\n  };\n}\n\nexport const particles = [getSparkleParticlesConfig(), getEmbeddedCTAParticlesConfig()];\n\n// export function getLeftConfettiEmitterConfig(parent, y) {\n//   return {\n//     key: confettiLeft,\n//     parent,\n//     x: -50,\n//     y,\n//     force: { x: 0, y: 0.15 },\n//     config: {\n//       zone: CI_API.game.particleStorm.createCircleZone(1),\n//       total: LP(50, 50),\n//       delay: { start: 0, step: 30, visible: true }\n//     }\n//   };\n// }\n\nexport function getPCTASparkleEmitterConfig(parent, view) {\n  const { x, y, width, height } = view;\n  return {\n    key: sparkle,\n    parent,\n    x: x - width / 2,\n    y: y - height / 2,\n    force: { x: 0, y: 0 },\n    config: {\n      zone: CI_API.game.particleStorm.createRectangleZone(width, height),\n      total: 10,\n      repeat: -1\n    }\n  };\n}\n\nexport function getEmbeddedCTAEmitterConfig(parent, view) {\n  const { x, y, width, height } = view;\n  return {\n    key: ctaSparkle,\n    parent,\n    x: x - width / 2,\n    y: y - height / 2,\n    force: { x: 0, y: 0 },\n    config: {\n      zone: CI_API.game.particleStorm.createRectangleZone(width, height),\n      total: 6,\n      repeat: -1\n    }\n  };\n}\n","export const Spines = {\n  // Card: {\n  //   Key: 'card',\n  //   Animations: {\n  //     CardBack: 'card_back',\n  //     CardFront: 'card_front',\n  //     Rotate: 'rotate'\n  //   }\n  // }\n};\n\n// export function getCardSpineConfig(x, y) {\n//   return {\n//     key: Spines.Card.Key,\n//     x,\n//     y\n//   };\n// }\n","import { FONT1, FONT2 } from '../constants';\n\n// TUTORIAL\nexport function getTutorialTextConfig(text, fill) {\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: 48,\n      fill,\n      align: 'center',\n      wordWrap: true,\n      wordWrapWidth: 400,\n      stroke: '#000000',\n      strokeThickness: 5\n    }\n  };\n}\n\n// PERSISTENT\nexport function getPersistentCtaTextConfig() {\n  return {\n    text: 'cta_btn_persistent_text',\n    style: {\n      font: FONT1,\n      fontSize: 65,\n      fill: '#000000'\n    }\n  };\n}\n\n// CTA\nexport function getCtaPlayButtonTextConfig(text) {\n  return {\n    text,\n    y: 3,\n    style: {\n      font: FONT1,\n      fontSize: 55,\n      fill: '#000000'\n    }\n  };\n}\n\nexport function getCtaRetryButtonTextConfig() {\n  return {\n    text: 'RETRY',\n    y: 3,\n    style: {\n      font: FONT1,\n      fontSize: 50,\n      fill: '#f9db0b'\n    }\n  };\n}\n\nexport function getStandardCtaTitleTextConfig(text, color = '#ffffff') {\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: 48,\n      fill: color\n    }\n  };\n}\n\nexport function getGameLogoLabelTextConfig() {\n  return {\n    text: 'BEAT MAKER PRO',\n    style: {\n      font: FONT1,\n      fontSize: 82,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getCtaLogoLabelTextConfig() {\n  return {\n    text: 'BEAT MAKER PRO',\n    style: {\n      font: FONT1,\n      fontSize: 45,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getCtaOptionTitleTextConfig(text) {\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: 30,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getCtaOptionOriginalTextConfig() {\n  return {\n    text: 'Original by',\n    style: {\n      font: FONT2,\n      fontSize: 22,\n      fill: '#dddddd'\n    }\n  };\n}\n\nexport function getCtaOptionSingerTextConfig(text) {\n  return {\n    text,\n    style: {\n      font: FONT2,\n      fontSize: 24,\n      fill: '#9cf5f3'\n    }\n  };\n}\n\nexport function getPointerTextConfig(text) {\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: 32,\n      fill: '#fef955'\n    }\n  };\n}\n\nexport function getTimerTextConfig(text) {\n  return {\n    text,\n    style: {\n      font: FONT1,\n      fontSize: 32,\n      fill: '#ffffff'\n    }\n  };\n}\n\nexport function getCTAStandardLabelTextConfig() {\n  return {\n    text: {\n      text: ` ${localization.get('WELL DONE!')} `,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 85,\n      fill: '#ffffff',\n      shadow: {\n        x: 0,\n        y: 0,\n        color: '#5fbfd0',\n        blur: 25,\n        shadowStroke: true,\n        shadowFill: true\n      }\n    }\n  };\n}\n\nexport function getCTAEmbeddedProgressTextConfig(progress) {\n  const percent = progress * 100;\n  return {\n    text: {\n      text: `  ${percent.toFixed(0)}%  `,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    },\n    style: {\n      font: FONT1,\n      fontSize: 90,\n      fill: '#fef955',\n      shadow: {\n        x: 0,\n        y: 0,\n        color: '#fef955',\n        blur: 20,\n        shadowStroke: true,\n        shadowFill: true\n      }\n    }\n  };\n}\n","/**\n * Define tutorial behavior.\n * @parameter text: Content of tutorial sequence.\n *\n * @parameter duration: Milliseconds delay before tutorial sequence completes. Set -1 to make delay endless.\n *\n * @parameter clickToComplete: If set 'true', the entire screen will be clickable to complete the sequence.\n * Otherwise you should use property duration to complete it, or handle it manually.\n */\nexport function getTutorialConfig() {\n  let config = [];\n  const { short_version: shortVersion } = CI_API.Globals.PARAMS;\n\n  if (shortVersion) {\n    config = [\n      { text: 'Tutorial Text 1', duration: -1, clickToComplete: true },\n      { text: 'Tutorial Text 2', duration: -1, clickToComplete: false }\n    ];\n  } else {\n    config = [\n      { text: 'Tutorial Text 1', duration: -1, clickToComplete: true },\n      { text: 'Tutorial Text 2', duration: -1, clickToComplete: false },\n      { text: 'Tutorial Text 1', duration: -1, clickToComplete: true },\n      { text: 'Tutorial Text 2', duration: -1, clickToComplete: false }\n    ];\n  }\n\n  return config;\n}\n","export const FONT1 = 'Roboto-Bold';\nexport const FONT2 = 'Roboto-Regular';\n\nexport const AdState = Object.freeze({\n  Ready: 'ready',\n  Live: 'live',\n  Idle: 'idle'\n});\n\nexport const AdStatus = Object.freeze({\n  Unknown: 'unknown',\n  Game: 'game',\n  PreCta: 'pre_cta',\n  Cta: 'cta',\n  Retry: 'retry',\n  Restart: 'restart'\n});\n\nexport const PhaserState = Object.freeze({\n  Preload: 'PreloaderState',\n  Game: 'GameState'\n});\n\nexport const AdViewState = Object.freeze({\n  Unknown: 'unknown',\n  Init: 'Init',\n  Preload: 'Preload',\n  Create: 'Create',\n  ShutDown: 'ShutDown'\n});\n\nexport const SoundState = Object.freeze({\n  Unknown: 'unknown',\n  On: 'on',\n  Off: 'off'\n});\n\nexport const InputPriority = Object.freeze({\n  Game: 10,\n  Cta: 20,\n  Foreground: 30\n});\n\nexport const GameOverReasons = Object.freeze({\n  Unknown: 'unknown',\n  Idled: 'idled',\n  ItemsToCtaReached: 'items_to_cta_reached'\n});\n\nexport const PadGap = 10;\nexport const PadWidth = 168;\nexport const PadHeight = 168;\n\nexport const BoardState = Object.freeze({\n  Unknown: 'unknown',\n  Idle: 'idle',\n  Simulation: 'simulation',\n  Playing: 'playing'\n});\n\nexport const PadState = Object.freeze({\n  Unknown: 'unknown',\n  Idle: 'idle',\n  Blocked: 'blocked',\n  Enabled: 'enabled',\n  Disabled: 'disabled'\n});\n\nexport const PadColor = Object.freeze({\n  Pink: 'cube_pink',\n  Purple: 'cube_purple',\n  Yellow: 'cube_yellow',\n  BlueBright: 'cube_blue_bright'\n});\n\nexport const DotState = Object.freeze({\n  Unknown: 'unknown',\n  Idle: 'idle',\n  Glowing: 'glowing',\n  Filled: 'filled'\n});\n\nexport const SoundPartState = Object.freeze({\n  Unknown: 'unknown',\n  Idle: 'idle',\n  Play: 'play',\n  Autoplay: 'autoplay',\n  Simulate: 'simulate',\n  Hint: 'hint'\n});\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\nimport Loader from 'webfontloader';\n\n/**\n * Fontloader ...\n *\n * @copyright CrossInstall 2018\n * @module FontLoader\n */\nconst FontLoader = {};\n\n/**\n * Non-web fonts: Provide local otf font file in /texture_sheets/ <br>\n * Provided font files must contain no spaces and avoid uppercase characters <br>\n *\n * @name fontsToLoad\n * @returns {object}\n */\nFontLoader.FONTS_TO_LOAD = {\n  families: ad_fonts_to_load ? ad_fonts_to_load.split(',') : []\n};\n\nFontLoader.TIMEOUT = 4000;\n\nFontLoader.LOADED_FONTS = [];\nFontLoader.FAILED_FONTS = [];\nFontLoader.AD_FONTS_READY = false;\n\n/**\n * - Inner Methods - <br> <br>\n * active - This event is triggered when the fonts have rendered <br>\n * inactive - This event is triggered when linked fonts is unsupported or no fonts could be loaded <br>\n * fontactive - This event is triggered once for each font that renders <br>\n * fontinactive - This event is triggered if the font can't be loaded <br>\n *\n * @name loadFonts\n * @param function callback\n * @function\n */\nFontLoader.loadFonts = function(callback) {\n  const fontConfig = {\n    custom: FontLoader.FONTS_TO_LOAD,\n\n    timeout: FontLoader.TIMEOUT,\n\n    active() {\n      if (document.readyState == 'complete') {\n        if (callback) callback();\n      } else {\n        window.addEventListener('load', function() {\n          if (callback) callback();\n        });\n      }\n      FontLoader.AD_FONTS_READY = true;\n\n      console.log(`Custom fonts loaded: ${FontLoader.LOADED_FONTS}`);\n    },\n    inactive() {\n      if (callback) callback();\n      if (FontLoader.FAILED_FONTS.length) console.warn(`One or more fonts failed to load: ${FontLoader.FAILED_FONTS}`);\n    },\n\n    fontactive(familyName) {\n      // This event is triggered once for each font that renders.\n      FontLoader.LOADED_FONTS[FontLoader.LOADED_FONTS.length] = familyName;\n\n      const newDiv = document.createElement('font-div');\n      newDiv.id = familyName;\n      newDiv.style.fontFamily = familyName;\n      newDiv.style.position = 'absolute';\n      newDiv.style.visibility = 'hidden';\n      newDiv.innerHTML = 'Hello world.';\n      document.body.appendChild(newDiv);\n    },\n    fontinactive(familyName, fvd) {\n      FontLoader.FAILED_FONTS[FontLoader.FAILED_FONTS.length] = familyName;\n      console.warn(`failed ${familyName} ${fvd}`);\n    }\n  };\n\n  /* Load with fontConfig */\n  Loader.load(fontConfig);\n};\n\nexport default FontLoader;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global CI_API, ad_orientation */\nimport LUG from './lu/layout-utils-general';\nimport LUC from './lu/layout-utils-compact';\n\n// Trigger to load old ('general') or 'compact' (with universal orientation support) Layout Utils\nconst useUniversalOrientation = true;\n\n// TODO Temporary disable handleOrientation methods\nconst disableIncorrectOrientationHandling = () => {\n  if (Utils.prototype.handleIncorrectOrientation) {\n    Utils.prototype.handleIncorrectOrientation = () => {};\n  }\n\n  if (Utils.prototype.handleCorrectOrientation) {\n    Utils.prototype.handleCorrectOrientation = () => {};\n  }\n};\n\nconst LU = useUniversalOrientation ? LUC : LUG;\n\nif (useUniversalOrientation) disableIncorrectOrientationHandling();\n\nexport default LU;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n*****************************************************************************/\n\nclass LayoutUtilsCompact {\n  constructor() {\n    this.CONTAINER_NAME = 'creative';\n    this.inited = false;\n  }\n\n  // Init method should be called only once, to avoid size check requestAnimationFrame duplicates,\n  // and other Phaser's properties refresh.\n  init(game, isUniversal = true) {\n    if (!this.inited) {\n      this.inited = true;\n    } else {\n      return;\n    }\n\n    this.mGame = game;\n    this.mIsUniversal = isUniversal;\n    this.mHeaderNode = document.getElementById('ad_header') || { clientHeight: 0 };\n    this.mOrientationNode = document.getElementById('orientation') || { style: {} };\n    game.scale.scaleMode = Phaser.ScaleManager.USER_SCALE;\n\n    // If universal then override default LP method. New LP method checks real\n    // device orientation instead of getting it from 'ad_orientation' tag param.\n    if (isUniversal) {\n      window.LP = (landscape, portrait) => (window.innerWidth > window.innerHeight ? landscape : portrait);\n    }\n\n    this.sizeCheck();\n    this.refresh();\n  }\n\n  get isPortrait() {\n    return LP(false, true);\n  }\n\n  get isLandscape() {\n    return LP(true, false);\n  }\n\n  sizeCheck() {\n    const maxCheckTime = 750;\n    let startTime = null;\n\n    let tempWidth = 0;\n    let tempHeight = 0;\n    let handleId = null;\n\n    const check = timestamp => {\n      if (!this.mGame) return;\n      if (!startTime) startTime = timestamp;\n\n      if (tempWidth !== window.innerWidth || tempHeight !== window.innerHeight) {\n        this.refresh();\n        this.resizeCall(this.mGame.world);\n\n        tempWidth = window.innerWidth;\n        tempHeight = window.innerHeight;\n      }\n\n      if (timestamp - startTime < maxCheckTime) {\n        window.cancelAnimationFrame(handleId);\n        handleId = window.requestAnimationFrame(check);\n      }\n    };\n\n    window.cancelAnimationFrame(handleId);\n    handleId = window.requestAnimationFrame(check);\n\n    window.addEventListener('resize', e => {\n      startTime = null;\n      check(0);\n    });\n  }\n\n  // Recursively calls resize handler for each sprite in gameObject tree\n  resizeCall(gameObject) {\n    gameObject.handleResize && gameObject.handleResize(LP('landscape', 'portrait'));\n    gameObject.children.forEach(this.resizeCall, this);\n  }\n\n  refresh() {\n    if (!this.mGame) return;\n    const { mGame: game, mOrientationNode: orientationNode, mIsUniversal: isUniversal, mHeaderNode: headerNode } = this;\n\n    // Lets try to keep world within 960x640 range\n    const windowWidth = window.innerWidth || 1;\n    const windowHeight = window.innerHeight || 1;\n    const mw = LP((windowWidth * 640) / windowHeight, (windowWidth * 960) / windowHeight);\n    const mh = LP((windowHeight * 960) / windowWidth, (windowHeight * 640) / windowWidth);\n    const scaleFactor = Math.max(mw / windowWidth, mh / windowHeight);\n\n    const width = windowWidth * scaleFactor;\n    const height = windowHeight * scaleFactor;\n\n    // Notify phaser\n    game.scale.setGameSize(width, height);\n    game.scale.setUserScale(1 / scaleFactor, 1 / scaleFactor);\n    game.scale.refresh();\n\n    CI_API._orientationBlocker = null;\n    orientationNode.style.display = isUniversal || LP(width > height, width < height) ? 'none !important' : 'block';\n\n    // Refresh must be called at least once before read this property\n    // Also this property can return a zero in a feature\n    game.headerHeight = headerNode.clientHeight * scaleFactor;\n    game.scaleFactor = this.scaleFactor = scaleFactor;\n    game.visibleHeight = height - game.headerHeight;\n  }\n\n  _throwError() {\n    throw new Error('Please, check do you really need to use multi-orientation layout-utils version');\n  }\n\n  refreshViewDimmensions() {\n    this._throwError();\n  }\n\n  getHeaderHeight() {\n    this._throwError();\n  }\n\n  fitIntoRect() {\n    this._throwError();\n  }\n\n  centerIntoView() {\n    this._throwError();\n  }\n}\n\nexport default new LayoutUtilsCompact();\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/**\n * @file A set of utils functions to work with multi-resolution.\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n */\n\nclass LayoutUtils {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n\n  static init(game) {\n    const state = game.state.states[game.state.current];\n\n    utils.scaleCreative();\n    utils.attachResizeListener(state);\n  }\n\n  static resizeCall() {\n    return null;\n  }\n\n  static getDevicePixelRatio() {\n    let ratio = 1;\n\n    if (\n      window.screen.systemXDPI !== undefined &&\n      window.screen.logicalXDPI !== undefined &&\n      window.screen.systemXDPI > window.screen.logicalXDPI\n    )\n      ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    else if (window.devicePixelRatio !== undefined) ratio = window.devicePixelRatio;\n\n    return ratio * LayoutUtils.RENDER_RESOLUTION;\n  }\n\n  static getHeaderHeight() {\n    return LayoutUtils.HEADER_ELEMENT.clientHeight * LayoutUtils.getDevicePixelRatio() * LayoutUtils.INVS;\n  }\n\n  static refreshViewDimmensions() {\n    LayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n    LayoutUtils.HEADER_ELEMENT = document.getElementById('ad_header');\n\n    LayoutUtils.VIEW_WIDTH = document.body.clientWidth * LayoutUtils.getDevicePixelRatio();\n    LayoutUtils.VIEW_HEIGHT = document.body.clientHeight * LayoutUtils.getDevicePixelRatio();\n\n    if (LayoutUtils.IS_LANDSCAPE) {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_WIDTH;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_HEIGHT;\n    } else {\n      LayoutUtils.BASE_WIDTH = LayoutUtils.DEFAULT_BASE_HEIGHT;\n      LayoutUtils.BASE_HEIGHT = LayoutUtils.DEFAULT_BASE_WIDTH;\n    }\n\n    const scaleX = LayoutUtils.VIEW_WIDTH / LayoutUtils.BASE_WIDTH;\n    const scaleY = LayoutUtils.VIEW_HEIGHT / LayoutUtils.BASE_HEIGHT;\n\n    LayoutUtils.S = Math.min(scaleX, scaleY);\n    LayoutUtils.INVS = 1 / LayoutUtils.S;\n\n    LayoutUtils.LEFT_OFFSET =\n      -(LayoutUtils.VIEW_WIDTH / 2 - (LayoutUtils.BASE_WIDTH / 2) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.RIGHT_OFFSET = -LayoutUtils.LEFT_OFFSET + LayoutUtils.BASE_WIDTH;\n    LayoutUtils.TOP_OFFSET =\n      -(LayoutUtils.VIEW_HEIGHT / 2 - (LayoutUtils.BASE_HEIGHT / 2) * LayoutUtils.S) * LayoutUtils.INVS;\n    LayoutUtils.BOTTOM_OFFSET = -LayoutUtils.TOP_OFFSET + LayoutUtils.BASE_HEIGHT;\n    LayoutUtils.FULL_GAME_WIDTH = LayoutUtils.RIGHT_OFFSET - LayoutUtils.LEFT_OFFSET;\n    LayoutUtils.FULL_GAME_HEIGHT = LayoutUtils.BOTTOM_OFFSET - LayoutUtils.TOP_OFFSET;\n\n    LayoutUtils.ASPECT_RATIO = Math.round((LayoutUtils.VIEW_HEIGHT / LayoutUtils.VIEW_WIDTH) * 100) / 100; // TODO: check landscape\n\n    // console.log('[' + LayoutUtils.MODULE_NAME + ']', 'orientation:', ad_orientation, 'view-size:', LayoutUtils.VIEW_SIZE, 'left-offset:', LayoutUtils.LEFT_OFFSET, 'right-offset:', LayoutUtils.RIGHT_OFFSET, 'top-offset:', LayoutUtils.TOP_OFFSET, 'bottom-offset:', LayoutUtils.BOTTOM_OFFSET, 'aspect:', LayoutUtils.ASPECT_RATIO);\n    LayoutUtils.fixCanvasSize(true);\n  }\n\n  static fixCanvasSize(r = true) {\n    if (r) {\n      setTimeout(function() {\n        LayoutUtils.fixCanvasSize(false);\n      }, 100);\n      return;\n    }\n\n    window.scrollTo(0, 1);\n  }\n\n  static centerIntoView(object) {\n    object.scale.set(LayoutUtils.S);\n    object.x = LayoutUtils.VIEW_WIDTH / 2 - (LayoutUtils.BASE_WIDTH / 2) * LayoutUtils.S;\n    object.y = LayoutUtils.VIEW_HEIGHT / 2 - (LayoutUtils.BASE_HEIGHT / 2) * LayoutUtils.S;\n  }\n\n  static fitIntoRect(sprite, bounds, fillRect, align, spriteBounds) {\n    const wD = spriteBounds ? spriteBounds.width / sprite.scale.x : sprite.width / sprite.scale.x;\n    const hD = spriteBounds ? spriteBounds.height / sprite.scale.y : sprite.height / sprite.scale.y;\n\n    const wR = bounds.width;\n    const hR = bounds.height;\n\n    const sX = wR / wD;\n    const sY = hR / hD;\n\n    const rD = wD / hD;\n    const rR = wR / hR;\n\n    const sH = fillRect ? sY : sX;\n    const sV = fillRect ? sX : sY;\n\n    const s = rD >= rR ? sH : sV;\n    const w = wD * s;\n    const h = hD * s;\n\n    let tX = 0.0;\n    let tY = 0.0;\n\n    switch (align) {\n      case 'left':\n      case 'topLeft':\n      case 'bottomLeft':\n        tX = 0.0;\n        break;\n\n      case 'right':\n      case 'topRight':\n      case 'bottomRight':\n        tX = w - wR;\n        break;\n\n      default:\n        tX = 0.5 * (w - wR);\n    }\n\n    switch (align) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        tY = 0.0;\n        break;\n\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        tY = h - hR;\n        break;\n\n      default:\n        tY = 0.5 * (h - hR);\n    }\n\n    sprite.x = bounds.x - tX;\n    sprite.y = bounds.y - tY;\n    sprite.scale.set(s);\n  }\n}\n\n// Hum hum! 1 = 1:1 to device size. 0.5 means 50% to device pixel density. Make it smaller only if you need to get few more FPS.\nLayoutUtils.RENDER_RESOLUTION = 1;\n\n// MR related\nLayoutUtils.CONTAINER_NAME = 'creative';\nLayoutUtils.CONTAINER = document.getElementById(LayoutUtils.CONTAINER_NAME);\n\nLayoutUtils.DEFAULT_BASE_WIDTH = 960;\nLayoutUtils.DEFAULT_BASE_HEIGHT = 640;\n\nLayoutUtils.BASE_WIDTH = 960;\nLayoutUtils.BASE_HEIGHT = 640;\n\nLayoutUtils.ASPECT_RATIO = 0;\nLayoutUtils.S = 1; // SCALE\nLayoutUtils.INVS = 1 / LayoutUtils.S; // SCALE INVERTED\nLayoutUtils.VIEW_WIDTH = 0;\nLayoutUtils.VIEW_HEIGHT = 0;\n\nLayoutUtils.LEFT_OFFSET = 0;\nLayoutUtils.RIGHT_OFFSET = 0;\nLayoutUtils.TOP_OFFSET = 0;\nLayoutUtils.BOTTOM_OFFSET = 0;\n\nLayoutUtils.IS_LANDSCAPE = ad_orientation === 'landscape';\nLayoutUtils.IS_PORTRAIT = !LayoutUtils.IS_LANDSCAPE;\n\n// Fake\nLayoutUtils.MODULE_NAME = 'LayoutUtils';\nexport default LayoutUtils;\n","export const ModelEvents = Object.freeze({\n  AdModel: {\n    StatusUpdate: 'AdModelStatusUpdate',\n    ViewStateUpdate: 'AdModelViewStateUpdate',\n    LoadUpdate: 'AdModelLoadUpdate',\n    HintUpdate: 'AdModelHintUpdate',\n    TutorialUpdate: 'AdModelTutorialUpdate',\n    PersistentCtaUpdate: 'AdModelPersistentCtaUpdate',\n    CtaUpdate: 'AdModelCtaUpdate',\n    SoundUpdate: 'AdModelSoundUpdate',\n    RetriesUpdate: 'AdModelRetriesUpdate'\n  },\n  CtaModel: {\n    TypeUpdate: 'CtaModelTypeUpdate',\n    ReasonUpdate: 'CtaModelReasonUpdate',\n    PreVisibleUpdate: 'CtaModelPreVisibleUpdate',\n    VisibleUpdate: 'CtaModelVisibleUpdate'\n  },\n  HintModel: {\n    VisibleUpdate: 'HintModelVisibleUpdate',\n    TimerAlreadyStartedUpdate: 'HintModelTimerAlreadyStartedUpdate'\n  },\n  LoadModel: {\n    ProgressUpdate: 'LoadModelProgressUpdate',\n    CompleteUpdate: 'LoadModelCompleteUpdate'\n  },\n  SoundModel: {\n    StateUpdate: 'SoundModelStateUpdate',\n    IconUpdate: 'SoundModelIconUpdate'\n  },\n  TutorialModel: {\n    CompleteUpdate: 'TutorialModelCompleteUpdate',\n    SkipUpdate: 'TutorialModelSkipUpdate',\n    SequencesUpdate: 'TutorialModelSequencesUpdate',\n    CurrentUpdate: 'TutorialModelCurrentUpdate',\n    CurrentIndexUpdate: 'TutorialModelCurrentIndexUpdate'\n  },\n  TutorialSequenceModel: {\n    ConfigUpdate: 'TutorialSequenceModelConfigUpdate',\n    IndexUpdate: 'TutorialSequenceModelIndexUpdate',\n    CompleteUpdate: 'TutorialSequenceModelCompleteUpdate',\n    ShowUpdate: 'TutorialSequenceModelShowUpdate'\n  },\n  BoardModel: {\n    PadsUpdate: 'BoardModelPadsUpdate',\n    PlaySequenceUpdate: 'BoardModelPlaySequenceUpdate',\n    AutoPlaySoundsUpdate: 'BoardModelAutoPlaySoundsUpdate',\n    SimulationSequenceUpdate: 'BoardModelSimulationSequenceUpdate',\n    SequenceUpdate: 'BoardModelSequenceUpdate',\n    StateUpdate: 'BoardModelStateUpdate'\n  },\n  PadModel: {\n    RowUpdate: 'PadModelRowUpdate',\n    ColumnUpdate: 'PadModelColumnUpdate',\n    ColorUpdate: 'PadModelColorUpdate',\n    SoundUpdate: 'PadModelSoundUpdate',\n    StateUpdate: 'PadModelStateUpdate'\n  },\n  SoundPartModel: {\n    NameUpdate: 'SoundPartModelNameUpdate',\n    StartTimeUpdate: 'SoundPartModelStartTimeUpdate',\n    StateUpdate: 'SoundPartModelStateUpdate'\n  },\n  DotModel: {\n    StateUpdate: 'DotModelStateUpdate'\n  },\n  GameModel: {\n    BoardModelUpdate: 'GameModelBoardModelUpdate',\n    TimerModelUpdate: 'GameModelTimerModelUpdate',\n    ProgressBarModelUpdate: 'GameModelProgressBarModelUpdate'\n  },\n  ProgressBarModel: {\n    DotsUpdate: 'ProgressBarModelDotsUpdate',\n    ProgressUpdate: 'ProgressBarModelProgressUpdate'\n  },\n  TimerModel: {\n    TimerUpdate: 'TimerModelTimerUpdate',\n    RemainingUpdate: 'TimerModelRemainingUpdate',\n    DurationUpdate: 'TimerModelDurationUpdate',\n    DeltaUpdate: 'TimerModelDeltaUpdate',\n    CompleteUpdate: 'TimerModelCompleteUpdate',\n    StoppedUpdate: 'TimerModelStoppedUpdate'\n  },\n  ObservableModel: {\n    UuidUpdate: 'ObservableModelUuidUpdate'\n  },\n  PlayerModel: {\n    ScoreUpdate: 'PlayerModelScoreUpdate'\n  },\n  Store: {\n    AdUpdate: 'StoreAdUpdate',\n    PlayerUpdate: 'StorePlayerUpdate',\n    GameUpdate: 'StoreGameUpdate'\n  }\n});\n","export const ViewEvents = Object.freeze({\n  Ad: {\n    Live: 'AdLive'\n  },\n  Game: {\n    Resize: 'GameResize',\n    UserInteraction: 'UserInteraction',\n    CtaIdleTime: 'CtaIdleTime'\n  },\n  GameState: {\n    CtaIdleTime: 'GameStateCtaIdleTime'\n  },\n  SoundView: {\n    Click: 'SoundViewClick'\n  },\n  TutorialView: {\n    ScreenClick: 'TutorialViewScreenClick',\n    SequenceHideComplete: 'TutorialViewSequenceHideComplete'\n  },\n  PersistentCtaView: {\n    Click: 'PersistentCtaViewClick'\n  },\n  CtaView: {\n    ScreenClick: 'CtaViewScreenClick',\n    PlayClick: 'CtaViewPlayClick',\n    RetryClick: 'CtaViewRetryClick',\n    OptionClick: 'CtaViewOptionClick',\n    OptionPreview: 'CtaViewOptionPreview'\n  },\n  BoardView: {\n    PadClick: 'BoardViewPadClick'\n  }\n});\n","import { AdState } from '../../constants';\n\nexport function adLiveGuard() {\n  return ad_state === AdState.Live;\n}\n","export function asecGuard() {\n  return ad_exchange === 'tapjoy' && window.TJ_API && window.TJ_API.directives && !window.TJ_API.directives.showEndCard;\n}\n","import { store } from '../../models/store';\n\nexport function ctaModelGuard() {\n  return store.ad.cta;\n}\n","import { store } from '../../models/store';\n\nexport function ctaPreVisibleGuard() {\n  return store.ad.cta.preVisible;\n}\n","import { store } from '../../models/store';\n\nexport function ctaVisibleGuard() {\n  return store.ad.cta.visible;\n}\n","import { store } from '../../models/store';\n\nexport function hintModelGuard() {\n  return store.ad.hint;\n}\n","export function hintParamGuard() {\n  return CI_API.Globals.PARAMS.hint;\n}\n","import { store } from '../../models/store';\n\nexport function persistentCtaModelGuard() {\n  return store.ad.persistentCta;\n}\n","export function persistentCtaParamGuard() {\n  return CI_API.Globals.PARAMS.cta_btn_persistent;\n}\n","import { store } from '../../models/store';\n\nexport function soundModelGuard() {\n  return store.ad.sound;\n}\n","export function soundParamGuard() {\n  return CI_API.Globals.PARAMS.sound;\n}\n","import { store } from '../../models/store';\n\nexport function lastTutorialSequenceGuard() {\n  const { currentIndex, sequences } = store.ad.tutorial;\n  return currentIndex === sequences.length - 1;\n}\n","import { store } from '../../models/store';\n\nexport function tutorialModelGuard() {\n  return store.ad.tutorial;\n}\n","export function tutorialParamGuard() {\n  return CI_API.Globals.PARAMS.tutorial;\n}\n","import { store } from '../../models/store';\n\nexport function tutorialSequenceGuard(sequence) {\n  return store.ad.tutorial.currentIndex === sequence;\n}\n","import { BoardState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function boardStateIdleGuard() {\n  return store.game.boardModel.state === BoardState.Idle;\n}\n","import { BoardState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function boardStatePlayingGuard() {\n  return store.game.boardModel.state === BoardState.Playing;\n}\n","import { BoardState } from '../../constants';\nimport { store } from '../../models/store';\n\nexport function boardStateSimulationGuard() {\n  return store.game.boardModel.state === BoardState.Simulation;\n}\n","import { getPlaySequence } from '../../configs/board-config';\nimport { store } from '../../models/store';\n\nexport function lastPlaySequenceGuard() {\n  const { length } = getPlaySequence();\n\n  return store.game.boardModel.sequence === length - 1;\n}\n","import { store } from '../../models/store';\n\nexport function gameModelGuard() {\n  return store.game;\n}\n","export function timerCompleteGuard(complete) {\n  return complete;\n}\n","import { store } from '../../models/store';\n\nexport function playerModelGuard() {\n  return store.player;\n}\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global Phaser, imageLoader, embedded */\n\n(() => {\n  // Decorate Phaser Render\n  const { generateTilingTexture } = Phaser.TileSprite.prototype;\n  const renderCanvas = Phaser.Sprite.prototype._renderCanvas;\n  const matrixPool = [];\n  const rectPool = [];\n  const scalePool = {};\n\n  const scaleJson = json => {\n    const { frames } = json;\n\n    for (const name in frames) {\n      if (!Object.prototype.hasOwnProperty.call(frames, name) || !frames[name].frame) continue;\n      const frame = frames[name];\n      const scale = getScale(json, name);\n\n      frame.frame.x /= scale;\n      frame.frame.y /= scale;\n      frame.frame.w /= scale;\n      frame.frame.h /= scale;\n      frame.spriteSourceSize.x /= scale;\n      frame.spriteSourceSize.y /= scale;\n      frame.spriteSourceSize.w /= scale;\n      frame.spriteSourceSize.h /= scale;\n      frame.sourceSize.w /= scale;\n      frame.sourceSize.h /= scale;\n    }\n  };\n\n  // Normalize scale for all embedded atlas jsons\n  const scaleAllJsons = () => {\n    for (const embeddedKey in embedded) {\n      const json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        scaleJson(json_data);\n      }\n    }\n  };\n\n  // Return sprite independent scale\n  const getScale = (jsonData, frameName) => {\n    if (scalePool[frameName]) {\n      return scalePool[frameName];\n    }\n\n    let scale = 1;\n    if (jsonData && jsonData.frames && jsonData.frames[frameName] && jsonData.frames[frameName].scale) {\n      scale = jsonData.frames[frameName].scale;\n    }\n\n    scalePool[frameName] = scale;\n    return scale;\n  };\n\n  const multiply = (rect, sc) => {\n    rect.x *= sc;\n    rect.y *= sc;\n    rect.width *= sc;\n    rect.height *= sc;\n  };\n\n  Phaser.Sprite.prototype._renderCanvas = function(renderSession, matrix) {\n    if (\n      !this.visible ||\n      this.alpha === 0 ||\n      !this.renderable ||\n      this.texture.crop.width <= 0 ||\n      this.texture.crop.height <= 0\n    )\n      return;\n\n    const { texture } = this;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (matrixPool.pop() || new Phaser.Matrix()).setTo(wt.a / sc, wt.b / sc, wt.c / sc, wt.d / sc, wt.tx, wt.ty);\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n\n    renderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    rectPool.push(crop, trim);\n    matrixPool.push(m);\n  };\n\n  Phaser.TileSprite.prototype.generateTilingTexture = function(forcePowerOfTwo) {\n    if (!this.texture.baseTexture.hasLoaded) return;\n\n    const { texture } = this;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (rectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n\n    multiply(texture.crop, sc);\n    generateTilingTexture.call(this, forcePowerOfTwo);\n    crop.copyTo(texture.crop);\n    rectPool.push(crop);\n  };\n\n  const imageRenderCanvas = Phaser.Button.prototype._renderCanvas;\n  const imageMatrixPool = [];\n  const imageRectPool = [];\n\n  Phaser.Button.prototype._renderCanvas = function(renderSession, matrix) {\n    if (\n      !this.visible ||\n      this.alpha === 0 ||\n      !this.renderable ||\n      this.texture.crop.width <= 0 ||\n      this.texture.crop.height <= 0\n    )\n      return;\n\n    const { texture } = this;\n    const wt = this.worldTransform;\n    const json = embedded[texture.baseTexture.source.name];\n    const sc = getScale(json, this.frameName);\n    const crop = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.crop);\n    const trim = (imageRectPool.pop() || new Phaser.Rectangle()).copyFrom(texture.trim || texture.frame);\n    const m = (imageMatrixPool.pop() || new Phaser.Matrix()).setTo(\n      wt.a / sc,\n      wt.b / sc,\n      wt.c / sc,\n      wt.d / sc,\n      wt.tx,\n      wt.ty\n    );\n\n    multiply(texture.crop, sc);\n    multiply(texture.trim || texture.frame, sc);\n    imageRenderCanvas.call(this, renderSession, matrix || m);\n\n    crop.copyTo(texture.crop);\n    trim.copyTo(texture.trim || texture.frame);\n\n    imageRectPool.push(crop, trim);\n    imageMatrixPool.push(m);\n  };\n\n  // Override Spine.createSprite method for supporting independent asset scaling\n  const overrideSpineLibrary = function() {\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {}\n\n    if (spineLibraryAdded) {\n      PhaserSpine.Spine.prototype.createSprite = function(slot, attachment) {\n        const descriptor = attachment.rendererObject;\n        const baseTexture = descriptor.page.rendererObject;\n        const spriteRect = new PIXI.Rectangle(\n          descriptor.x,\n          descriptor.y,\n          descriptor.rotate ? descriptor.height : descriptor.width,\n          descriptor.rotate ? descriptor.width : descriptor.height\n        );\n\n        // Get asset scale and adjust it to the sprite rect\n        const sc = getScale(null, `${descriptor.name}.png`) || 1;\n        multiply(spriteRect, sc);\n\n        const spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n\n        const sprite = new Phaser.Sprite(this.game, 0, 0, spriteTexture);\n        const baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n\n        // Divide on asset scale to get the original sprite size\n        sprite.scale.x = attachment.scaleX / this.imageScale / sc;\n        sprite.scale.y = attachment.scaleY / this.imageScale / sc;\n        sprite.rotation = baseRotation;\n        sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n        sprite.anchor.y = (0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height;\n        sprite.alpha = attachment.a;\n        if (descriptor.rotate) {\n          const x1 = sprite.scale.x;\n          sprite.scale.x = sprite.scale.y;\n          sprite.scale.y = x1;\n        }\n        slot.sprites = slot.sprites || {};\n        slot.sprites[descriptor.name] = sprite;\n        return sprite;\n      };\n    }\n  };\n\n  scaleAllJsons();\n  overrideSpineLibrary();\n})();\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* global ad_webroot, ad_name, utils, embedded */\n\n/**\n * Stores game variables and static constants.\n *\n * @copyright CrossInstall 2016\n * @author 62316e@gmail.com\n * @module Global\n */\nexport default class Globals {\n  constructor() {\n    throw new Error('AbstractClassError');\n  }\n}\n\n/**\n * Globals verbose is a required variable, default true\n * @type {boolean}\n * @name verbose\n */\nGlobals.VERBOSE = true;\nGlobals.WEB_ROOT = `${ad_webroot}/${ad_name}`;\nGlobals.LAST_INTERACTION_TIME = 0;\nGlobals.PARAMS = utils.getAdParameters(embedded.params);\nGlobals.RETRIES_NUMBER = Globals.PARAMS.retries;\n\nGlobals.VICTORY = 1;\nGlobals.DEFEAT = 0;\n","/** *****************************************************************************\n _____ _     _       ____                  \n|_   _| |__ (_)___  |  _ \\ __ _  __ _  ___ \n  | | | '_ \\| / __| | |_) / _` |/ _` |/ _ \\\n  | | | | | | \\__ \\ |  __/ (_| | (_| |  __/\n  |_| |_| |_|_|___/ |_|   \\__,_|\\__, |\\___|\n                                |___/      \n ___       _             _   _                   _ _         _          __ _   \n|_ _|_ __ | |_ ___ _ __ | |_(_) ___  _ __   __ _| | |_   _  | |    ___ / _| |_ \n | || '_ \\| __/ _ \\ '_ \\| __| |/ _ \\| '_ \\ / _` | | | | | | | |   / _ \\ |_| __|\n | || | | | ||  __/ | | | |_| | (_) | | | | (_| | | | |_| | | |__|  __/  _| |_ \n|___|_| |_|\\__\\___|_| |_|\\__|_|\\___/|_| |_|\\__,_|_|_|\\__, | |_____\\___|_|  \\__|\n                                                     |___/                     \n _   _       _     ____  _             _    \n| \\ | | ___ | |_  | __ )| | __ _ _ __ | | __\n|  \\| |/ _ \\| __| |  _ \\| |/ _` | '_ \\| |/ /\n| |\\  | (_) | |_  | |_) | | (_| | | | |   < \n|_| \\_|\\___/ \\__| |____/|_|\\__,_|_| |_|_|\\_\\\n                                            \nDO NOT MODIFY THIS CROSSINSTALL FRAMEWORK FILE\n\nThis file is required for the framework to work as expected. \nIf the file is modified, the final build may not work.\n\nIf your solution requires modifying this file, you should:\n  * find a different solution that doesn't modify this file, or\n  * submit a PR with the changes you would like to make to this file\n\nQuestions? Ask our Creative Engineering Team!\n\n                                       © 2020 CrossInstall All Rights Reserved\n**************************************************************************** */\n\n/* jshint -W083 */\n/* eslint no-prototype-builtins: \"error\" */\n\n/* global Phaser, imageLoader, ad_webroot, ad_name, xp, spine, embedded, ad_assets_path */\n\n/**\n * Multi-Atlas support library\n *\n * This library allows to use multiple atlases in Phaser 2.x without carrying about\n * collecting all animations, Spriter, Spine assets in one atlas\n *\n * This library is universal. For using just import this file in the preloader state\n */\n\n/**\n * Override Phaser Phaser.AnimationManager.add and Phaser.Animation.updateCurrentFrame methods\n * Looking through the all added atlases for finding needed frame by name\n * If the current sprite FrameData used another atlas LoadTexture method calls\n * It the only one method to replace the base texture entirely\n */\nconst overridePhaserAnimation = function() {\n  Phaser.AnimationManager.prototype.add = function(name, frames, frameRate, loop) {\n    frames = frames || [];\n    frameRate = frameRate || 60;\n\n    if (loop === undefined) {\n      loop = false;\n    }\n\n    // Gather animation frames data from all cached atlases for all animation frameNames\n    const framesInfo = [];\n    let framesCount = frames.length;\n\n    // Creating new FrameData with only used frames in the current animation\n    let animationFrameData = null;\n\n    while (framesCount--) {\n      const frameName = frames[framesCount];\n      const cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n      let keyCount = cacheKeys.length;\n\n      while (keyCount--) {\n        const cacheKey = cacheKeys[keyCount];\n        const frameData = this.game.cache.getFrameData(cacheKey);\n        const frame = frameData.getFrameByName(frameName);\n\n        if (frameData && frame && frames.indexOf(frameName) !== -1) {\n          if (!animationFrameData) {\n            animationFrameData = new Phaser.FrameData();\n            for (let i = 0; i < frames.length; i++) {\n              animationFrameData.addFrame(frames[i]);\n            }\n          }\n\n          framesInfo.push({\n            frameName,\n            atlasName: cacheKey,\n            frameData: animationFrameData,\n            frame\n          });\n        }\n      }\n    }\n\n    framesInfo.reverse();\n    if (framesInfo.length === 0) {\n      console.warn(\"Animation wasn't created. Please, make sure that you add at least one existing sprite name\");\n      return;\n    }\n    // Set Frame Data form the firs exist frame\n    this._frameData = framesInfo[0].frameData;\n    this._anims[name] = new Phaser.Animation(\n      this.game,\n      this.sprite,\n      name,\n      this._frameData,\n      framesInfo,\n      frameRate,\n      loop\n    );\n\n    if (this.sprite.tilingTexture) {\n      this.sprite.refreshTexture = true;\n    }\n\n    return this._anims[name];\n  };\n\n  Phaser.Animation.prototype.updateCurrentFrame = function(signalUpdate, fromPlay) {\n    if (fromPlay === undefined) {\n      fromPlay = false;\n    }\n\n    if (!this._frameData) {\n      // The animation is already destroyed, probably from a callback\n      return false;\n    }\n\n    //  Previous index\n    // return false if there's no current Frame\n    const idx = this.currentFrame ? this.currentFrame.index : false;\n\n    // Update frameData\n    const frameInfo = this._frames[this._frameIndex];\n    this._frameData = frameInfo.frameData;\n    this.currentFrame = frameInfo.frame;\n\n    if (\n      this.currentFrame &&\n      (fromPlay || (!fromPlay && !(idx === this.currentFrame.index && this._parent.key === frameInfo.atlasName)))\n    ) {\n      // Here call loadTexture if current FrameData used another base Texture Atlas\n      if (this._parent.key !== frameInfo.atlasName) {\n        this._parent.loadTexture(frameInfo.atlasName, frameInfo.frameName, false);\n      } else {\n        this._parent.setFrame(this.currentFrame);\n      }\n    }\n\n    if (this.onUpdate && signalUpdate) {\n      this.onUpdate.dispatch(this, this.currentFrame);\n\n      // False if the animation was destroyed from within a callback\n      return !!this._frameData;\n    }\n    return true;\n  };\n\n  /**\n   * Override Phaser.Animation.update currentFrame set values\n   * for taking needed texture on the first loop frame\n   */\n  const animationUpdate = Phaser.Animation.prototype.update;\n\n  Phaser.Animation.prototype.update = function() {\n    const currentFrameTmp = this.currentFrame;\n\n    let result = animationUpdate.call(this);\n\n    if (!this.currentFrame || (currentFrameTmp && currentFrameTmp.name !== this.currentFrame.name)) {\n      this.currentFrame = this._frames[this._frameIndex].frame;\n\n      if (this.currentFrame) {\n        this._parent.setFrame(this.currentFrame);\n      }\n\n      if (this.onUpdate) {\n        this.onUpdate.dispatch(this, this.currentFrame);\n\n        // False if the animation was destroyed from within a callback\n        result = !!this._frameData;\n      } else {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n};\n\n/**\n * Next three methods allows calling Phaser.TileSprite, Phaser.Sprite and Emitter.MakeParticles without atlas key parameter or use any string as atlas name.\n * As multiple-atlas support cares about taking texture frame data from the right atlas name, these properties aren't useful now.\n */\nconst fakeTileSpriteAtlasName = 'tileSpriteFakeAtlas';\nconst fakeSpriteAtlasName = 'spriteFakeAtlas';\nconst fakeEmitterAtlasName = 'emitterFakeAtlas';\n\nconst overridePhaserTileSprite = function() {\n  const tileSprite = Phaser.TileSprite;\n  Phaser.TileSprite = function(game, x, y, width, height, key, frame) {\n    if (key && !frame) frame = key;\n\n    tileSprite.call(this, game, x, y, width, height, fakeTileSpriteAtlasName, frame);\n  };\n\n  Phaser.TileSprite = Object.assign(Phaser.TileSprite, tileSprite);\n  Phaser.TileSprite.prototype = tileSprite.prototype;\n};\n\nconst overridePhaserSprite = function() {\n  Phaser.Component.Core.init = function(game, x, y, key, frame) {\n    if (!Phaser.Component.Core.skipTypeChecks) {\n      if (!(game instanceof Phaser.Game)) {\n        throw new Error(`The value passed as the \\`game\\` argument (${game}) is not an instance of Phaser.Game.`);\n      }\n\n      if (typeof x !== 'number') {\n        console.warn('The `x` argument value (%s) should be a number.', x);\n        x = 0; // This would be done implicitly in position.set().\n      }\n\n      if (typeof y !== 'number') {\n        console.warn('The `y` argument value (%s) should be a number.', y);\n        y = 0; // This would be done implicitly in position.set().\n      }\n    }\n\n    this.game = game;\n    this.key = key;\n    this.data = {};\n\n    this.position.set(x, y);\n    this.world = new Phaser.Point(x, y);\n    this.previousPosition = new Phaser.Point(x, y);\n\n    this.events = new Phaser.Events(this);\n\n    this._bounds = new Phaser.Rectangle();\n\n    if (this.components.PhysicsBody) {\n      // Enable-body checks for hasOwnProperty; makes sure to lift property from prototype.\n      this.body = this.body;\n    }\n\n    if (this.components.Animation) {\n      this.animations = new Phaser.AnimationManager(this);\n    }\n\n    if (this.components.LoadTexture && key !== null) {\n      if (!frame && typeof key === 'string') {\n        frame = key;\n        key = fakeSpriteAtlasName;\n      }\n      this.loadTexture(key, frame);\n    }\n\n    if (this.components.FixedToCamera) {\n      this.cameraOffset = new Phaser.Point(x, y);\n    }\n  };\n};\n\nconst overridePhaserMakeParticle = function() {\n  if (!Phaser.Particles.Arcade) return;\n\n  const mp = Phaser.Particles.Arcade.Emitter.prototype.makeParticles;\n\n  Phaser.Particles.Arcade.Emitter.prototype.makeParticles = function(...args) {\n    if (typeof args[0] === 'string' && (typeof args[1] === 'string' || Array.isArray(args[1]))) {\n      args.splice(0, 1);\n      return mp.call(this, fakeEmitterAtlasName, ...args);\n    }\n    return mp.call(this, fakeEmitterAtlasName, ...args);\n  };\n};\n\n/**\n * Override spine.Atlas function\n * Adding all available atlases so, Spine can looking thorough the all resources for needed attachment assets\n */\nconst overrideSpineLibrary = function() {\n  // check if Spine using in the current project\n  let spineLibraryAdded = false;\n  try {\n    spineLibraryAdded = spine || null;\n  } catch (e) {}\n\n  if (spineLibraryAdded) {\n    // Override spine.Atlas\n    const spineAtlas = spine.Atlas;\n\n    spine.Atlas = function(json_data, textureLoader) {\n      // call spineAtlas for all added atlases and collect all results\n      let pages = [];\n      let regions = [];\n\n      // Check for exist atlases from embedded atlas jsons data\n      const embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        const embeddedKey = embeddedKeys[keyCount];\n        json_data = embedded[embeddedKey];\n\n        if (!json_data.meta && !json_data.frames) continue;\n\n        spineAtlas.call(this, json_data, textureLoader);\n\n        pages = pages.concat(this.pages);\n        regions = regions.concat(this.regions);\n      }\n\n      this.pages = pages;\n      this.regions = regions;\n    };\n\n    spine.Atlas = Object.assign(spine.Atlas, spineAtlas);\n    spine.Atlas.prototype = spineAtlas.prototype;\n  }\n};\n\n/**\n * Replace frame name key from xp-assets.json data\n * Used only for preview build\n * @param key\n * @returns {*|string}\n */\nconst replaceKey = function(key) {\n  if (xp._assetData.production) return key;\n  const assetsData = xp._assetData.images;\n  for (const category in assetsData) {\n    const imageData = assetsData[category];\n    if (key === imageData.default.replace(/.*(assets\\/)/, '')) {\n      if (!imageData.active || imageData.active === '') return key;\n      const libPrefix = imageData.active.replace(/\\/(.*)/, '');\n      key = `${libPrefix}/${category}/${imageData.active.replace(/.*([\\\\/])/, '')}`;\n    }\n  }\n  return key;\n};\n\n/**\n * Override Phaser.AnimationManager.frameName property\n * This allows to call LoadTexture method to change base sprite texture Atlas, if current atlas doesn't contain needed frameData.\n */\nconst overridePhaserFrameName = function() {\n  const animationManager = Object.create(Phaser.AnimationManager.prototype);\n\n  Object.defineProperty(animationManager, 'frameName', {\n    get() {\n      if (this.currentFrame) {\n        return this.currentFrame.name;\n      }\n      return null;\n    },\n\n    set(value) {\n      let gotFrame;\n\n      // replace frame name form xp-assets.json Needed only for preview mode\n      value = replaceKey(value);\n\n      if (typeof value === 'string' && this._frameData && (gotFrame = this._frameData.getFrameByName(value))) {\n        this.currentFrame = gotFrame;\n        this._frameIndex = this.currentFrame.index;\n        this.sprite.setFrame(this.currentFrame);\n      } else {\n        // Search for the frameName in all atlases and call LoadTexture instead of change frameName if such is present\n        const cacheKeys = this.game.cache.getKeys(Phaser.Cache.IMAGE);\n        let keyCount = cacheKeys.length;\n        while (keyCount--) {\n          const cacheKey = cacheKeys[keyCount];\n          const frameData = this.game.cache.getFrameData(cacheKey);\n          const frame = frameData.getFrameByName(value);\n          if (frameData && frame) {\n            this.sprite.loadTexture(cacheKey, value);\n            return;\n          }\n        }\n\n        this.sprite.loadTexture(value);\n        // console.warn('Cannot set frameName: ' + value);\n      }\n    }\n  });\n\n  Phaser.AnimationManager.prototype = animationManager;\n\n  const ignoreAtlasWarningNames = [fakeSpriteAtlasName, fakeTileSpriteAtlasName, fakeEmitterAtlasName]; // Skip warnings for fake atlas names\n\n  // Override Phaser.Cache.prototype.getItem to replace frame name form xp-assets.json Needed only for preview mode\n  const { getItem } = Phaser.Cache.prototype;\n\n  Phaser.Cache.prototype.getItem = function(key, cache, method, property) {\n    key = replaceKey(key);\n\n    if (ignoreAtlasWarningNames.indexOf(key) !== -1) {\n      return null;\n    }\n\n    return getItem.call(this, key, cache, method, property);\n  };\n};\n\n/**\n * Extend imageLoader with helper methods\n * imageLoader.loadAllAtlases - loading all atlases\n * imageLoader.loadSpineMultipleAtlas - load all spine animations\n */\nconst extendImageLoader = function() {\n  let webRoot = `${ad_webroot}/${ad_name}/`;\n\n  /**\n   * Check for ad_assets_path parameter\n   * For some of the partners we save texture_atlases to the different folders due to the reason that assets have different scale\n   */\n  if (typeof ad_assets_path !== 'undefined') {\n    webRoot += ad_assets_path;\n  }\n\n  /**\n   * Load all atlases that added to the embedded\n   */\n  imageLoader.loadAllAtlases = () => {\n    const embeddedKeys = Object.keys(embedded);\n    let keyCount = embeddedKeys.length;\n    while (keyCount--) {\n      const embeddedKey = embeddedKeys[keyCount];\n      const json_data = embedded[embeddedKey];\n      if (json_data.meta && json_data.frames) {\n        imageLoader.loadAtlas(embeddedKey.toString(), `${webRoot}texture_sheets/${json_data.meta.image}`);\n      }\n    }\n  };\n\n  /**\n   * Load Spine animations by animation name\n   * @param {...(string||{name: string}|{name: string, scale: number, basePath: string})} args Animation name or Object that contains name and scale\n   * name - animation name, scale - custom Spine animation scale (optional), basePath - custom assets folder name (optional)\n   */\n  imageLoader.loadSpineMultipleAtlas = (...args) => {\n    // check if Spine using in the current project\n    let spineLibraryAdded = false;\n    try {\n      spineLibraryAdded = spine || null;\n    } catch (e) {\n      console.warn(`Spine library is not defined. Please add it first before trying to load the Spine animation.`);\n    }\n\n    if (spineLibraryAdded) {\n      let argCount = args.length;\n      const basePathNames = {}; // Optional animation assets base paths that adds before animation asset path name.\n\n      // By overriding 'Spine object' creating we add another override for AtlasAttachmentLoader.newRegionAttachment method where change asset name by adding baseName before asset path.\n      // Each time when new Spine object created it overrides AtlasAttachmentLoader.newRegionAttachment method and changes the target asset name.\n      // Overrides for AtlasAttachmentLoader.newMeshAttachment and AtlasAttachmentLoader.newWeightedMeshAttachment are skipped for now, because canvas rendering don't support meshes.\n      PhaserSpine.SpinePlugin.prototype.addSpineFactory = function() {\n        Phaser.GameObjectFactory.prototype.spine = function(x, y, key, scalingVariant, group) {\n          if (group === undefined) {\n            group = this.world;\n          }\n          const spineObject = new PhaserSpine.Spine(this.game, key, scalingVariant);\n          spineObject.setToSetupPose();\n          spineObject.position.x = x;\n          spineObject.position.y = y;\n          return group.add(spineObject);\n        };\n        Phaser.GameObjectCreator.prototype.spine = function(x, y, key, scalingVariant, group) {\n          spine.AtlasAttachmentLoader.prototype.newRegionAttachment = function(skin, name, path) {\n            let targetPath = path;\n            const basePath = basePathNames[key];\n\n            if (basePath) targetPath = basePath + path;\n\n            const region = this.atlas.findRegion(targetPath);\n            if (!region) throw `Region not found in atlas: ${targetPath} (region attachment: ${name})`;\n            const attachment = new spine.RegionAttachment(name);\n            attachment.rendererObject = region;\n            attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n            attachment.regionOffsetX = region.offsetX;\n            attachment.regionOffsetY = region.offsetY;\n            attachment.regionWidth = region.width;\n            attachment.regionHeight = region.height;\n            attachment.regionOriginalWidth = region.originalWidth;\n            attachment.regionOriginalHeight = region.originalHeight;\n            return attachment;\n          };\n\n          return new PhaserSpine.Spine(this.game, key, scalingVariant);\n        };\n      };\n\n      // Check for the atlases exist\n      let firstExistAtlasName = null;\n      const embeddedKeys = Object.keys(embedded);\n      let keyCount = embeddedKeys.length;\n      while (keyCount--) {\n        const embeddedKey = embeddedKeys[keyCount];\n        const json_data = embedded[embeddedKey];\n\n        if (json_data.meta && json_data.frames) {\n          firstExistAtlasName = embeddedKey;\n          keyCount = 0;\n        }\n      }\n\n      if (!firstExistAtlasName) {\n        return console.warn('Please add at least one atlas');\n      }\n\n      while (argCount--) {\n        const arg = args[argCount];\n        switch (typeof arg) {\n          case 'string':\n            imageLoader.loadSpine(arg, firstExistAtlasName, `${webRoot}/texture_sheets/${firstExistAtlasName}.png`);\n            break;\n          case 'object':\n            if (arg.basePath) basePathNames[arg.name] = arg.basePath;\n\n            imageLoader.loadSpine(\n              arg.name,\n              firstExistAtlasName,\n              `${webRoot}/texture_sheets/${firstExistAtlasName}.png`,\n              arg.scale ? `@${arg.scale}x` : null\n            );\n            break;\n        }\n      }\n    }\n  };\n};\n\n/**\n * Override Phaser and Spine methods for support multi-atlases, extend imageLoader with loader helpers\n */\n(() => {\n  overridePhaserAnimation();\n  overrideSpineLibrary();\n  overridePhaserFrameName();\n  overridePhaserTileSprite();\n  overridePhaserMakeParticle();\n  overridePhaserSprite();\n  extendImageLoader();\n})();\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n * @version      1.0.0 - October 7th 2015\n */\n\n/**\n * @namespace Phaser\n */\n\n/**\n * An instance of a Particle Storm Plugin.\n *\n * This class is responsible for updating and managing all active emitters created by this plugin.\n *\n * Add it to your game via the Phaser Plugin Manager:\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n *\n * You only need one instance of this plugin installed. It can create multiple emitters, each\n * capable of controlling their own sets of particles.\n *\n * The plugin is not a display object itself, you cannot add it to the display list or position it.\n *\n * @class Phaser.ParticleStorm\n * @constructor\n * @param {Phaser.Game} game - A reference to the current Phaser.Game instance.\n * @param {Phaser.PluginManager} parent - The Phaser Plugin Manager which looks after this plugin.\n */\nPhaser.ParticleStorm = function(game, parent) {\n  Phaser.Plugin.call(this, game, parent);\n\n  /**\n   * An array of Emitter objects.\n   *\n   * @property {array} emitters\n   * @protected\n   */\n  this.emitters = [];\n\n  /**\n   * An object containing references or copies of all the Particle data that has been added via `addData` and `cloneData`.\n   *\n   * Clear this list by calling `clearData()`.\n   *\n   * @property {object} dataList\n   * @protected\n   */\n  this.dataList = {};\n\n  const useNew = PIXI.canUseNewCanvasBlendModes();\n\n  /**\n   * A local helper object which stores blend mode string to blend mode mappings.\n   *\n   * @property {object} blendModeMap\n   * @protected\n   */\n  this.blendModeMap = {\n    NORMAL: [0, 'source-over'],\n    ADD: [1, 'lighter'],\n    MULTIPLY: [2, useNew ? 'multiply' : 'source-over'],\n    SCREEN: [3, useNew ? 'screen' : 'source-over'],\n    OVERLAY: [4, useNew ? 'overlay' : 'source-over'],\n    DARKEN: [5, useNew ? 'darken' : 'source-over'],\n    LIGHTEN: [6, useNew ? 'lighten' : 'source-over'],\n    COLOR_DODGE: [7, useNew ? 'color-dodge' : 'source-over'],\n    COLOR_BURN: [8, useNew ? 'color-burn' : 'source-over'],\n    HARD_LIGHT: [9, useNew ? 'hard-light' : 'source-over'],\n    SOFT_LIGHT: [10, useNew ? 'soft-light' : 'source-over'],\n    DIFFERENCE: [11, useNew ? 'difference' : 'source-over'],\n    EXCLUSION: [12, useNew ? 'exclusion' : 'source-over'],\n    HUE: [13, useNew ? 'hue' : 'source-over'],\n    SATURATION: [14, useNew ? 'saturation' : 'source-over'],\n    COLOR: [15, useNew ? 'color' : 'source-over'],\n    LUMINOSITY: [16, useNew ? 'luminosity' : 'source-over']\n  };\n\n  /**\n   * A local helper object which stores HSV color modes for emitter renderers to use.\n   *\n   * @property {array} hsv\n   * @protected\n   */\n  this.hsv = Phaser.Color.HSVColorWheel();\n};\n\nPhaser.ParticleStorm.prototype = Object.create(Phaser.Plugin.prototype);\nPhaser.ParticleStorm.prototype.constructor = Phaser.ParticleStorm;\n\n/**\n * A constant used for the Sprite Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.SPRITE = 'sprite';\n\n/**\n * A constant used for the BitmapData based Pixel Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.PIXEL = 'pixel';\n\n/**\n * A constant used for the Render Texture based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.RENDERTEXTURE = 'render texture';\n\n/**\n * A constant used for the Sprite Batch based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.SPRITE_BATCH = 'sprite batch';\n\n/**\n * A constant used for the Bitmap Data based Renderer.\n * @constant\n * @type {string}\n */\nPhaser.ParticleStorm.BITMAP_DATA = 'bitmap data';\n\n/**\n * A constant that contains the base object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE = { value: 0, initial: 0, delta: 0, offset: 0, control: null, calc: 0 };\n\n/**\n * A constant that contains the base 1 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_1 = { value: 1, initial: 0, delta: 0, offset: 0, control: null, calc: 1 };\n\n/**\n * A constant that contains the base 255 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_255 = { value: 0, initial: 0, delta: 0, offset: 0, min: 0, max: 255, control: null, calc: 0 };\n\n/**\n * A constant that contains the base 359 object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_359 = { value: 0, initial: 0, delta: 0, offset: 0, min: 0, max: 359, control: null, calc: 0 };\n\n/**\n * A constant that contains the null base object properties.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_NULL = { value: null, initial: 0, delta: 0, offset: 0, control: null, calc: 0 };\n\n/**\n * A constant that contains the base object used by the emit property.\n * @constant\n * @type {object}\n */\nPhaser.ParticleStorm.BASE_EMIT = {\n  name: null,\n  value: 0,\n  initial: 0,\n  control: null,\n  at: null,\n  inherit: true,\n  offsetX: 0,\n  offsetY: 0\n};\n\nPhaser.ParticleStorm.Controls = {};\n\nPhaser.ParticleStorm.Zones = {};\n\n/**\n * Creates a new Particle Emitter. You can specify the type of renderer the emitter will use. By default it uses\n * the Sprite emitter, meaning each particle it creates is its own sprite object.\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n * `this.emitter = this.manager.createEmitter();`\n *\n * The emitter is added to the ParticleStorm.emitters array and is updated every frame.\n *\n * @method Phaser.ParticleStorm#createEmitter\n * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n * @return {Phaser.ParticleStorm.Emitter} The Emitter object.\n */\nPhaser.ParticleStorm.prototype.createEmitter = function(renderType, force, scrollSpeed) {\n  const emitter = new Phaser.ParticleStorm.Emitter(this, renderType, force, scrollSpeed);\n\n  this.emitters.push(emitter);\n\n  return emitter;\n};\n\n/**\n * Removes the given Particle Emitter from the plugin. Stops it from being updated.\n *\n * Note that this does not destroy the emitter, or any objects it may in turn have created.\n *\n * @method Phaser.ParticleStorm#removeEmitter\n * @param {Phaser.ParticleStorm.Emitter} emitter - The Emitter object you wish to remove.\n */\nPhaser.ParticleStorm.prototype.removeEmitter = function(emitter) {\n  for (let i = 0; i < this.emitters.length; i++) {\n    if (this.emitters[i] === emitter) {\n      this.emitters.splice(i, 1);\n      return;\n    }\n  }\n};\n\n/**\n * Particle Storm works by taking a specially formatted JavaScript object that contains all of the settings the\n * emitter needs to emit a particle. The settings objects each have a unique string-based key and are stored\n * within the plugin itself, making them available for any Emitter to access.\n *\n * You can either pass in a JavaScript object to this method, or a string. If you pass a string it will use that\n * to look in the Phaser.Cache for a matching JSON object and use that instead, allowing you to externally load\n * particle data rather than create it all at run-time. If you are loading JSON data from the cache then you can\n * also provide an array of strings, and it will load each of them in turn. Note that when doing this the `obj`\n * argument is ignored.\n *\n * @method Phaser.ParticleStorm#addData\n * @param {string|array} key - The unique key for this set of particle data. If no `obj` argument is provided it will use\n *     Phaser.Cache.getJSON to try and get a matching entry. Can be either a string or an Array of strings.\n *     When using an array of strings the `obj` argument is ignored.\n * @param {object} [obj] - The particle data. This is optional and if not provided the `key` argument will be used to look\n *     for the data in the Phaser.Cache. If provided it will be used instead of looking in the Cache.\n *     This should be a well formed object matching the ParticleStorm object structure.\n *     A reference to the object is stored internally, so if you manipulate the original object all freshly emitted particles\n *     will use the new values. To avoid this you can use `ParticleStorm.cloneData` instead.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.addData = function(key, obj) {\n  if (key === undefined) {\n    return this;\n  }\n\n  if (Array.isArray(key)) {\n    for (let i = 0; i < key.length; i++) {\n      this.dataList[key[i]] = this.game.cache.getJSON(key[i]);\n    }\n  } else if (obj !== undefined) {\n    this.dataList[key] = obj;\n  } else {\n    this.dataList[key] = this.game.cache.getJSON(key);\n  }\n\n  return this;\n};\n\n/**\n * Gets the particle data based on the given key.\n *\n * @method Phaser.ParticleStorm#getData\n * @memberOf Phaser.ParticleStorm\n * @param {string} [key] - The unique key of the particle data that was added.\n * @return {object} The particle data.\n */\nPhaser.ParticleStorm.prototype.getData = function(key) {\n  return this.dataList[key];\n};\n\n/**\n * Clears particle data sets from memory.\n *\n * You can provide a specific key, or array of keys to remove.\n *\n * If no key is provided it will remove all data sets currently held.\n *\n * @method Phaser.ParticleStorm#clearData\n * @memberOf Phaser.ParticleStorm\n * @param {string|array} [key] - A string or array of strings that map to the data to be removed. If not provided all data sets are removed.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.clearData = function(key) {\n  if (key === undefined) {\n    //  Nuke them all\n    this.dataList = {};\n  } else if (Array.isArray(key)) {\n    for (let i = 0; i < key.length; i++) {\n      delete this.dataList[key[i]];\n    }\n  } else {\n    delete this.dataList[key];\n  }\n\n  return this;\n};\n\n/**\n * This method works in exactly the same way as ParticleStorm.addData, with the exception that clones of\n * the particle data objects are stored internally, instead of references to the original objects.\n *\n * @method Phaser.ParticleStorm#cloneData\n * @memberOf Phaser.ParticleStorm\n * @param {string|array} key - The unique key for this set of particle data. If no `obj` argument is provided it will use\n *     Phaser.Cache.getJSON to try and get a matching entry. Can be either a string or an Array of strings.\n *     When using an array of strings the `obj` argument is ignored.\n * @param {object} [obj] - The particle data. This is optional and if not provided the `key` argument will be used to look\n *     for the data in the Phaser.Cache. If provided it will be used instead of looking in the Cache.\n *     This should be a well formed object matching the ParticleStorm object structure.\n *     The settings object, whether from the Cache or given as an argument, is cloned before being stored locally.\n *     If you wish to add a reference to an object instead of cloning it then see `addData`.\n * @return {Phaser.ParticleStorm} This ParticleManager.\n */\nPhaser.ParticleStorm.prototype.cloneData = function(key, obj) {\n  if (key === undefined) {\n    return this;\n  }\n\n  if (Array.isArray(key)) {\n    for (let i = 0; i < key.length; i++) {\n      this.dataList[key[i]] = Phaser.Utils.extend(true, this.game.cache.getJSON(key[i]));\n    }\n  } else if (obj !== undefined) {\n    this.dataList[key] = Phaser.Utils.extend(true, obj);\n  } else {\n    this.dataList[key] = Phaser.Utils.extend(true, this.game.cache.getJSON(key));\n  }\n\n  return this;\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Point Zone. This is a zone consisting of a single coordinate from which particles\n * are emitted.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createPointZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [x=0] - The x coordinate of the zone.\n * @param {number} [y=0] - The y coordinate of the zone.\n * @return {Phaser.ParticleStorm.Zones.Point} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createPointZone = function(x, y) {\n  return new Phaser.ParticleStorm.Zones.Point(this.game, x, y);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Line Zone. This is a zone consisting of two sets of points, the start\n * and end of the line respectively. Particles can be emitted from anywhere on this line segment.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createLineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [x1=0] - The x coordinate of the start of the line.\n * @param {number} [y1=0] - The y coordinate of the start of the line.\n * @param {number} [x2=0] - The x coordinate of the end of the line.\n * @param {number} [y2=0] - The y coordinate of the end of the line.\n * @return {Phaser.ParticleStorm.Zones.Line} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createLineZone = function(x1, y1, x2, y2) {\n  return new Phaser.ParticleStorm.Zones.Line(this.game, x1, y1, x2, y2);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Rectangle Zone. This is a zone consisting of a rectangle shape.\n * Particles can be emitted from anywhere within this rectangle.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createRectangleZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [width=0] - The width of the Rectangle. Should always be a positive value.\n * @param {number} [height=0] - The height of the Rectangle. Should always be a positive value.\n * @return {Phaser.ParticleStorm.Zones.Rectangle} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createRectangleZone = function(width, height) {\n  return new Phaser.ParticleStorm.Zones.Rectangle(this.game, width, height);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Circle Zone. This is a zone consisting of a circle shape.\n * Particles can be emitted from anywhere within this circle.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createCircleZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [radius=0] - The radius of the circle.\n * @return {Phaser.ParticleStorm.Zones.Circle} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createCircleZone = function(radius) {\n  return new Phaser.ParticleStorm.Zones.Circle(this.game, radius);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Ellipse Zone. This is a zone consisting of an ellipse shape.\n * Particles can be emitted from anywhere within this ellipse.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createEllipseZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [width=0] - The overall width of this ellipse.\n * @param {number} [height=0] - The overall height of this ellipse.\n * @return {Phaser.ParticleStorm.Zones.Ellipse} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createEllipseZone = function(width, height) {\n  return new Phaser.ParticleStorm.Zones.Ellipse(this.game, width, height);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Linear Spline Zone. A Linear Spline consists of a set of points through\n * which a linear path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createLinearSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createLinearSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 0, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Bezier Spline Zone. A Bezier Spline consists of a set of points through\n * which a bezier curved path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createBezierSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createBezierSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 1, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Catmull Rom Spline Zone. A Catmull Spline consists of a set of points through\n * which a catmull curved path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createCatmullSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createCatmullSplineZone = function(resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, 2, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Spline Zone. A spline consists of a set of points through\n * which a path is constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createSplineZone\n * @memberOf Phaser.ParticleStorm\n * @param {integer} [mode=0] - The type of spline to create. 0 = linear, 1 = bezier and 2 = catmull.\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createSplineZone = function(mode, resolution, closed, points) {\n  return new Phaser.ParticleStorm.Zones.Spline(this.game, mode, resolution, closed, points);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates a Text Zone. This is a zone consisting of a Phaser.Text object.\n * Particles can be emitted from anywhere within the Text object.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createTextZone\n * @memberOf Phaser.ParticleStorm\n * @param {Phaser.Text} text - The Text object that is used to create this zone.\n * @return {Phaser.ParticleStorm.Zones.Text} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createTextZone = function(text) {\n  return new Phaser.ParticleStorm.Zones.Text(this.game, text);\n};\n\n/**\n * Zones allow you to define an area within which particles can be emitted.\n *\n * This method creates an Image Zone. This is a zone consisting of an image which certain types of\n * Emitter renderer can read from in order to extract pixel data, which can then be used to tint\n * or otherwise modify the properties of the particles if emits.\n *\n * All zones extend Phaser.ParticleStorm.Zones.Base, which you can use to create your own custom\n * zones if required.\n *\n * @method Phaser.ParticleStorm#createImageZone\n * @memberOf Phaser.ParticleStorm\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n * @return {Phaser.ParticleStorm.Zones.Image} The zone that was created.\n */\nPhaser.ParticleStorm.prototype.createImageZone = function(key) {\n  return new Phaser.ParticleStorm.Zones.Image(this.game, key);\n};\n\n/**\n * Update all emitters in this plugin. Only emitters that have `enabled` set will be updated.\n *\n * You can tell an emitter to never be updated by the plugin by setting its `manualUpdate` property\n * to `true`. This allows you to update it as you see fit, rather than have the plugin do it\n * automatically.\n *\n * Set ParticleStorm.active to `false` to stop the plugin from updating _all_ emitters.\n *\n * @method Phaser.ParticleStorm#update\n * @memberOf Phaser.ParticleStorm\n * @protected\n */\nPhaser.ParticleStorm.prototype.update = function() {\n  if (!this.active) {\n    return;\n  }\n\n  for (let i = 0; i < this.emitters.length; i++) {\n    if (this.emitters[i].enabled && !this.emitters[i].manualUpdate) {\n      this.emitters[i].update();\n    }\n  }\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An instance of a Particle Storm Emitter.\n *\n * This class is responsible for updating and managing all active particles created by this emitter.\n *\n * Add it to your game via the plugin:\n *\n * `this.manager = this.game.plugins.add(Phaser.ParticleStorm);`\n * `this.emitter = this.manager.createEmitter();`\n *\n * You can have multiple emitters running, each controlling their own set of particles.\n *\n * Emitters are not display objects and you cannot add it to the display list or position it.\n * The renderer created by this emitter is the entity that lives on the display list.\n *\n * @class Phaser.ParticleStorm.Emitter\n * @constructor\n * @param {Phaser.ParticleStorm} parent - The ParticleStorm Plugin.\n * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n */\nPhaser.ParticleStorm.Emitter = function(parent, renderType, force, scrollSpeed) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = parent.game;\n\n  /**\n   * @property {Phaser.ParticleStorm} parent - The Particle Storm plugin.\n   */\n  this.parent = parent;\n\n  /**\n   * The Particle Renderer this emitter is using.\n   * @property {Phaser.ParticleStorm.Renderer.Base} renderer\n   * @default\n   */\n  this.renderer = null;\n\n  /**\n   * The type of renderer this emitter is using.\n   * @property {string} renderType\n   */\n  this.renderType = null;\n\n  /**\n   * A set of useful common static functions.\n   * @property {Phaser.ParticleStorm.Graph} graph\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The enabled state of this emitter. If set to `false` it won't emit any new particles or update\n   * alive particles. You can toggle this directly or via Emitter.paused.\n   * @property {boolean} enabled\n   */\n  this.enabled = false;\n\n  /**\n   * Is this emitter updated automatically by the Particle Storm plugin, or should it be\n   * updated manually via the game code?\n   *\n   * If `false` (the default) the plugin will update this emitter automatically for you.\n   * If `true` then you need to call the `update` method directly from your game code.\n   *\n   * @property {boolean} manualUpdate\n   * @default\n   */\n  this.manualUpdate = false;\n\n  /**\n   * The scrolling speed of the particles in pixels per frame.\n   * The amount specified in this Point object is added to the particles position each frame\n   * after their internal velocities and calculations have taken place.\n   *\n   * @property {Phaser.Point} scrollSpeed\n   */\n  this.scrollSpeed = new Phaser.Point();\n\n  /**\n   * Amount of force to be applied to all particles every update.\n   * This is in addition to any particle velocities or forces defined in the particle data.\n   * This object can be manipulated in real-time to provide for effects such as varying wind\n   * or gravity.\n   *\n   * @property {Phaser.Point} force\n   */\n  this.force = new Phaser.Point();\n\n  /**\n   * This signal is dispatched each time a particle is emitted by this emitter.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onEmit = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was emitted.\n   *\n   * This signal is dispatched BEFORE the first time the particle is rendered, so\n   * you can adjust positions, colors, textures and other properties the callback.\n   *\n   * @property {Phaser.Signal} onEmit\n   * @default\n   */\n  this.onEmit = null;\n\n  /**\n   * This signal is dispatched each time a particle enters a 'complete' state.\n   * A particle can only do this if it has a fixed lifespan (i.e. a lifespan value\n   * greater than 0) and has its `keepAlive` property set to `true`. This enables\n   * you to emit particles with timespan based events that when they complete are\n   * not immediately killed ready for re-use, but instead enter an 'idle' completed\n   * state.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onComplete = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was killed.\n   *\n   * @property {Phaser.Signal} onComplete\n   * @default\n   */\n  this.onComplete = null;\n\n  /**\n   * This signal is dispatched each time a particle is killed.\n   *\n   * By default this signal is set to `null`. This is because it can generate\n   * extremely high numbers of callbacks in busy particle systems. To enable it\n   * add: `emitter.onKill = new Phaser.Signal()` to your code.\n   *\n   * It is sent two parameters: a reference to this emitter and a reference to the\n   * particle that was killed.\n   *\n   * @property {Phaser.Signal} onKill\n   * @default\n   */\n  this.onKill = null;\n\n  /**\n   * The class type of the Particle that is emitted.\n   *\n   * You can change this to your own custom object, as long as it extends ParticleStorm.Particle.\n   *\n   * If you change it in an emitter that has already emitted some particles then you will create\n   * a mixed data-type emitter. You are recommended to clear this emitter first before changing\n   * the particleClass.\n   *\n   * @property {object} particleClass\n   * @default Phaser.ParticleStorm.Particle\n   */\n  this.particleClass = Phaser.ParticleStorm.Particle;\n\n  /**\n   * The Timer used by this emitter for repeated and looped emissions.\n   *\n   * @property {Phaser.Timer} timer\n   */\n  this.timer = this.game.time.create(false);\n\n  /**\n   * The Phaser.TimerEvent object that was created by the last call to emit that had a repeat value set.\n   * If you set-up multiple repeated emits then this property will be overwritten each time, so it's up\n   * to you to store your own reference locally before creating another repeated emitter.\n   *\n   * @property {Phaser.TimerEvent} timerEvent\n   * @default\n   */\n  this.timerEvent = null;\n\n  /**\n   * Contains all active particles being managed by this emitter.\n   * When a particle is killed it is moved to the `pool` array.\n   *\n   * @property {array} list\n   * @protected\n   */\n  this.list = [];\n\n  /**\n   * A pool of particle objects waiting to be used. When a particle is activated it moves from the\n   * pool to the `list` array. It moves back to the pool when killed.\n   *\n   * @property {array} pool\n   * @protected\n   */\n  this.pool = [];\n\n  /**\n   * Contains references to all particles that were emitted in the last call to Emitter.emit.\n   * The contents of this array are reset every single time `Emitter.emit` is called, so if\n   * you need to retain references to the particles that were just emitted you should make\n   * a shallow copy of this array in your own game code.\n   *\n   * @property {array} batch\n   * @protected\n   */\n  this.batch = [];\n\n  /**\n   * An array containing all active GravityWells belonging to this emitter.\n   *\n   * @property {array} wells\n   * @protected\n   */\n  this.wells = [];\n\n  /**\n   * Internal Point object used by the emit methods.\n   * @property {Phaser.Point} _rnd\n   * @private\n   */\n  this._rnd = new Phaser.Point();\n\n  /**\n   * Internal Point object used by the emit methods for particle spacing.\n   * @property {Phaser.Point} _step\n   * @private\n   */\n  this._step = new Phaser.Point();\n\n  /**\n   * Internal counter for the number of parent particles emitted this batch.\n   * @property {integer} _pCount\n   * @private\n   */\n  this._pCount = 0;\n\n  /**\n   * Internal var holding the delay properties for this batch.\n   * @property {object} _delay\n   * @private\n   */\n  this._delay = { enabled: false, start: 0, inc: 0, visible: false };\n\n  this.init(renderType, force, scrollSpeed);\n};\n\nPhaser.ParticleStorm.Emitter.prototype = {\n  /**\n   * Establishes the renderer and clears the particle list and pool ready for use.\n   *\n   * This is called automatically by the Phaser PluginManager.\n   *\n   * @method Phaser.ParticleStorm.Emitter#init\n   * @protected\n   * @param {Phaser.ParticleStorm.SPRITE|Phaser.ParticleStorm.PIXEL|Phaser.ParticleStorm.RENDERTEXTURE|Phaser.ParticleStorm.SPRITE_BATCH} [renderType=Phaser.ParticleStorm.SPRITE] - The Particle Renderer type constant.\n   * @param {Phaser.Point} [force] - Amount of force to be applied to all particles every update.\n   * @param {Phaser.Point} [scrollSpeed] - All particles can be scrolled. This offsets their positions by the amount in this Point each update.\n   *     This is different to force which is applied as a velocity on the particle, where-as scrollSpeed directly adjusts their final position.\n   */\n  init(renderType, force, scrollSpeed) {\n    if (renderType === undefined) {\n      renderType = Phaser.ParticleStorm.SPRITE;\n    }\n\n    const w = this.game.width;\n    const h = this.game.height;\n\n    switch (renderType) {\n      case Phaser.ParticleStorm.SPRITE:\n        this.renderer = new Phaser.ParticleStorm.Renderer.Sprite(this);\n        break;\n\n      case Phaser.ParticleStorm.PIXEL:\n        this.renderer = new Phaser.ParticleStorm.Renderer.Pixel(this, w, h);\n        break;\n\n      case Phaser.ParticleStorm.RENDERTEXTURE:\n        this.renderer = new Phaser.ParticleStorm.Renderer.RenderTexture(this, w, h);\n        break;\n\n      case Phaser.ParticleStorm.SPRITE_BATCH:\n        this.renderer = new Phaser.ParticleStorm.Renderer.SpriteBatch(this);\n        break;\n\n      case Phaser.ParticleStorm.BITMAP_DATA:\n        this.renderer = new Phaser.ParticleStorm.Renderer.BitmapData(this, w, h);\n        break;\n\n      default:\n        console.warn('ParticleManager.init - Invalid renderType given');\n        return false;\n    }\n\n    this.renderType = renderType;\n\n    if (force) {\n      this.force.set(force.x, force.y);\n    }\n\n    if (scrollSpeed) {\n      this.scrollSpeed.set(scrollSpeed.x, scrollSpeed.y);\n    }\n\n    this.list = [];\n    this.pool = [];\n    this.wells = [];\n\n    this.enabled = true;\n  },\n\n  /**\n   * Adds the Particle Renderer to the game world.\n   *\n   * You can optionally specify a Phaser.Group for the renderer to be added to.\n   * If not provided it will be added to the World group.\n   *\n   * @method Phaser.ParticleStorm.Emitter#addToWorld\n   * @param {Phaser.Group} [group] - The group to add the renderer to. If not specified it will be added to the World.\n   * @return {Phaser.Image|Phaser.Sprite|Phaser.Group} The display object that contains the particle renderer.\n   */\n  addToWorld(group) {\n    if (group === undefined) {\n      group = this.game.world;\n    }\n\n    return this.renderer.addToWorld(group);\n  },\n\n  /**\n   * Adds a Gravity Well to this Particle Manager. A Gravity Well creates a force on the\n   * particles to draw them towards a single point.The force applied is inversely proportional\n   * to the square of the distance from the particle to the point, in accordance with Newton's\n   * law of gravity.\n   *\n   * A Gravity Well only effects particles owned by the emitter that created it.\n   *\n   * Gravity Wells don't have any display properties, i.e. they are not Sprites.\n   *\n   * @method Phaser.ParticleStorm.Emitter#createGravityWell\n   * @param {number} [x=0] - The x coordinate of the Gravity Well, the point towards which particles are drawn.\n   * @param {number} [y=0] - The y coordinate of the Gravity Well, the point towards which particles are drawn.\n   * @param {number} [power=0] - The strength of the gravity well. Larger numbers create stronger forces. Start with low values like 1.\n   * @param {number} [epsilon=100] - The minimum distance for which gravity is calculated.\n   *                               Particles closer than this distance experience a gravity force as if\n   *                               they were this distance away. This stops the gravity effect blowing\n   *                               up as distances get small. For realistic gravity effects you will want\n   *                               a small epsilon (~1), but for stable visual effects a larger\n   *                               epsilon (~100) is often better.\n   * @param {number} [gravity=50] - The gravity constant.\n   * @return {Phaser.ParticleStorm.GravityWell} The GravityWell object.\n   */\n  createGravityWell(x, y, power, epsilon, gravity) {\n    const well = new Phaser.ParticleStorm.GravityWell(this, x, y, power, epsilon, gravity);\n\n    this.wells.push(well);\n\n    return well;\n  },\n\n  /**\n   * Seeds this emitter with `qty` number of Particle objects, and places them in the pool ready for use.\n   * This allows you to pre-seed the pool and avoid object creation in hot parts of your game code.\n   *\n   * @method Phaser.ParticleStorm.Emitter#seed\n   * @param {integer} qty - The amount of Particle objects to create in the pool.\n   * @return {Phaser.ParticleStorm.Emitter} This Emitter.\n   */\n  seed(qty) {\n    for (let i = 0; i < qty; i++) {\n      const particle = new Phaser.ParticleStorm.Particle(this);\n\n      this.pool.push(particle);\n    }\n\n    return this;\n  },\n\n  /**\n   * Tells the Emitter to emit one or more particles, with a delay before it starts.\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * The `config` argument is an object that contains additional emission settings.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emitDelayed\n   * @param {number} delay - The delay (in ms) before this emit will be run. It's added to an internal timed queue.\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {object} [config] - An emitter configuration object. See `Emitter.emit` for the full object property docs.\n   * @return {Phaser.TimerEvent} The TimerEvent object created for this delayed emit.\n   */\n  emitDelayed(delay, key, x, y, config) {\n    if (!this.enabled || !this.parent.dataList[key] || delay <= 0) {\n      return null;\n    }\n\n    this.timerEvent = this.timer.add(delay, this.emit, this, key, x, y, config);\n\n    this.timer.start();\n\n    return this.timerEvent;\n  },\n\n  /**\n   * Tells the Emitter to emit one or more particles.\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * The `config` argument is an object that contains additional emission settings.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emit\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {object} [config] - An emitter configuration object.\n   * @param {number} [config.total] - The number of particles to emit (-1 means 'all' when the zone distribution is 'full')\n   * @param {number} [config.repeat] - How many times this emit should repeat. A value of -1 means 'forever'.\n   * @param {number} [config.frequency] - If `repeat` is -1 or > 0 this controls the ms that will elapse between each repeat.\n   * @param {number} [config.xStep=0] - The amount of horizontal spacing in pixels to add between each particle emitted in this call. This is in addition to the `x` argument.\n   * @param {number} [config.yStep=0] - The amount of vertical spacing in pixels to add between each particle emitted in this call. This is in addition to the `y` argument.\n   * @param {number|object} [config.delay] - If a number it sets the delay of the first particle to `delay` ms. This is in addition to any delay set in the particle data.\n   * @param {number} [config.delay.start=0] - A starting delay value in ms before any particle in this emit call is activated.\n   * @param {number} [config.delay.step=0] - If this emit call will emit multiple particles the step controls how many ms to add between each ones delay.\n   * @param {boolean} [config.delay.visible=false] - Should particles render and be visible, even when delayed?\n   * @param {Phaser.ParticleStorm.Zones.Base} [config.zone] - The zone to emit the particles from.\n   * @param {number} [config.percent] - If a spline based zone this value tells the emitter how far along the spline to emit the particles from. Between 0 and 100.\n   * @param {boolean} [config.random] - If a zone is set this will emit the particles from random locations within the zone.\n   * @param {boolean} [config.full] - If a zone is set this will emit the particles from all locations in the zone (only applies to specific types of zone like Images)\n   * @param {boolean} [config.setAlpha] - If the zone supports it will the particle alpha be set?\n   * @param {boolean} [config.setColor] - If the zone supports it will the particle color be set?\n   * @param {integer} [config.step] - Controls the iteration through the pixel data. Only for 'full' zone emissions.\n   * @param {integer|array} [config.spacing] - The pixel spacing between each emitted particle.\n   * @param {object} [config.radiate] - Emits the particle in a radial arc.\n   * @param {number} [config.radiate.velocity] - The speed to emit the particle when radiating.\n   * @param {number} [config.radiate.from] - The starting angle to radiate from.\n   * @param {number} [config.radiate.to] - The angle to radiate to.\n   * @param {object} [config.radiateFrom] - Emits the particle radiating away from a given point.\n   * @param {number} [config.radiateFrom.x] - The x coordinate of the point to radiate away from.\n   * @param {number} [config.radiateFrom.y] - The y coordinate of the point to radiate away from.\n   * @param {number} [config.radiateFrom.velocity] - The speed to emit the particle when radiating.\n   * @return {Phaser.ParticleStorm.Particle|array} The particle or an array of particles that were emitted,\n   *     or null if no particle could be created.\n   */\n  emit(key, x, y, config) {\n    if (!this.enabled || !this.parent.dataList[key]) {\n      return null;\n    }\n\n    this.batch = [];\n\n    this._pCount = 0;\n\n    this._step.x = 0;\n    this._step.y = 0;\n\n    if (x === undefined) {\n      x = 0;\n    }\n    if (y === undefined) {\n      y = 0;\n    }\n\n    //  ------------------------------------------------\n    //  Fast-exit: No config object\n    //  ------------------------------------------------\n\n    if (!config) {\n      return this.emitParticle(key, x, y, null);\n    }\n\n    //  ------------------------------------------------\n    //  The number of particles to emit\n    //  ------------------------------------------------\n\n    const total = config.hasOwnProperty('total') ? config.total : 1;\n\n    //  ------------------------------------------------\n    //  Batch position spacing\n    //  ------------------------------------------------\n\n    if (config.xStep > 0) {\n      this._step.x = config.xStep;\n    } else {\n      this._step.x = 0;\n    }\n\n    if (config.yStep > 0) {\n      this._step.y = config.yStep;\n    } else {\n      this._step.y = 0;\n    }\n\n    //  ------------------------------------------------\n    //  The particle delays per emit\n    //  ------------------------------------------------\n\n    this._delay.enabled = false;\n\n    if (config.delay) {\n      this._delay.enabled = true;\n\n      if (typeof config.delay === 'number') {\n        this._delay.start = config.delay;\n        this._delay.step = 0;\n        this._delay.visible = false;\n      } else {\n        this._delay.start = config.delay.start ? config.delay.start : 0;\n        this._delay.step = config.delay.step ? config.delay.step : 0;\n        this._delay.visible = !!config.delay.visible;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Zone\n    //  ------------------------------------------------\n    if (config.zone) {\n      if ((config.random === undefined && config.full === undefined && config.percent === undefined) || config.random) {\n        //  Neither 'random' or 'full' are set, so we default to 'random'\n        config.zone.emit(this, key, x, y, total, config.setAlpha, config.setColor);\n      } else if (config.percent === undefined && (config.full !== undefined || !config.random)) {\n        //  'full' is set, or 'random' is specifically set to false\n        config.zone.emitFull(this, key, x, y, config.step, config.spacing, config.setAlpha, config.setColor);\n      } else if (config.percent !== undefined) {\n        //  'percent' is set for a Spline zone\n        let pnt = 0;\n\n        if (typeof config.percent === 'number') {\n          pnt = config.percent;\n        } else {\n          //  min/max?\n          if (config.percent.hasOwnProperty('min')) {\n            pnt = this.game.rnd.between(config.percent.min, config.percent.max);\n          } else if (config.percent.callback) {\n            pnt = config.percent.callback.call(config.percent.context, this);\n          }\n        }\n\n        config.zone.emitPercent(this, key, x, y, total, pnt);\n      }\n    } else {\n      //  ------------------------------------------------\n      //  No zone\n      //  ------------------------------------------------\n      for (let i = 0; i < total; i++) {\n        this.emitParticle(key, x, y, null);\n      }\n    }\n\n    if (config.radiate) {\n      //  ------------------------------------------------\n      //  Radiate\n      //  ------------------------------------------------\n      for (var c = 0; c < this.batch.length; c++) {\n        this.batch[c].radiate(config.radiate.velocity, config.radiate.from, config.radiate.to);\n      }\n    } else if (config.radiateFrom) {\n      //  ------------------------------------------------\n      //  RadiateFrom\n      //  ------------------------------------------------\n      for (var c = 0; c < this.batch.length; c++) {\n        this.batch[c].radiateFrom(config.radiateFrom.x, config.radiateFrom.y, config.radiateFrom.velocity);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Repeat\n    //  ------------------------------------------------\n    const repeat = config.hasOwnProperty('repeat') ? config.repeat : 0;\n\n    if (repeat !== 0) {\n      const frequency = config.hasOwnProperty('frequency') ? config.frequency : 250;\n\n      //  Or the repeats will stack-up\n      delete config.repeat;\n\n      if (repeat === -1) {\n        this.timerEvent = this.timer.loop(frequency, this.emit, this, key, x, y, config);\n      } else if (repeat > 0) {\n        this.timerEvent = this.timer.repeat(frequency, repeat, this.emit, this, key, x, y, config);\n      }\n\n      this.timer.start();\n    }\n\n    //  Reset the pCounter\n    this._pCount = 0;\n\n    return this.batch;\n  },\n\n  /**\n   * Tells the Emitter to emit one single particle.\n   *\n   * **This method shouldn't usually be called directly. See `Emitter.emit`.**\n   *\n   * The key refers to the ParticleData already set-up within Particle Storm via `ParticleStorm.addDdata`.\n   *\n   * You must have added or created the data referenced by key before you can call `emit`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#emitParticle\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} [x=0] - The x location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {number|array} [y=0] - The y location of the particle. Either a discrete value or an array consisting of 2 elements, the min and max, it will pick a point at random between them.\n   * @param {Phaser.ParticleStorm.Particle} [parent=null] - The parent of this particle, if any.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted.\n   */\n  emitParticle(key, x, y, parent) {\n    let particle = this.pool.pop();\n\n    if (!particle) {\n      particle = new this.particleClass(this);\n    }\n\n    particle.parent = parent;\n\n    //  ------------------------------------------------\n    //  If the coordinates are arrays it uses them as min/max pairs\n    //  ------------------------------------------------\n    if (Array.isArray(x)) {\n      x = this.game.rnd.between(x[0], x[1]);\n    }\n\n    if (Array.isArray(y)) {\n      y = this.game.rnd.between(y[0], y[1]);\n    }\n\n    //  ------------------------------------------------\n    //  If the coordinates are sequential based on previous particle\n    //  ------------------------------------------------\n\n    x += this._step.x * this._pCount;\n    y += this._step.y * this._pCount;\n\n    particle.reset(this.renderer, x, y, this.parent.dataList[key]);\n\n    if (particle.alive) {\n      //  Apply delay (in addition to any set in the particle data)\n\n      if (!parent && this._delay.enabled) {\n        particle.delay += this._delay.start + this._pCount * this._delay.step;\n        particle.delayVisible = this._delay.visible;\n      }\n\n      this.list.push(particle);\n\n      this.batch.push(particle);\n\n      if (!parent) {\n        this._pCount++;\n      }\n    } else {\n      particle.kill();\n\n      if (this.onKill) {\n        this.onKill.dispatch(this, particle);\n      }\n\n      this.pool.push(particle);\n    }\n\n    return particle;\n  },\n\n  /**\n   * Update all particles in this emitter.\n   *\n   * This method is called by the Particle Storm plugin automatically unless\n   * `manualUpdate` has been set to `true`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#update\n   * @return {number} The number of active particles in this manager.\n   */\n  update() {\n    const { elapsed } = this.game.time;\n\n    this.renderer.preUpdate();\n\n    //  Update all the particles and destroy those that request it\n    for (let i = this.list.length - 1; i >= 0; i--) {\n      const p = this.list[i];\n\n      if (!p.ignoreScrollSpeed) {\n        p.transform.x += this.scrollSpeed.x;\n        p.transform.y += this.scrollSpeed.y;\n      }\n\n      for (let w = 0; w < this.wells.length; w++) {\n        if (this.wells[w].active) {\n          this.wells[w].step(p);\n        }\n      }\n\n      if (!p.step(elapsed, this.force)) {\n        p.kill();\n        this.pool.push(p);\n        this.list.splice(i, 1);\n      }\n    }\n\n    this.renderer.postUpdate();\n\n    return this.list.length;\n  },\n\n  /**\n   * This is an internal method that takes a emission data object, time value and\n   * life percentage and calculates the new number of child particles that should be emitted.\n   *\n   * @method Phaser.ParticleStorm.Emitter#updateFrequency\n   * @protected\n   * @param {object} emit - The emission data object describing what and when to emit.\n   * @param {number} elapsedTime - How long has it been since the last time this was updated (in milliseconds)\n   * @param {number} lastPercent - The lifePercent last time this was updated.\n   * @param {number} lifePercent - How far through its life is this particle (from 0 to 1)\n   * @return {number} The number of children for this particle to emit.\n   */\n  updateFrequency(emit, elapsedTime, lastPercent, lifePercent) {\n    //  If the emit frequency is specified as a list of time intervals\n    //  and number of children then ...\n    if (emit.at) {\n      //  Total is the number to be created for all time intervals\n      //  between lastPercent and lifePercent\n      let total = 0;\n\n      for (let i = 0; i < emit.at.length; i++) {\n        const o = emit.at[i];\n\n        //  Inclusive at the low end for time == 0 only, always inclusive at the high end\n        if ((o.time > lastPercent || (o.time === 0 && lastPercent === 0)) && o.time <= lifePercent) {\n          //  If emit.at.value is between 0 and 1 then it expresses a\n          //  percentage random chance to create a child at this time\n          if (o.value > 0 && o.value < 1.0) {\n            if (Math.random() < o.value) {\n              total += 1;\n            }\n          } else {\n            //  All other values are taken literally\n            total += o.value;\n          }\n        }\n      }\n\n      return total;\n    }\n\n    //  Alternatively, we have a fixed emission frequency or a control graph\n    return this.graph.getParamArea(emit, lastPercent, lifePercent) * elapsedTime;\n  },\n\n  /**\n   * Call a function on each _alive_ particle in this emitter.\n   *\n   * Additional arguments for the callback can be specified after the context parameter.\n   * For example:\n   *\n   * `Emitter.forEach(headTowards, this, 100, 500)`\n   *\n   * .. would invoke the `headTowards` function with the arguments `(particle, 100, 500)`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#forEach\n   * @param {function} callback - The function that will be called for each alive particle. The particle will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the particle.\n   */\n  forEach(callback, callbackContext) {\n    if (arguments.length <= 2) {\n      for (var i = 0; i < this.list.length; i++) {\n        callback.call(callbackContext, this.list[i]);\n      }\n    } else {\n      const args = [null];\n\n      for (var i = 2; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      for (var i = 0; i < this.list.length; i++) {\n        args[0] = this.list[i];\n        callback.apply(callbackContext, args);\n      }\n    }\n  },\n\n  /**\n   * Call a function on each _alive_ particle that was emitted in the last call.\n   * When you call `emit` the particles that are emitted are temporarily added to the\n   * Emitter.batch array. This method allows you to call a function on all particles\n   * within that array.\n   *\n   * Additional arguments for the callback can be specified after the context parameter.\n   * For example:\n   *\n   * `Emitter.forEach(headTowards, this, 100, 500)`\n   *\n   * .. would invoke the `headTowards` function with the arguments `(particle, 100, 500)`.\n   *\n   * @method Phaser.ParticleStorm.Emitter#forEachNew\n   * @param {function} callback - The function that will be called for each alive particle. The particle will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the particle.\n   */\n  forEachNew(callback, callbackContext) {\n    if (this.batch.length === 0) {\n      return;\n    }\n\n    if (arguments.length <= 2) {\n      for (var i = 0; i < this.batch.length; i++) {\n        callback.call(callbackContext, this.batch[i]);\n      }\n    } else {\n      const args = [null];\n\n      for (var i = 2; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      for (var i = 0; i < this.batch.length; i++) {\n        args[0] = this.batch[i];\n        callback.apply(callbackContext, args);\n      }\n    }\n  },\n\n  /**\n   * Gets a Particle from this emitter based on the given index.\n   *\n   * Only 'live' particles are checked.\n   *\n   * @method Phaser.ParticleStorm.Emitter#getParticle\n   * @param {integer} [index=0] - The index of the particle to get.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted.\n   */\n  getParticle(index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    if (this.list[index]) {\n      return this.list[index];\n    }\n    return null;\n  },\n\n  /**\n   * Renders a Debug panel for this Emitter using the Phaser.Debug class.\n   *\n   * It displays the force, scroll speed and numbers of alive and dead particles.\n   *\n   * The size of the rendered debug panel is 360x70.\n   *\n   * You should **never** use this in a production game, as it costs CPU/GPU time to display it.\n   *\n   * @method Phaser.ParticleStorm.Emitter#debug\n   * @param {number} [x=0] - The x coordinate to render the Debug panel at.\n   * @param {number} [y=0] - The y coordinate to render the Debug panel at.\n   */\n  debug(x, y) {\n    const d = this.game.debug;\n\n    if (d) {\n      d.start(x + 4, y + 16, 'rgb(255, 255, 255)', 132);\n\n      d.context.fillStyle = 'rgba(0, 74, 128, 0.5)';\n      d.context.fillRect(x, y, 360, 70);\n\n      const fx = `${this.force.x}`;\n      const fy = `${this.force.y}`;\n\n      d.line('Force:', fx.substr(0, 8), fy.substr(0, 8));\n      d.line('Scroll Speed:', this.scrollSpeed.x, this.scrollSpeed.y);\n      d.line('Alive:', 'Dead:', 'Total:');\n      d.line(this.alive, this.dead, this.total);\n\n      d.stop();\n    }\n  },\n\n  /**\n   * Destroys this emitter.\n   *\n   * Calls `clear` on the renderer and kills all particles in its lists.\n   *\n   * @method Phaser.ParticleStorm.Emitter#destroy\n   */\n  destroy() {\n    if (this.renderer.clear) {\n      this.renderer.clear();\n    }\n\n    this.renderer.destroy();\n    this.renderer = null;\n\n    for (let i = this.list.length - 1; i >= 0; i--) {\n      this.list[i].kill();\n      this.list.splice(i, 1);\n    }\n\n    this.list = [];\n    this.pool = [];\n    this.batch = [];\n    this.wells = [];\n  }\n};\n\n/**\n * The paused state of the Emitter.\n *\n * If paused is set to `true` then no calls to `emit` or `update` will be processed.\n *\n * Set to `false` to resume updating of the particles.\n *\n * @name Phaser.ParticleStorm.Emitter#paused\n * @property {boolean} paused\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'paused', {\n  get() {\n    return !this.enabled;\n  },\n\n  set(value) {\n    this.enabled = !value;\n  }\n});\n\n/**\n * The total number of particles being managed by this emitter, including both\n * alive and dead particles.\n *\n * @name Phaser.ParticleStorm.Emitter#total\n * @property {integer} total\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'total', {\n  get() {\n    return this.alive + this.dead;\n  }\n});\n\n/**\n * The total number of active (alive) particles being managed by this emitter.\n *\n * @name Phaser.ParticleStorm.Emitter#alive\n * @property {integer} alive\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'alive', {\n  get() {\n    return this.list.length;\n  }\n});\n\n/**\n * The total number of dead particles in the pool, ready to be re-used by this emitter.\n *\n * @name Phaser.ParticleStorm.Emitter#dead\n * @property {integer} dead\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Emitter.prototype, 'dead', {\n  get() {\n    return this.pool.length;\n  }\n});\n\nPhaser.ParticleStorm.Emitter.prototype.constructor = Phaser.ParticleStorm.Emitter;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A single particle created and updated by a Particle Emitter.\n *\n * It can belong to only one Emitter at any one time.\n *\n * Particles themselves don't have any display properties, i.e. they are not Sprites. If a Particle\n * is added to an Emitter Renderer that uses Sprites, then a new Sprite object will be created and\n * assigned to the Particles `sprite` property. Not all types of renderer do this, for example the\n * Pixel renderer doesn't use sprites at all.\n *\n * Particles are frequently pooled, so don't add any parameter initialization into the constructor should you extend it.\n * Instead place it inside the Particle.reset method.\n *\n * @class Phaser.ParticleStorm.Particle\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that owns this particle.\n */\nPhaser.ParticleStorm.Particle = function(emitter) {\n  /**\n   * The emitter that owns this particle.\n   * @property {Phaser.ParticleStorm.Emitter} emitter\n   */\n  this.emitter = emitter;\n\n  /**\n   * The renderer responsible for rendering this particle.\n   * @property {Phaser.ParticleStorm.Renderer.Base} renderer\n   */\n  this.renderer = null;\n\n  /**\n   * A set of useful common static functions.\n   * @property {Phaser.ParticleStorm.Graph} graph\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The transform control for this particle. Contains properties such as position, velocity and acceleration.\n   * @property {Phaser.ParticleStorm.Controls.Transform} transform\n   */\n  this.transform = new Phaser.ParticleStorm.Controls.Transform(this);\n\n  /**\n   * The color control for this particle. Contains color related properties including red, green, blue, alpha, tint and blendMode.\n   * @property {Phaser.ParticleStorm.Controls.Color} color\n   */\n  this.color = new Phaser.ParticleStorm.Controls.Color(this);\n\n  /**\n   * The texture control for this particle. Contains texture related properties including key, frame and animation handling.\n   * @property {Phaser.ParticleStorm.Controls.Texture} texture\n   */\n  this.texture = new Phaser.ParticleStorm.Controls.Texture(this);\n\n  /**\n   * @property {Phaser.ParticleStorm.Particle} parent - The parent particle, if it has one.\n   * @default\n   */\n  this.parent = null;\n\n  /**\n   * The lifespan of the particle is the length of time in milliseconds that it will live for once spawned.\n   * Set the lifespan to zero to allow it to live forever. However particles cannot live forever if you use\n   * any parameter controls at all, as they require an expiry date.\n   * @property {number} lifespan\n   * @default\n   */\n  this.lifespan = 2000;\n\n  /**\n   * Should the particle be kept alive and rendering once it has completed its lifespan?\n   * This can only be set to true if lifespan is a value above zero.\n   * When a particle is 'kept alive' it will never dispatch an onKill event.\n   * @property {boolean} keepAlive\n   * @default\n   */\n  this.keepAlive = false;\n\n  /**\n   * The delay in milliseconds that the particle will wait for until spawning.\n   * @property {number} delay\n   * @default\n   */\n  this.delay = 0;\n\n  /**\n   * Controls if the particle should still be rendered or not, even when delayed.\n   * This allows you to display a particle in place before its lifecycle starts.\n   * @property {boolean} delayVisible\n   * @default\n   */\n  this.delayVisible = false;\n\n  /**\n   * The current age of this particle as a percentage of its total lifespan. A value between 0 and 1.\n   * @property {number} life\n   * @default\n   */\n  this.life = 0;\n\n  /**\n   * If this particle is part of a Sprite based renderer then the sprite associated with this particle is referenced\n   * in this property. Otherwise this value is `null`.\n   * @property {Phaser.Sprite} sprite\n   * @default\n   */\n  this.sprite = null;\n\n  /**\n   * The visible state of this particle.\n   * @property {boolean} visible\n   */\n  this.visible = false;\n\n  /**\n   * A particle is considered 'complete' when it reaches 100% of its lifespan.\n   * If it has no lifespan it is never 'complete'.\n   * @property {boolean} isComplete\n   */\n  this.isComplete = false;\n\n  /**\n   * Should this particle ignore any force applied by its emitter?\n   * @property {boolean} ignoreForce\n   * @default\n   */\n  this.ignoreForce = false;\n\n  /**\n   * Should this particle ignore any scrollSpeed applied by its emitter?\n   * @property {boolean} ignoreScrollSpeed\n   * @default\n   */\n  this.ignoreScrollSpeed = false;\n\n  /**\n   * @property {object} emit - The emit data of this particle.\n   * @private\n   */\n  this.emit = {};\n\n  /**\n   * @property {number} _age - Internal helper for tracking the current age of this particle.\n   * @private\n   */\n  this._age = 0;\n\n  /**\n   * @property {number} _lastPercent - Internal tracking var for previous lifePercent.\n   * @private\n   */\n  this._lastPercent = 0;\n\n  /**\n   * @property {number} _numToEmit - Internal accumulator to track the fractions of a particle to be emitted across multiple frames.\n   * @private\n   */\n  this._numToEmit = 0;\n};\n\nPhaser.ParticleStorm.Particle.prototype = {\n  /**\n   * Reset all of the particle properties back to their defaults, ready for spawning.\n   *\n   * If the optional `data` parameter is provided then Particle.create will be automatically called.\n   *\n   * @method Phaser.ParticleStorm.Particle#reset\n   * @param {Phaser.ParticleStorm.Renderer.Base} renderer - The renderer responsible for rendering this particle.\n   * @param {number} x - The x position of this Particle in world space.\n   * @param {number} y - The y position of this Particle in world space.\n   * @param {object} [data] - The data this particle will use when emitted.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  reset(renderer, x, y, data) {\n    this.renderer = renderer;\n\n    this.transform.reset();\n    this.color.reset();\n    this.texture.reset();\n\n    this.emit = Object.create(Phaser.ParticleStorm.BASE_EMIT);\n\n    this.isComplete = false;\n    this.keepAlive = false;\n\n    this.delay = 0;\n    this.delayVisible = false;\n\n    this.ignoreForce = false;\n    this.ignoreScrollSpeed = false;\n\n    this.alive = false;\n    this.lifespan = 2000;\n    this.life = 0;\n    this.visible = false;\n\n    this._age = 0;\n    this._lastPercent = 0;\n    this._numToEmit = 0;\n\n    if (data !== undefined) {\n      this.create(x, y, data);\n    }\n\n    return this;\n  },\n\n  /**\n   * Activates this Particle. Should be called only after the particle has been reset.\n   *\n   * It works by populating all of the local settings with the values contained in the `data` object.\n   * It's then added to the renderer and drawn once with its initial values.\n   *\n   * @method Phaser.ParticleStorm.Particle#create\n   * @param {number} x - The x position of this Particle in world space.\n   * @param {number} y - The y position of this Particle in world space.\n   * @param {object} data - The data this particle will use to populate its settings.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  create(x, y, data) {\n    //  ------------------------------------------------\n    //  Lifespan\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('lifespan')) {\n      this.lifespan = this.graph.getMinMax(data.lifespan);\n    }\n\n    this.keepAlive = data.keepAlive;\n\n    //  ------------------------------------------------\n    //  Delay\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('delay')) {\n      this.delay = this.graph.getMinMax(data.delay);\n    }\n\n    this.ignoreForce = data.ignoreForce;\n    this.ignoreScrollSpeed = data.ignoreScrollSpeed;\n\n    //  ------------------------------------------------\n    //  Update controls\n    //  ------------------------------------------------\n\n    this.transform.init(x, y, data);\n    this.color.init(data);\n    this.texture.init(data);\n\n    //  ------------------------------------------------\n    //  Emit child\n    //  ------------------------------------------------\n\n    if (data.emit) {\n      this.emit = Object.create(data.emit);\n    }\n\n    this.visible = data.visible !== false;\n\n    this.alive = true;\n\n    if (this.parent && this.parent.emit && this.parent.emit.inherit) {\n      this.alive = this.onInherit(this.parent);\n    }\n\n    if (this.alive) {\n      //  Make sure all parameters are set\n      this.transform.step();\n      this.color.step();\n\n      //  Add a display system object for this particle\n      const sprite = this.renderer.add(this);\n\n      if (sprite) {\n        //  Only the TextureControl has a post-add step (which defines the animation frames)\n        this.texture.step(data, sprite);\n      }\n\n      this.onEmit();\n\n      if (this.emitter.onEmit) {\n        this.emitter.onEmit.dispatch(this.emitter, this);\n      }\n\n      //  Draw the particle in its initial state\n      this.renderer.update(this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Update this particle for a single time step.\n   *\n   * Decides when to emit particles and when to die.\n   *\n   * @method Phaser.ParticleStorm.Particle#step\n   * @param {number} elapsedTime - How long has it been since the last time this was updated (in milliseconds)\n   * @param {Phaser.Point} [force] - A force which is applied to this particle as acceleration on every update call.\n   * @return {boolean} True to continue living, false if this particle should die now.\n   */\n  step(elapsedTime, force) {\n    //  Keep track of the particles age\n    this._age += elapsedTime;\n\n    //  If there's a delay\n    if (this.delay) {\n      if (this._age < this.delay) {\n        this.renderer.update(this);\n\n        //  Exit (but don't kill the particle)\n        return true;\n      }\n      //  The delay has expired. Clear the delay value and reset the particle _age to zero (newborn)\n      this.delay = 0;\n      this._age = 0;\n    }\n\n    this._lastPercent = this.life;\n\n    //  Calculate lifespan of this particle, commencing when delay expired (if there was one)\n    if (this.lifespan > 0) {\n      this.life = Math.min(this._age / this.lifespan, 1.0);\n    }\n\n    if (force && !this.ignoreForce) {\n      this.transform.velocity.x.value += force.x;\n      this.transform.velocity.y.value += force.y;\n    }\n\n    this.transform.step();\n    this.color.step();\n\n    this.onUpdate();\n\n    if (this.alive) {\n      //  How many should we release in this time interval (summed with any fractions we didn't emit previously)\n      this._numToEmit += this.emitter.updateFrequency(this.emit, elapsedTime, this._lastPercent, this.life);\n\n      //  Create all the 'whole' emissions\n      while (this._numToEmit >= 1.0) {\n        this.emitChild();\n      }\n\n      this.renderer.update(this);\n    }\n\n    if (!this.isComplete && this.life === 1.0) {\n      this.isComplete = true;\n\n      if (this.emitter.onComplete) {\n        this.emitter.onComplete.dispatch(this.emitter, this);\n      }\n    }\n\n    //  Return false if this particle should die, otherwise true\n    return this.life < 1.0 || this.keepAlive;\n  },\n\n  /**\n   * Emit a child particle from this one.\n   *\n   * @method Phaser.ParticleStorm.Particle#emitChild\n   * @private\n   */\n  emitChild() {\n    let x = this.graph.getMinMax(this.emit.offsetX) | 0;\n    let y = this.graph.getMinMax(this.emit.offsetY) | 0;\n\n    //  Does this emitter specify a creation circle or rect?\n    if (this.emit.rect) {\n      // pick a random location inside the rectangle\n      const { rect } = this.emit;\n      x = Math.random() * rect.width + rect.x;\n      y = Math.random() * rect.height + rect.y;\n    } else if (this.emit.circle) {\n      const radius = this.emit.circle;\n      // randomly pick a y coordinate inside the circle\n      y = Math.random() * radius * 2 - radius;\n      // calculate the horizontal span from the point (0, y) to the circumference (Pythagoras: x2 + y2 = r2)\n      const span = Math.sqrt(radius * radius - y * y);\n      // randomly pick an x coordinate in that span on either side of the x = 0 line\n      x = Math.random() * span * 2 - span;\n    }\n\n    let key = this.emit.name;\n\n    if (typeof key !== 'string') {\n      key = this.getChildKey(this.emit.name);\n    }\n\n    if (key) {\n      const p = this.emitter.emitParticle(key, this.transform.x + x, this.transform.y + y, this);\n\n      //  Apply any overwrite parameters to the new child particle\n      if (p && this.emit.overwrite) {\n        this.applyOverwrite(this.emit.overwrite, p);\n      }\n    }\n\n    this._numToEmit -= 1.0;\n  },\n\n  /**\n   * A blank method that allows you to control overwriting specific particle properties\n   * on emission. Extend the Particle class then use this method as required.\n   *\n   * @method Phaser.ParticleStorm.Particle#applyOverwrite\n   * @param {object} data - The overwrite data.\n   * @param {Phaser.ParticleStorm.Particle} particle - The Particle object.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  applyOverwrite(data, particle) {\n    return particle;\n  },\n\n  /**\n   * Work out what child particle should be emitted by this particle.\n   * Handles simple name string, lists of name strings, and the \"at\" format.\n   *\n   * @method Phaser.ParticleStorm.Particle#getChildKey\n   * @param {object} param - A child defining data structure.\n   * @returns {string|null} The name of the child to emit.\n   */\n  getChildKey(param) {\n    if (Array.isArray(param)) {\n      return this.emitter.game.rnd.pick(param);\n    }\n\n    if (param.at !== undefined && param.at.length > 0) {\n      //  It's a list of child types over time using the \"at\" list syntax, find the appropriate one\n      let ret = param.at[0].value;\n\n      for (let i = 0; i < param.at.length; i++) {\n        if (param.at[i].time > this.life) {\n          break;\n        }\n\n        ret = param.at[i].value;\n      }\n\n      return ret;\n    }\n\n    return null;\n  },\n\n  /**\n   * Set this particles velocity components to radiate away from its current position by the given angle.\n   *\n   * @method Phaser.ParticleStorm.Particle#radiate\n   * @param {object} velocity - An object containing a min/max pair, an array of strings containing discrete values, or a single discrete value.\n   * @param {number} [from=0] - If both arc variables are undefined, radiate in all directions.\n   * @param {number} [to=359] - If both arc variables are defined the particle will radiate within the arc range defined.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  radiate(velocity, from, to) {\n    //  If `from` is defined, but `to` isn't, we set `to` to match `from`\n    if (to === undefined && from !== undefined) {\n      to = from;\n    } else {\n      if (from === undefined) {\n        from = 0;\n      }\n      if (to === undefined) {\n        to = 359;\n      }\n    }\n\n    let v = velocity;\n\n    if (velocity.hasOwnProperty('min')) {\n      v = this.graph.getMinMax(velocity);\n    } else if (Array.isArray(velocity)) {\n      v = parseFloat(this.emitter.game.rnd.pick(velocity), 10);\n    }\n\n    const angle = ((Math.random() * (to - from) + from) * Math.PI) / 180.0;\n\n    this.transform.velocity.x.value = Math.sin(angle) * v;\n    this.transform.velocity.y.value = -Math.cos(angle) * v;\n\n    return this;\n  },\n\n  /**\n   * Set this particles velocity components to radiate away from a given point.\n   *\n   * @method Phaser.ParticleStorm.Particle#radiateFrom\n   * @param {number} x - The central x location to radiate from.\n   * @param {number} y - The central y location to radiate from.\n   * @param {object} velocity - An object containing a min/max pair, an array of strings containing discrete values, or a single discrete value.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  radiateFrom(x, y, velocity) {\n    let v = velocity;\n\n    if (velocity.hasOwnProperty('min')) {\n      v = this.graph.getMinMax(velocity);\n    } else if (Array.isArray(velocity)) {\n      v = parseFloat(this.emitter.game.rnd.pick(velocity), 10);\n    }\n\n    const dx = this.transform.x - x;\n    const dy = this.transform.y - y;\n    const d = Math.sqrt(dx * dx + dy * dy);\n\n    this.transform.velocity.x.value = (dx * v) / d;\n    this.transform.velocity.y.value = (dy * v) / d;\n\n    return this;\n  },\n\n  /**\n   * Set this particles velocity components to _approximately_ head towards the given coordinates.\n   *\n   * It will set the velocity to ensure it arrives within the lifespan of this particle.\n   * However it does not factor in other forces acting on the particle such as\n   * Emitter.force or Gravity Wells.\n   *\n   * If you specify a zone it will pick a random point from anywhere within the zone and\n   * add the x and y values to it, using the x and y values as the placement of the zone.\n   *\n   * @method Phaser.ParticleStorm.Particle#target\n   * @param {object} data - The target data.\n   * @param {number} [data.x] - The x location to head to. Must be specified if no zone is given.\n   * @param {number} [data.y] - The y location to head to. Must be specified if no zone is given.\n   * @param {Phaser.ParticleStorm.Zones.Base} [data.zone] - A zone. A random point within the zone will be selected as the target.\n   * @param {string} [data.speed] - Either 'linear', 'reverse' or 'yoyo'.\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  target(data) {\n    let x = 0;\n    let y = 0;\n    const t = this.transform;\n\n    if (data.x) {\n      x = data.x;\n    }\n\n    if (data.y) {\n      y = data.y;\n    }\n\n    if (data.zone) {\n      const p = data.zone.getRandom();\n\n      x += p.x;\n      y += p.y;\n    }\n\n    const angle = Math.atan2(y - t.y, x - t.x);\n\n    const dx = t.x - x;\n    const dy = t.y - y;\n\n    const speed = Math.sqrt(dx * dx + dy * dy) / (this.lifespan / 1000);\n\n    const vx = Math.cos(angle) * speed * t.time.physicsElapsed;\n    const vy = Math.sin(angle) * speed * t.time.physicsElapsed;\n\n    if (data.speed) {\n      this.graph.fromControl({ value: vx * 2, control: data.speed }, t.velocity.x);\n      this.graph.fromControl({ value: vy * 2, control: data.speed }, t.velocity.y);\n    } else {\n      t.velocity.x.value = vx;\n      t.velocity.y.value = vy;\n    }\n\n    return this;\n  },\n\n  /**\n   * Sets a new lifespan for this particle.\n   *\n   * The current age of the particle is reset to zero when this is called.\n   *\n   * @method Phaser.ParticleStorm.Particle#setLife\n   * @param {number|object} lifespan - The new lifespan of this particle in ms. Either a value or a min/max pair.\n   * @param {boolean} [keepAlive=false] - Should the particle be kept alive at the end of its lifespan?\n   * @return {Phaser.ParticleStorm.Particle} This Particle object.\n   */\n  setLife(lifespan, keepAlive) {\n    this.lifespan = this.graph.getMinMax(lifespan);\n\n    this.life = 0;\n    this._age = 0;\n    this._lastPercent = 0;\n\n    this.isComplete = false;\n    this.keepAlive = keepAlive;\n\n    return this;\n  },\n\n  /**\n   * Turns off this particle, leaving it ready to be restarted with reset().\n   *\n   * @method Phaser.ParticleStorm.Particle#kill\n   */\n  kill() {\n    this.alive = false;\n\n    this.renderer.kill(this);\n\n    this.onKill();\n  },\n\n  /**\n   * Called when this Particle is first emitted.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onEmit\n   * @param {Phaser.ParticleStorm.Particle} [parent] - The parent particle that emitted this one, if any.\n   */\n  onEmit() {},\n\n  /**\n   * Called when this Particle is updated by the Particle Manager.\n   *\n   * It is called at the end of the Particle.step method, just before this particle emits\n   * any children and before it's sent to the renderer. If you set Particle.alive to false\n   * in this method then the particle will not emit any children or be rendered.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onUpdate\n   */\n  onUpdate() {},\n\n  /**\n   * Called when this Particle inherits values from a parent particle.\n   *\n   * This method must return a boolean value. If you wish for this particle to be used\n   * by the Particle Manager and rendered then return `true`. If you want the particle\n   * to be immediately killed then return `false`.\n   *\n   * This is method is for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onInherit\n   * @param {Phaser.ParticleStorm.Particle} parent - The parent particle that emitted this one.\n   * @return {boolean} True if this particle should be added to the pool and rendered, otherwise false if it should be killed.\n   */\n  onInherit() {\n    return true;\n  },\n\n  /**\n   * Called when this Particle is killed by its emitter, or directly in code.\n   *\n   * A killed particle is moved from the active particle list back to the pool, ready\n   * for use again in the future. It is not destroyed, it is hibernated for later use.\n   *\n   * This is a blank method for you to override in your own classes that extend Particle.\n   *\n   * @method Phaser.ParticleStorm.Particle#onKill\n   */\n  onKill() {}\n};\n\n/**\n * The life percent value of this particle rounded between 0 and 100.\n *\n * If you need a value between 0 and 1 then use `Particle.life` instead.\n *\n * @name Phaser.ParticleStorm.Particle#lifePercent\n * @property {integer} lifePercent - The current life percentage of this particle. Rounded between 0 and 100.\n * @readOnly\n */\nObject.defineProperty(Phaser.ParticleStorm.Particle.prototype, 'lifePercent', {\n  get() {\n    return Math.round(this.life * 100);\n  }\n});\n\n/**\n * Sets the frequency at which this particle emits children.\n *\n * @name Phaser.ParticleStorm.Particle#frequency\n * @property {number|object} value - A value/control type object defining a set rate or a graph of rates across lifespan.\n */\nObject.defineProperty(Phaser.ParticleStorm.Particle.prototype, 'frequency', {\n  get() {\n    return this.emit.value;\n  },\n\n  set(value) {\n    this.emit.value = value;\n  }\n});\n\nPhaser.ParticleStorm.Particle.prototype.constructor = Phaser.ParticleStorm.Particle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Richard Lord\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\n */\n\n/**\n * A Gravity Well creates a force on the particles to draw them towards a single point.\n * The force applied is inversely proportional to the square of the distance from the particle to the point,\n * in accordance with Newton's law of gravity.\n *\n * A Gravity Well only effects particles owned by the emitter that created it.\n *\n * Gravity Wells don't have any display properties, i.e. they are not Sprites.\n *\n * This class was directly inspired by the work of Richard Lord and some of the jsdocs\n * use his original text. As such this class is released under an MIT License.\n *\n * @class Phaser.ParticleStorm.GravityWell\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The Emitter that owns this Gravity Well.\n * @param {number} [x=0] - The x coordinate of the Gravity Well, the point towards which particles are drawn.\n * @param {number} [y=0] - The y coordinate of the Gravity Well, the point towards which particles are drawn.\n * @param {number} [power=0] - The strength of the gravity well. Larger numbers create stronger forces. Start with low values like 1.\n * @param {number} [epsilon=100] - The minimum distance for which gravity is calculated.\n *                               Particles closer than this distance experience a gravity force as if\n *                               they were this distance away. This stops the gravity effect blowing\n *                               up as distances get small. For realistic gravity effects you will want\n *                               a small epsilon (~1), but for stable visual effects a larger\n *                               epsilon (~100) is often better.\n * @param {number} [gravity=50] - The gravity constant.\n */\nPhaser.ParticleStorm.GravityWell = function(emitter, x, y, power, epsilon, gravity) {\n  if (x === undefined) {\n    x = 0;\n  }\n  if (y === undefined) {\n    y = 0;\n  }\n  if (power === undefined) {\n    power = 0;\n  }\n  if (epsilon === undefined) {\n    epsilon = 100;\n  }\n  if (gravity === undefined) {\n    gravity = 50;\n  }\n\n  /**\n   * @property {Phaser.ParticleStorm.Emitter} emitter - The Emitter that this Gravity Well belongs to.\n   */\n  this.emitter = emitter;\n\n  /**\n   * @property {Phaser.Time} time - A reference to the Phaser.Time system.\n   */\n  this.time = emitter.game.time;\n\n  /**\n   * @property {Phaser.Point} position - The position of the Gravity Well in world space.\n   */\n  this.position = new Phaser.Point(x, y);\n\n  /**\n   * @property {boolean} active - When `true` the Gravity Well is in effect. When `false` it doesn't influence particles.\n   */\n  this.active = true;\n\n  /**\n   * @property {number} _gravity - Internal gravity var.\n   * @private\n   */\n  this._gravity = gravity;\n\n  /**\n   * @property {number} _power - Internal power var.\n   * @private\n   */\n  this._power = 0;\n\n  /**\n   * @property {number} _epsilon - Internal epsilon var.\n   * @private\n   */\n  this._epsilon = 0;\n\n  this.power = power;\n  this.epsilon = epsilon;\n};\n\nPhaser.ParticleStorm.GravityWell.prototype = {\n  /**\n   * Applies the influence of this Gravity Well to the given Particle.\n   *\n   * This is called automatically by the Emitter the Gravity Well belongs to.\n   *\n   * @method Phaser.ParticleStorm.GravityWell#step\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to adjust based on this Gravity Well.\n   */\n  step(particle) {\n    const x = this.position.x - particle.transform.x;\n    const y = this.position.y - particle.transform.y;\n    let dSq = x * x + y * y;\n\n    if (dSq === 0) {\n      return;\n    }\n\n    const d = Math.sqrt(dSq);\n\n    if (dSq < this._epsilon) {\n      dSq = this._epsilon;\n    }\n\n    const factor = (this._power * this.time.elapsed) / (dSq * d);\n\n    particle.transform.velocity.x.value += x * factor;\n    particle.transform.velocity.y.value += y * factor;\n  }\n};\n\n/**\n * The minimum distance for which the gravity force is calculated.\n * Particles closer than this distance experience the gravity as if\n * they were this distance away. This stops the gravity effect blowing\n * up as distances get small.  For realistic gravity effects you will want\n * a small epsilon (~1), but for stable visual effects a larger\n * epsilon (~100) is often better.\n *\n * @name Phaser.ParticleStorm.GravityWell#epsilon\n * @property {number} epsilon\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'epsilon', {\n  get() {\n    return Math.sqrt(this._epsilon);\n  },\n\n  set(value) {\n    this._epsilon = value * value;\n  }\n});\n\n/**\n * The strength of the gravity force - larger numbers produce a stronger force.\n *\n * @name Phaser.ParticleStorm.GravityWell#power\n * @property {number} power\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'power', {\n  get() {\n    return this._power / this.gravity;\n  },\n\n  set(value) {\n    this._power = value * this.gravity;\n  }\n});\n\n/**\n * The gravity constant against which the forces are calculated.\n *\n * @name Phaser.ParticleStorm.GravityWell#gravity\n * @property {number} gravity\n */\nObject.defineProperty(Phaser.ParticleStorm.GravityWell.prototype, 'gravity', {\n  get() {\n    return this._gravity;\n  },\n\n  set(value) {\n    const pwr = this.power;\n    this._gravity = value;\n    this.power = pwr;\n  }\n});\n\nPhaser.ParticleStorm.GravityWell.prototype.constructor = Phaser.ParticleStorm.GravityWell;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Pete Baron <pete@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A collection of common functions.\n *\n * @class Phaser.ParticleStorm.Graph\n * @static\n */\nPhaser.ParticleStorm.Graph = {\n  /**\n   * A constant used for the Linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_LINEAR: [\n    { x: 0, y: 1 },\n    { x: 1, y: 0 }\n  ],\n\n  /**\n   * A constant used for the reversed linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_REVERSE: [\n    { x: 0, y: 0 },\n    { x: 1, y: 1 }\n  ],\n\n  /**\n   * A constant used for yoyo'd linear control sets.\n   * @constant\n   * @type {array}\n   */\n  CONTROL_YOYO: [\n    { x: 0, y: 0 },\n    { x: 0.5, y: 1 },\n    { x: 1, y: 0 }\n  ],\n\n  /**\n   * Get the control value by linear interpolation of points in the control array\n   * for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1,\n   * other points may lie between those.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlValue\n   * @param {object} control - The control curve for a parameter.\n   * @param {number} percent - A value between 0 and 1.\n   * @return {number} The control value at 'percent'.\n   */\n  getControlValue(control, percent) {\n    let index = 0;\n    let point = control[index];\n\n    if (point.x === percent) {\n      return point.y;\n    }\n\n    while (point.x <= percent) {\n      if (index >= control.length - 1) {\n        return point.x;\n      }\n\n      point = control[++index];\n    }\n\n    const prev = control[index - 1];\n\n    //  Linear interpolation: f(x) = y0 + (y1 - y0) * (x - x0) / (x1 - x0)\n    return prev.y + ((percent - prev.x) * (point.y - prev.y)) / (point.x - prev.x);\n  },\n\n  /**\n   * Create a list of all control values between the start and end times given.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlValues\n   * @param {object} control - The control graph.\n   * @param {number} previousPercent - The starting \"x\" value.\n   * @param {number} nowPercent - The ending \"x\" value.\n   * @return {array} An array of point objects: {x: number, y: number}[]\n   */\n  getControlValues(control, previousPercent, nowPercent) {\n    // create a list containing the starting point at previousPercent, interpolated if necessary\n    const firsty = Phaser.ParticleStorm.Graph.getControlValue(control, previousPercent);\n    const points = [{ x: previousPercent, y: firsty }];\n\n    // no time has elapsed, that's all she wrote\n    if (previousPercent >= nowPercent) {\n      return points;\n    }\n\n    // scan the control array for x values between previousPercent and nowPercent, add them to the list\n    for (let i = 0; i < control.length; i++) {\n      if (control[i].x > previousPercent) {\n        if (control[i].x < nowPercent) {\n          points.push(control[i]);\n        } else {\n          // early out, array is in ascending order so there's no need to search the rest\n          break;\n        }\n      }\n    }\n\n    // push the terminal point at nowPercent, interpolated if necessary\n    points.push({ x: nowPercent, y: Phaser.ParticleStorm.Graph.getControlValue(control, nowPercent) });\n\n    return points;\n  },\n\n  /**\n   * Get a value for the area under a control graph (if there is one on param)\n   * Otherwise just return the \"value\" field of param.\n   *\n   * @method Phaser.ParticleStorm.Graph#getParamArea\n   * @param {object} param - The parameter to evaluate.\n   * @param {number} previousPercent - The life percent to begin the calculation from (0 .. 1).\n   * @param {number} nowPercent - The life percent where the calculation ends (0 .. 1).\n   * @return {number} The area found.\n   */\n  getParamArea(param, previousPercent, nowPercent) {\n    if (param.control) {\n      return param.value * Phaser.ParticleStorm.Graph.getControlArea(param.control, previousPercent, nowPercent);\n    }\n\n    return param.value;\n  },\n\n  /**\n   * Calculate the area under a graph between two points.\n   *\n   * @method Phaser.ParticleStorm.Graph#getControlArea\n   * @param {object} control - The graph definition as a list of objects with \"x\" and \"y\" fields.\n   * @param {number} previousPercent - The starting \"x\" value.\n   * @param {number} nowPercent - The ending \"x\" value.\n   * @return {number} The area.\n   */\n  getControlArea(control, previousPercent, nowPercent) {\n    // find all the points where the control array changes slope (including the points at previousPercent and nowPercent)\n    const points = Phaser.ParticleStorm.Graph.getControlValues(control, previousPercent, nowPercent);\n\n    if (previousPercent >= nowPercent) {\n      return points[0].y;\n    }\n\n    // the total area under the lines is the sum areas of each trapezoid formed by a line segment, two verticals and the (y = 0) axis\n    //\n    //    /|\\ __\n    //   /A|B|C |\n    //  |__|_|__|\n    //\n    let area = points.length > 1 ? 0 : points.y;\n    let prev = points[0];\n\n    for (let i = 1; i < points.length; i++) {\n      const next = points[i];\n      // area of a trapezoid is .5 * b * (h1 + h2)\n      area += 0.5 * (next.x - prev.x) * (prev.y + next.y);\n      prev = next;\n    }\n\n    return area;\n  },\n\n  /**\n   * Return a value for an object which has an \"initial\" field.\n   * The field can be either a number or a min-max range.\n   *\n   * Number (eg. 1900.123)\n   * Range (eg. { \"min\":-4.0, \"max\":123.45 })\n   * Object with initial Number (eg. { \"initial\": 1900.123, ... })\n   * Object with initial Range (eg. { \"initial\": { \"min\":-4.0, \"max\":123.45 }, ... })\n   * Object without initial value at all (returns 0)\n   *\n   * If there is no \"initial\" field, this function will return 0.\n   *\n   * @method Phaser.ParticleStorm.Graph#getMinMaxInitial\n   * @param {object} object - The object to evaluate.\n   * @return {number} The value found or zero if not found.\n   */\n  getMinMaxInitial(object) {\n    if (object.initial !== undefined) {\n      return Phaser.ParticleStorm.Graph.getMinMax(object.initial);\n    }\n    return 0;\n  },\n\n  /**\n   * Checks if the given value is numeric or not.\n   *\n   * @method Phaser.ParticleStorm.Graph#isNumeric\n   * @param {object|number} n - The value to be checked.\n   * @return {boolean} True if the value given is numeric, otherwise false.\n   */\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  },\n\n  /**\n   * Pick a random number in the range between \"min\" and \"max\".\n   * If the 'value' is not an object with \"min\" and \"max\" in it, return 'value'.\n   *\n   * @method Phaser.ParticleStorm.Graph#getMinMax\n   * @param {object|number} value - An object with \"min\" and \"max\" values, or a plain number.\n   * @return {number} The number picked.\n   */\n  getMinMax(value) {\n    if (value !== undefined && value !== null && value.min !== undefined && value.max !== undefined) {\n      return value.min + Math.random() * (value.max - value.min);\n    }\n\n    return value;\n  },\n\n  /**\n   * Takes a source and destination graph control object and copies the values from `src` to `dest`.\n   *\n   * @method Phaser.ParticleStorm.Graph#clone\n   * @param {object} src - The source control object from which the values are copied.\n   * @param {object} dest - The destination control object into which the values are set.\n   * @return {object} The destination object.\n   */\n  clone(src, dest) {\n    dest.value = src.value;\n    dest.initial = src.initial;\n    dest.delta = src.delta;\n    dest.offset = src.offset;\n    dest.min = src.min;\n    dest.max = src.max;\n    dest.control = src.control;\n\n    return dest;\n  },\n\n  /**\n   * Takes a particle data setting and extracts just its value and control properties.\n   *\n   * @method Phaser.ParticleStorm.Graph#fromControl\n   * @param {number|object} data - The source value or object from which the values are extracted.\n   * @param {object} obj - The destination control object into which the values are set.\n   */\n  fromControl(data, obj) {\n    if (data.value !== undefined) {\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data.value);\n    }\n\n    if (data.control) {\n      if (data.control === 'linear') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_LINEAR;\n      } else if (data.control === 'reverse') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_REVERSE;\n      } else if (data.control === 'yoyo') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_YOYO;\n      } else {\n        //  Reference the original object - could use Object.create here, but would rather\n        //  save some memory and just use references.\n        obj.control = data.control;\n      }\n    }\n  },\n\n  /**\n   * Takes a particle data setting and extracts its values into the graph control object.\n   *\n   * @method Phaser.ParticleStorm.Graph#fromData\n   * @param {number|object} data - The source value or object from which the values are extracted.\n   * @param {object} obj - The destination control object into which the values are set.\n   * @return {boolean} True if it was able to extract any data, false if it couldn't find any.\n   */\n  fromData(data, obj) {\n    if (data === undefined || data === null) {\n      return false;\n    }\n\n    if (typeof data === 'number') {\n      obj.value = data;\n      return true;\n    }\n\n    if (data.min !== undefined) {\n      //  Allows you to do: rotation: { min: 0, max: 90 }\n      //  assumes assignment to the value property only.\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data);\n    } else if (data.value !== undefined) {\n      //  Allows rotation: { value: { min: 0, max: 90 } }\n      obj.value = Phaser.ParticleStorm.Graph.getMinMax(data.value);\n    }\n\n    if (data.initial !== undefined) {\n      obj.initial = Phaser.ParticleStorm.Graph.getMinMax(data.initial);\n    }\n\n    if (data.delta !== undefined) {\n      obj.delta = Phaser.ParticleStorm.Graph.getMinMax(data.delta);\n    }\n\n    if (data.offset !== undefined) {\n      obj.offset = Phaser.ParticleStorm.Graph.getMinMax(data.offset);\n    }\n\n    if (data.control) {\n      if (data.control === 'linear') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_LINEAR;\n      } else if (data.control === 'reverse') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_REVERSE;\n      } else if (data.control === 'yoyo') {\n        obj.control = Phaser.ParticleStorm.Graph.CONTROL_YOYO;\n      } else {\n        //  Reference the original object - could use Object.create here, but would rather\n        //  save some memory and just use references.\n        obj.control = data.control;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * Return the value of this parameter object.\n   *\n   * Get the control value by linear interpolation of points in the control array for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1, other points may lie between those\n   *\n   * @method Phaser.ParticleStorm.Graph#getValue\n   * @param {number|object} obj - The source graph control object from which the value is extracted.\n   * @param {number} percent - The current lifePercent value of a particle.\n   * @return {number} The value of the parameter object at this point in the particles life.\n   */\n  getValue(obj, percent) {\n    if (!obj.control || percent === undefined) {\n      return obj.value;\n    }\n\n    let point = obj.control[0];\n\n    //  Very start of the graph?\n    if (point.x === percent) {\n      return point.y;\n    }\n\n    let index = obj.control.length - 1;\n\n    //  Very end of the graph?\n    const last = obj.control[index];\n\n    if (last.x === percent) {\n      return last.y;\n    }\n\n    index = 0;\n\n    while (point.x <= percent) {\n      if (index >= obj.control.length - 1) {\n        return point.y;\n      }\n\n      point = obj.control[++index];\n    }\n\n    const prev = obj.control[index - 1];\n\n    //  Linear interpolation: f(x) = y0 + (y1 - y0) * (x - x0) / (x1 - x0)\n    return obj.value * (prev.y + ((percent - prev.x) * (point.y - prev.y)) / (point.x - prev.x));\n  },\n\n  /**\n   * Return the value of this parameter object, clamped to be within the range obj.min to obj.max.\n   *\n   * Get the control value by linear interpolation of points in the control array for the current percent \"x\" value.\n   *\n   * NOTE: The control array must contain at least points with x = 0 and x = 1, other points may lie between those\n   *\n   * @method Phaser.ParticleStorm.Graph#getClampedValue\n   * @param {number|object} obj - The source graph control object from which the value is extracted.\n   * @param {number} percent - The current lifePercent value of a particle.\n   * @return {number} The clammped value of the parameter object at this point in the particles life.\n   */\n  getClampedValue(obj, percent) {\n    return Phaser.Math.clamp(Math.floor(obj.initial + this.getValue(obj, percent)), obj.min, obj.max);\n  }\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\nPhaser.ParticleStorm.Zones = {};\n\n/**\n * The base class which all ParticleStorm zones must extend.\n *\n * @class Phaser.ParticleStorm.Zones.Base\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n */\nPhaser.ParticleStorm.Zones.Base = function(game) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = game;\n\n  /**\n   * The active state of this Zone. If set to `false` it won't emit or process any particles.\n   * @property {boolean} active\n   */\n  this.active = true;\n\n  /**\n   * The scale of this zone. You can scale a zone, which influences the position of\n   * emitted particles and the overall dimensions of the zone.\n   * @property {Phaser.Point} scale\n   */\n  this.scale = new Phaser.Point(1, 1);\n\n  /**\n   * When scanning the pixels of image based zones you can set it to ignore any pixel\n   * with an alpha value *below* the threshold. This is a value between 0 (fully\n   * transparent) to 255 (fully opaque). If you change this value you need to call\n   * `update` afterwards to re-scan the zone.\n   * @property {integer} alphaThreshold\n   * @default\n   */\n  this.alphaThreshold = 0;\n\n  /**\n   * @property {Phaser.Point} _rnd - Internal point property.\n   * @private\n   */\n  this._rnd = new Phaser.Point();\n};\n\nPhaser.ParticleStorm.Zones.Base.prototype = {\n  /**\n   * Gets a random point from within this zone.\n   * Takes the scale of the zone into account.\n   *\n   * Internally this method uses the private _rnd property\n   * of this zone, so what is returned is a reference to\n   * that Phaser.Point object. So if you need to store\n   * the result rather than use it immediately you should\n   * clone the Point or extract its values.\n   *\n   * @method Phaser.ParticleStorm.Zones.Base#getRandom\n   * @return {Phaser.Point} A random point within this zone.\n   */\n  getRandom() {\n    if (this.shape === Phaser.Point) {\n      this._rnd = this.shape;\n    } else {\n      this.shape.random(this._rnd);\n    }\n\n    this._rnd.x *= this.scale.x;\n    this._rnd.y *= this.scale.y;\n\n    return this._rnd;\n  },\n\n  /**\n   * Emits the `qty` number of particles on the given emitter.\n   * Each particle is given a random location from within this zone.\n   *\n   * @method Phaser.ParticleStorm.Zones.Base#emit\n   * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n   * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n   * @param {number|array} x - The x location of the new particle.\n   * @param {number|array} y - The y location of the new particle.\n   * @param {number} qty - The quantity of particles to emit.\n   * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n   */\n  emit(emitter, key, x, y, qty) {\n    //  ------------------------------------------------\n    //  If the coordinates are arrays it uses them as min/max pairs\n    //  ------------------------------------------------\n    if (Array.isArray(x)) {\n      x = this.game.rnd.between(x[0], x[1]);\n    }\n\n    if (Array.isArray(y)) {\n      y = this.game.rnd.between(y[0], y[1]);\n    }\n\n    let particle = null;\n\n    for (let i = 0; i < qty; i++) {\n      this.shape.random(this._rnd);\n\n      particle = emitter.emitParticle(key, x + this._rnd.x * this.scale.x, y + this._rnd.y * this.scale.y, null);\n    }\n\n    return particle;\n  }\n};\n\nPhaser.ParticleStorm.Zones.Base.prototype.constructor = Phaser.ParticleStorm.Zones.Base;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Point Zone defines a point object from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Point\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [x=0] - The horizontal position of this Point Zone.\n * @param {number} [y=0] - The vertical position of this Point Zone.\n */\nPhaser.ParticleStorm.Zones.Point = function(game, x, y) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Point} shape\n   */\n  this.shape = new Phaser.Point(x, y);\n};\n\nPhaser.ParticleStorm.Zones.Point.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Point.prototype.constructor = Phaser.ParticleStorm.Zones.Point;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Rectangle Zone defines a rectangle object from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Rectangle\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [width=0] - The width of the Rectangle. Should always be either zero or a positive value.\n * @param {number} [height=0] - The height of the Rectangle. Should always be either zero or a positive value.\n */\nPhaser.ParticleStorm.Zones.Rectangle = function(game, width, height) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Rectangle} shape\n   */\n  this.shape = new Phaser.Rectangle(0, 0, width, height);\n};\n\nPhaser.ParticleStorm.Zones.Rectangle.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Rectangle.prototype.constructor = Phaser.ParticleStorm.Zones.Rectangle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Circle Zone defines a circular area from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Circle\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [radius=0] - The radius of the circle in pixels.\n */\nPhaser.ParticleStorm.Zones.Circle = function(game, radius) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Circle} shape\n   */\n  this.shape = new Phaser.Circle(0, 0, radius * 2);\n};\n\nPhaser.ParticleStorm.Zones.Circle.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Circle.prototype.constructor = Phaser.ParticleStorm.Zones.Circle;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An Ellipse Zone defines an elliptical area from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Ellipse\n * @constructor\n * @extends Phaser.ParticleStorm.Zones.Base\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [width=0] - The overall width of this ellipse.\n * @param {number} [height=0] - The overall height of this ellipse.\n */\nPhaser.ParticleStorm.Zones.Ellipse = function(game, width, height) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Ellipse} shape\n   */\n  this.shape = new Phaser.Ellipse(0, 0, width, height);\n};\n\nPhaser.ParticleStorm.Zones.Ellipse.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Ellipse.prototype.constructor = Phaser.ParticleStorm.Zones.Ellipse;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Line Zone defines a line segment from within which particles can be emitted.\n *\n * @class Phaser.ParticleStorm.Zones.Line\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {number} [x1=0] - The x coordinate of the start of the line.\n * @param {number} [y1=0] - The y coordinate of the start of the line.\n * @param {number} [x2=0] - The x coordinate of the end of the line.\n * @param {number} [y2=0] - The y coordinate of the end of the line.\n */\nPhaser.ParticleStorm.Zones.Line = function(game, x1, y1, x2, y2) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The Phaser geometry primitive this zone uses.\n   * @property {Phaser.Line} shape\n   */\n  this.shape = new Phaser.Line(x1, y1, x2, y2);\n};\n\nPhaser.ParticleStorm.Zones.Line.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Line.prototype.constructor = Phaser.ParticleStorm.Zones.Line;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Spline Zone. A spline consists of a set of points through which a path is\n * constructed. Particles can be emitted anywhere along this path.\n *\n * The points can be set from a variety of formats:\n *\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\n * - An array of objects with public x/y properties: `[ { x: 0, y: 0 }, ...]`\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\n *\n * @class Phaser.ParticleStorm.Zones.Spline\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {integer} [mode=0] - The type of spline to create. 0 = linear, 1 = bezier and 2 = catmull.\n * @param {number} [resolution=1000] - The resolution of the spline. Higher values generate more points during path interpolation.\n * @param {boolean} [closed=true] - A closed path loops from the final point back to the start again.\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n */\nPhaser.ParticleStorm.Zones.Spline = function(game, mode, resolution, closed, points) {\n  if (mode === undefined) {\n    mode = 0;\n  }\n  if (resolution === undefined) {\n    resolution = 1000;\n  }\n  if (closed === undefined) {\n    closed = true;\n  }\n\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * Reference to the Phaser.Math class.\n   * @property {Phaser.Math} math\n   */\n  this.math = this.game.math;\n\n  /**\n   * An object holding the point values.\n   * @property {object} points\n   */\n  this.points = { x: [], y: [] };\n\n  /**\n   * An array containing the interpolated path values.\n   * @property {array} path\n   */\n  this.path = [];\n\n  /**\n   * The resolution controls how tightly packed together the interpolated results are.\n   * @property {integer} resolution\n   */\n  this.resolution = resolution;\n\n  /**\n   * The type of spline. 0 = linear, 1 = bezier and 2 = catmull.\n   * @property {integer} mode\n   */\n  this.mode = mode;\n\n  /**\n   * A closed path loops from the final point back to the start again.\n   * @property {boolean} closed\n   */\n  this.closed = closed;\n\n  /**\n   * @property {number} mult - Internal index var.\n   * @private\n   */\n  this.mult = 0;\n\n  this.update(points);\n};\n\nPhaser.ParticleStorm.Zones.Spline.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Spline.prototype.constructor = Phaser.ParticleStorm.Zones.Spline;\n\n/**\n * Updates the spline path data. This clears the path and rebuilds it based on\n * the points given.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#update\n * @param {Phaser.Point[]|number[]|...Phaser.Point|...number} points - An array of points to use for the spline.\n *        These can also be set later via `ParticleStorm.Zones.Spline.setTo`.\n * @return {Phaser.ParticleStorm.Zones.Spline} This zone.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.update = function(points) {\n  this.points = { x: [], y: [] };\n  this.path = [];\n\n  for (var i = 0; i < points.length; i++) {\n    this.points.x.push(points[i].x);\n    this.points.y.push(points[i].y);\n  }\n\n  if (this.closed) {\n    this.points.x.push(points[0].x);\n    this.points.y.push(points[0].y);\n  }\n\n  //  Now loop through the points and build the path data\n  let ix = 0;\n  const x = 1 / this.resolution;\n\n  for (var i = 0; i <= 1; i += x) {\n    if (this.mode === 0) {\n      var px = this.math.linearInterpolation(this.points.x, i);\n      var py = this.math.linearInterpolation(this.points.y, i);\n    } else if (this.mode === 1) {\n      var px = this.math.bezierInterpolation(this.points.x, i);\n      var py = this.math.bezierInterpolation(this.points.y, i);\n    } else if (this.mode === 2) {\n      var px = this.math.catmullRomInterpolation(this.points.x, i);\n      var py = this.math.catmullRomInterpolation(this.points.y, i);\n    }\n\n    const node = { x: px, y: py, angle: 0 };\n\n    if (ix > 0) {\n      node.angle = this.math.angleBetweenPoints(this.path[ix - 1], node);\n    }\n\n    this.path.push(node);\n\n    ix++;\n  }\n\n  this.mult = this.path.length / 100;\n\n  return this;\n};\n\n/**\n * Gets a random point from this path.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#getRandom\n * @return {object} A point from the path. The object contains public x, y and angle properties.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.getRandom = function() {\n  return this.game.rnd.pick(this.path);\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n *\n * Each particle has a random location from the path of this spline.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.emit = function(emitter, key, x, y, qty) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let rnd = null;\n  let particle = null;\n\n  for (let i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.path);\n\n    particle = emitter.emitParticle(key, x + rnd.x, y + rnd.y);\n  }\n\n  return particle;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n *\n * Each particle has its location based on the percent argument.\n * For example a percent value of 0 will emit a particle right at the\n * start of the spline, where-as a percent value of 50 will emit a\n * particle half-way along the spline.\n *\n * @method Phaser.ParticleStorm.Zones.Spline#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {number} percent - The distance along the path to emit the particles from. Between 0 and 100.\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Spline.prototype.emitPercent = function(emitter, key, x, y, qty, percent) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let particle = null;\n\n  percent = Math.floor(percent * this.mult);\n\n  for (let i = 0; i < qty; i++) {\n    const path = this.path[percent];\n\n    if (path) {\n      particle = emitter.emitParticle(key, x + path.x, y + path.y);\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Text Zone. This is a special kind of zone that scans the pixel data of the given\n * Text object and uses it to emit particles from.\n *\n * Based on the type of renderer being used with this Text zone you can emit particles\n * based on the pixels in the text, optionally tinting and setting their alpha to match.\n *\n * @class Phaser.ParticleStorm.Zones.Text\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {Phaser.Text} text - The Text object used to populate this zone.\n */\nPhaser.ParticleStorm.Zones.Text = function(game, text) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The BitmapData object which is used to populate this zone.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = new Phaser.BitmapData(game, 'ParticleStorm.Text');\n\n  /**\n   * A reference to the Phaser.Text object that populates the data in this zone.\n   * @property {Phaser.Text} text\n   */\n  this.text = text;\n\n  /**\n   * This array holds all of the pixel color data from the pixels that were\n   * scanned (i.e. non-transparent pixels). It is used internally and should\n   * not usually be modified directly.\n   * @property {array} points\n   */\n  this.points = [];\n\n  this.update(text);\n};\n\nPhaser.ParticleStorm.Zones.Text.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Text.prototype.constructor = Phaser.ParticleStorm.Zones.Text;\n\n/**\n * Updates the contents of this zone. It resets the `points` array, clearing previous\n * pixel data. If a `text` argument was provided the new Text object is loaded, then it has all\n * pixels scanned and stored in the points array.\n *\n * The scale of the Text object is reset to 1:1 before the pixel data is scanned. The scale\n * is restored again once the scan is complete. This zone is also scaled to match the scale\n * of the Text object given to it.\n *\n * If you don't provide a `text` argument then it has the effect of re-scanning the current\n * Text object, which is useful if you've modified it in any way (for example by changing\n * the text value.)\n *\n * @method Phaser.ParticleStorm.Zones.Text#update\n * @param {Phaser.Text} [text] - The Text object used to populate this zone.\n * @return {Phaser.ParticleStorm.Zones.Text} This zone.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.update = function(text) {\n  if (text !== undefined) {\n    this.text = text;\n  } else {\n    text = this.text;\n  }\n\n  //  Store the Text object properties before we reset them\n\n  const tx = text.x;\n  const ty = text.y;\n\n  const sx = text.scale.x;\n  const sy = text.scale.y;\n\n  //  Write the Text to the bmd\n\n  text.x = 0;\n  text.y = 0;\n\n  text.scale.set(1);\n\n  this.points = [];\n\n  this.bmd.load(text);\n\n  this.bmd.processPixelRGB(this.addPixel, this);\n\n  this.scale = new Phaser.Point(sx, sy);\n\n  //  Restore the Text object properties\n\n  text.x = tx;\n  text.y = ty;\n\n  text.scale.set(sx, sy);\n\n  return this;\n};\n\n/**\n * Internal method used by the processPixelRGB call. Checks if the given\n * color alpha is above `alphaThreshold` and if so it adds it to the\n * points array.\n *\n * @method Phaser.ParticleStorm.Zones.Text#addPixel\n * @param {object} color - The color object created by the processPixelRGB method.\n * @param {number} x - The x coordinate of the pixel within the image.\n * @param {number} y - The y coordinate of the pixel within the image.\n * @return {boolean} This method must always return false.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.addPixel = function(color, x, y) {\n  if (color.a > this.alphaThreshold) {\n    this.points.push({ x, y, color: { r: color.r, g: color.g, b: color.b, a: color.a / 255 } });\n  }\n\n  return false;\n};\n\n/**\n * Gets a single random pixel data object from the text.\n *\n * The object contains x and y properties relating to its position within the text.\n * It also contains a color object containing r, g, b and a properties for the red,\n * green, blue and alpha values of the pixel respectively.\n *\n * @method Phaser.ParticleStorm.Zones.Text#getRandom\n * @return {object} A pixel data object.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.getRandom = function() {\n  const rnd = this.game.rnd.pick(this.points);\n\n  rnd.x *= this.scale.x;\n  rnd.y *= this.scale.y;\n\n  return rnd;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n * Each particle is given a random location from within this zone.\n *\n * @method Phaser.ParticleStorm.Zones.Text#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.emit = function(emitter, key, x, y, qty, setAlpha, setColor) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let rnd = null;\n  let particle = null;\n\n  for (let i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.points);\n\n    particle = emitter.emitParticle(key, x + rnd.x * this.scale.x, y + rnd.y * this.scale.y);\n\n    if (particle) {\n      if (setAlpha && rnd.color.a < 1) {\n        particle.color.alpha.value = rnd.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(rnd.color.r, rnd.color.g, rnd.color.b, rnd.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * Emits a particle for every pixel in this text object.\n * The step and spacing arguments control the iteration through the pixels.\n *\n * @method Phaser.ParticleStorm.Zones.Text#emitFull\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} step - Controls the iteration through the pixel data.\n * @param {number|array} spacing - The spacing between the particle coordinates.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Text.prototype.emitFull = function(emitter, key, x, y, step, spacing, setAlpha, setColor) {\n  if (step === undefined) {\n    step = 1;\n  }\n\n  let sx = 1;\n  let sy = 1;\n\n  if (Array.isArray(spacing)) {\n    sx = spacing[0];\n    sy = spacing[1];\n  } else if (typeof spacing === 'number') {\n    sx = spacing;\n    sy = spacing;\n  }\n\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let point = null;\n  let particle = null;\n\n  for (let i = 0; i < this.points.length; i += step) {\n    point = this.points[i];\n\n    const px = x + point.x * this.scale.x * (sx / step);\n    const py = y + point.y * this.scale.y * (sy / step);\n\n    particle = emitter.emitParticle(key, px, py);\n\n    if (particle) {\n      if (setAlpha && point.color.a < 1) {\n        particle.color.alpha.value = point.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(point.color.r, point.color.g, point.color.b, point.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * An Image Zone. This is a special kind of zone based on the pixel data in\n * the given image.\n *\n * Based on the type of renderer being used with this Image zone you can emit particles\n * based on the pixels in the image, optionally tinting and setting their alpha to match.\n *\n * @class Phaser.ParticleStorm.Zones.Image\n * @constructor\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n */\nPhaser.ParticleStorm.Zones.Image = function(game, key) {\n  Phaser.ParticleStorm.Zones.Base.call(this, game);\n\n  /**\n   * The BitmapData object which is used to populate this zone.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = new Phaser.BitmapData(game, 'ParticleStorm.Image');\n\n  /**\n   * The key given in the constructor or calls to `update`.\n   * @property {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} key\n   * @private\n   */\n  this.key = key;\n\n  /**\n   * This array holds all of the pixel color data from the pixels that were\n   * scanned (i.e. non-transparent pixels). It is used internally and should\n   * not usually be modified directly.\n   * @property {array} points\n   */\n  this.points = [];\n\n  this.update(key);\n};\n\nPhaser.ParticleStorm.Zones.Image.prototype = Object.create(Phaser.ParticleStorm.Zones.Base.prototype);\nPhaser.ParticleStorm.Zones.Image.prototype.constructor = Phaser.ParticleStorm.Zones.Image;\n\n/**\n * Updates the contents of this zone. It resets the `points` array, clearing previous\n * pixel data. If a key argument was provided the new image is loaded, then it has all\n * pixels scanned and stored in the points array.\n *\n * If you don't provide a key argument then it has the effect of re-scanning the current\n * image, which is useful if you've modified the image or BitmapData directly.\n *\n * @method Phaser.ParticleStorm.Zones.Image#update\n * @param {Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string} [key] - The object that\n *     will be used to create this Image zone. If you give a string it will try and find the Image in the Game.Cache first.\n * @return {Phaser.ParticleStorm.Zones.Image} This zone.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.update = function(key) {\n  if (key === undefined) {\n    key = this.key;\n  }\n\n  this.points = [];\n\n  this.bmd.load(key);\n\n  this.bmd.processPixelRGB(this.addPixel, this);\n\n  return this;\n};\n\n/**\n * Internal method used by the processPixelRGB call. Checks if the given\n * color alpha is above `alphaThreshold` and if so it adds it to the\n * points array.\n *\n * @method Phaser.ParticleStorm.Zones.Image#addPixel\n * @param {object} color - The color object created by the processPixelRGB method.\n * @param {number} x - The x coordinate of the pixel within the image.\n * @param {number} y - The y coordinate of the pixel within the image.\n * @return {boolean} This method must always return false.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.addPixel = function(color, x, y) {\n  if (color.a > this.alphaThreshold) {\n    this.points.push({ x, y, color: { r: color.r, g: color.g, b: color.b, a: color.a / 255 } });\n  }\n\n  return false;\n};\n\n/**\n * Gets a single random pixel data object from the image.\n *\n * The object contains x and y properties relating to its position within the image.\n * It also contains a color object containing r, g, b and a properties for the red,\n * green, blue and alpha values of the pixel respectively.\n *\n * @method Phaser.ParticleStorm.Zones.Image#getRandom\n * @return {object} A pixel data object.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.getRandom = function() {\n  const rnd = this.game.rnd.pick(this.points);\n\n  rnd.x *= this.scale.x;\n  rnd.y *= this.scale.y;\n\n  return rnd;\n};\n\n/**\n * Emits the `qty` number of particles on the given emitter.\n * Each particle is given a random location from within this zone.\n *\n * @method Phaser.ParticleStorm.Zones.Image#emit\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} qty - The quantity of particles to emit.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.emit = function(emitter, key, x, y, qty, setAlpha, setColor) {\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let rnd = null;\n  let particle = null;\n\n  for (let i = 0; i < qty; i++) {\n    rnd = this.game.rnd.pick(this.points);\n\n    particle = emitter.emitParticle(key, x + rnd.x * this.scale.x, y + rnd.y * this.scale.y);\n\n    if (particle) {\n      if (setAlpha && rnd.color.a < 1) {\n        particle.color.alpha.value = rnd.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(rnd.color.r, rnd.color.g, rnd.color.b, rnd.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * Emits a particle for every pixel in this image.\n * The step and spacing arguments control the iteration through the pixels.\n *\n * @method Phaser.ParticleStorm.Zones.Image#emitFull\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter containing the particles to be emitted from this zone.\n * @param {string} key - The key of the data that the particle will use to obtain its emission values from.\n * @param {number} x - The x location of the new particle.\n * @param {number} y - The y location of the new particle.\n * @param {number} step - Controls the iteration through the pixel data.\n * @param {number|array} spacing - The spacing between the particle coordinates.\n * @param {boolean} setAlpha - Should the zone set the alpha of the particle?\n * @param {boolean} setColor - Should the zone set the tint of the particle?\n * @return {Phaser.ParticleStorm.Particle} The particle that was emitted. If more than one was emitted it returns the last particle.\n */\nPhaser.ParticleStorm.Zones.Image.prototype.emitFull = function(emitter, key, x, y, step, spacing, setAlpha, setColor) {\n  if (step === undefined) {\n    step = 1;\n  }\n\n  let sx = 1;\n  let sy = 1;\n\n  if (Array.isArray(spacing)) {\n    sx = spacing[0];\n    sy = spacing[1];\n  } else if (typeof spacing === 'number') {\n    sx = spacing;\n    sy = spacing;\n  }\n\n  //  ------------------------------------------------\n  //  If the coordinates are arrays it uses them as min/max pairs\n  //  ------------------------------------------------\n  if (Array.isArray(x)) {\n    x = this.game.rnd.between(x[0], x[1]);\n  }\n\n  if (Array.isArray(y)) {\n    y = this.game.rnd.between(y[0], y[1]);\n  }\n\n  let point = null;\n  let particle = null;\n\n  for (let i = 0; i < this.points.length; i += step) {\n    point = this.points[i];\n\n    const px = x + point.x * this.scale.x * (sx / step);\n    const py = y + point.y * this.scale.y * (sy / step);\n\n    particle = emitter.emitParticle(key, px, py);\n\n    if (particle) {\n      if (setAlpha && point.color.a < 1) {\n        particle.color.alpha.value = point.color.a;\n      }\n\n      if (setColor) {\n        particle.color.setColor(point.color.r, point.color.g, point.color.b, point.color.a);\n      }\n    }\n  }\n\n  return particle;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Texture control belongs to a single particle and controls all aspects of its texture.\n * It allows you to control the texture, animation frame and z-index in display lists.\n *\n * @class Phaser.ParticleStorm.Controls.Texture\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Texture = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * A reference to the Phaser.RandomDataGenerator which several methods in this\n   * control require.\n   * @property {Phaser.RandomDataGenerator} rnd\n   */\n  this.rnd = particle.emitter.game.rnd;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * Particles that are spawned within a display list (such as Sprite particles) can\n   * optionally be 'sent to the back' of the list upon being spawned.\n   * @property {boolean} sendToBack\n   * @default\n   */\n  this.sendToBack = false;\n\n  /**\n   * Particles that are spawned within a display list (such as Sprite particles) can\n   * optionally be 'bought to the front' of the list upon being spawned.\n   * @property {boolean} bringToTop\n   * @default\n   */\n  this.bringToTop = true;\n\n  /**\n   * The key of the image this particle uses for rendering, if any.\n   * @property {string} key\n   * @default\n   */\n  this.key = null;\n\n  /**\n   * The current numeric frame of this particle texture, if using a sprite sheet.\n   * @property {number} frame\n   * @default\n   */\n  this.frame = undefined;\n\n  /**\n   * The current frame name of this particles texture, if using an atlas.\n   * @property {string} frameName\n   * @default\n   */\n  this.frameName = undefined;\n\n  /**\n   * The scale mode used by the texture.\n   * @property {integer} scaleMode\n   * @default\n   */\n  this.scaleMode = Phaser.scaleModes.DEFAULT;\n};\n\nPhaser.ParticleStorm.Controls.Texture.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#reset\n   */\n  reset() {\n    this.sendToBack = false;\n    this.bringToTop = true;\n\n    this.key = '__default';\n\n    this.frame = undefined;\n    this.frameName = undefined;\n\n    this.scaleMode = Phaser.scaleModes.DEFAULT;\n  },\n\n  /**\n   * Populates all aspects of this control to its particle that apply.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#init\n   */\n  init(data) {\n    //  ------------------------------------------------\n    //  Send to Back / Bring to Front (boolean)\n    //  ------------------------------------------------\n\n    if (data.sendToBack) {\n      this.sendToBack = data.sendToBack;\n    } else if (data.bringToTop) {\n      this.bringToTop = data.bringToTop;\n    }\n\n    //  ------------------------------------------------\n    //  Particle image (string or array) with optional Frame\n    //  ------------------------------------------------\n\n    if (data.image) {\n      if (Array.isArray(data.image)) {\n        this.key = this.rnd.pick(data.image);\n      } else {\n        this.key = data.image;\n      }\n    }\n\n    //  Allows for single frame setting (index or string based, both work)\n    if (data.frame !== undefined) {\n      let f = data.frame;\n\n      if (Array.isArray(data.frame)) {\n        f = this.rnd.pick(data.frame);\n      }\n\n      if (this.graph.isNumeric(f)) {\n        this.frame = f;\n      } else {\n        this.frameName = f;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Scale Mode\n    //  ------------------------------------------------\n\n    if (data.scaleMode) {\n      const sm = data.scaleMode.toUpperCase();\n\n      if (sm === 'LINEAR') {\n        this.scaleMode = Phaser.scaleModes.LINEAR;\n      } else if (sm === 'NEAREST') {\n        this.scaleMode = Phaser.scaleModes.NEAREST;\n      }\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all texture controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Texture#step\n   * @param {object} data - The particle data object.\n   * @param {Phaser.Sprite} [sprite] - The particle sprite.\n   */\n  step(data, sprite) {\n    //  ------------------------------------------------\n    //  Animation\n    //  ------------------------------------------------\n\n    if (this.particle.emitter.renderType === Phaser.ParticleStorm.SPRITE && data.animations !== undefined) {\n      const names = [];\n\n      for (const name in data.animations) {\n        const anim = data.animations[name];\n\n        let frames = null;\n        let numeric = true;\n\n        if (anim.frames !== undefined) {\n          if (Array.isArray(anim.frames)) {\n            frames = anim.frames;\n          } else {\n            frames = Phaser.Animation.generateFrameNames(\n              anim.frames.prefix,\n              anim.frames.start,\n              anim.frames.stop,\n              anim.frames.suffix,\n              anim.frames.zeroPad\n            );\n          }\n\n          if (typeof frames[0] === 'string') {\n            numeric = false;\n          }\n        }\n\n        const frameRate = anim.frameRate === undefined ? 60 : anim.frameRate;\n        const loop = anim.loop === undefined ? false : anim.loop;\n\n        sprite.animations.add(name, frames, frameRate, loop, numeric);\n\n        names.push(name);\n      }\n\n      if (names.length > 0) {\n        if (data.play !== undefined) {\n          sprite.play(this.rnd.pick(names));\n        } else {\n          sprite.play(names[0]);\n        }\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Z Order\n    //  ------------------------------------------------\n\n    if (this.sendToBack) {\n      sprite.sendToBack();\n    } else if (this.bringToTop) {\n      sprite.bringToTop();\n    }\n  }\n};\n\nPhaser.ParticleStorm.Controls.Texture.prototype.constructor = Phaser.ParticleStorm.Controls.Texture;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Color control belongs to a single particle and controls all aspects of its color.\n * It allows you to control the color channels, alpha, tint, hsv and other properties.\n *\n * @class Phaser.ParticleStorm.Controls.Color\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Color = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The red color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} red\n   */\n  this.red = {};\n\n  /**\n   * The green color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} green\n   */\n  this.green = {};\n\n  /**\n   * The blue color channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_255 object.\n   * @property {object} blue\n   */\n  this.blue = {};\n\n  /**\n   * The alpha channel control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_1 object.\n   * @property {object} alpha\n   */\n  this.alpha = {};\n\n  /**\n   * The hsv control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE_359 object.\n   * @property {object} hsv\n   */\n  this.hsv = {};\n\n  /**\n   * A local helper object which stores HSV color modes for emitter renderers to use.\n   * This is a reference to the array stored in Phaser.ParticleStorm.\n   *\n   * @property {array} hsvData\n   * @protected\n   */\n  this.hsvData = this.particle.emitter.parent.hsv;\n\n  /**\n   * This pre-calculated tint value.\n   * @property {integer} tint\n   */\n  this.tint = 0;\n\n  /**\n   * A flag telling the renderer if a tint should be applied or not.\n   * @property {boolean} isTinted\n   */\n  this.isTinted = false;\n\n  /**\n   * This pre-calculated rgba string.\n   * @property {string} rgba\n   */\n  this.rgba = 'rgba(0, 0, 0, 1)';\n\n  /**\n   * The blend mode being used by the particle.\n   * This is a reference to a ParticleStorm.blendModeMap entry.\n   * @property {array} blendMode\n   */\n  this.blendMode = this.particle.emitter.parent.blendModeMap.NORMAL;\n};\n\nPhaser.ParticleStorm.Controls.Color.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#reset\n   */\n  reset() {\n    this.red = Object.create(Phaser.ParticleStorm.BASE_255);\n    this.green = Object.create(Phaser.ParticleStorm.BASE_255);\n    this.blue = Object.create(Phaser.ParticleStorm.BASE_255);\n\n    this.alpha = Object.create(Phaser.ParticleStorm.BASE_1);\n\n    this.tint = 0xffffff;\n    this.isTinted = false;\n\n    this.isHSV = false;\n    this.hsv = Object.create(Phaser.ParticleStorm.BASE_359);\n\n    this.rgba = 'rgba(0, 0, 0, 1)';\n\n    this.blendMode = this.particle.emitter.parent.blendModeMap.NORMAL;\n  },\n\n  /**\n   * Takes a particle data object and populates all aspects of this control\n   * that it applies to.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#init\n   * @param {object} data - The particle data.\n   */\n  init(data) {\n    let tint = false;\n\n    //  ------------------------------------------------\n    //  HSV\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('hsv')) {\n      if (typeof data.hsv === 'number') {\n        this.hsv.value = data.hsv;\n      } else {\n        this.graph.fromData(data.hsv, this.hsv);\n      }\n\n      tint = true;\n      this.isHSV = true;\n    } else {\n      //  ------------------------------------------------\n      //  RGB\n      //  ------------------------------------------------\n\n      if (data.hasOwnProperty('red')) {\n        if (typeof data.red === 'number') {\n          this.red.value = data.red;\n        } else {\n          this.graph.fromData(data.red, this.red);\n        }\n\n        tint = true;\n      }\n\n      if (data.hasOwnProperty('green')) {\n        if (typeof data.green === 'number') {\n          this.green.value = data.green;\n        } else {\n          this.graph.fromData(data.green, this.green);\n        }\n\n        tint = true;\n      }\n\n      if (data.hasOwnProperty('blue')) {\n        if (typeof data.blue === 'number') {\n          this.blue.value = data.blue;\n        } else {\n          this.graph.fromData(data.blue, this.blue);\n        }\n\n        tint = true;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Alpha\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('alpha')) {\n      if (typeof data.alpha === 'number') {\n        this.alpha.value = data.alpha;\n      } else {\n        this.graph.fromData(data.alpha, this.alpha);\n      }\n    }\n\n    this.red.value = Phaser.Math.clamp(this.red.value, 0, 255);\n    this.green.value = Phaser.Math.clamp(this.green.value, 0, 255);\n    this.blue.value = Phaser.Math.clamp(this.blue.value, 0, 255);\n    this.alpha.value = Phaser.Math.clamp(this.alpha.value, 0, 1);\n    this.hsv.value = Phaser.Math.clamp(this.hsv.value, 0, 359);\n\n    if (this.particle.emitter.renderType !== Phaser.ParticleStorm.PIXEL) {\n      //  We don't tint pixels\n      this.isTinted = tint;\n    }\n\n    if (data.blendMode) {\n      this.blendMode = this.particle.emitter.parent.blendModeMap[data.blendMode.toUpperCase()];\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all color controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#step\n   */\n  step() {\n    const { life } = this.particle;\n\n    if (this.isHSV) {\n      this.hsv.value += this.hsv.delta;\n      this.hsv.calc = Phaser.Math.clamp(Math.floor(this.hsv.initial + this.graph.getValue(this.hsv, life)), 0, 359);\n\n      this.red.value = this.hsvData[this.hsv.calc].r;\n      this.green.value = this.hsvData[this.hsv.calc].g;\n      this.blue.value = this.hsvData[this.hsv.calc].b;\n    } else {\n      this.red.value += this.red.delta;\n      this.green.value += this.green.delta;\n      this.blue.value += this.blue.delta;\n    }\n\n    this.red.calc = this.graph.getClampedValue(this.red, life);\n    this.green.calc = this.graph.getClampedValue(this.green, life);\n    this.blue.calc = this.graph.getClampedValue(this.blue, life);\n\n    if (this.isTinted) {\n      this.tint = (this.red.calc << 16) | (this.green.calc << 8) | this.blue.calc;\n    }\n\n    this.alpha.value += this.alpha.delta;\n    this.alpha.calc = Phaser.Math.clamp(this.alpha.initial + this.graph.getValue(this.alpha, life), 0, 1);\n\n    this.rgba = `rgba(${this.red.calc},${this.green.calc},${this.blue.calc},${this.alpha.calc})`;\n  },\n\n  /**\n   * Sets the color values of the red, green and blue controls.\n   *\n   * @method Phaser.ParticleStorm.Controls.Color#setColor\n   * @param {integer} r - The red color value. Between 1 and 255.\n   * @param {integer} g - The green color value. Between 1 and 255.\n   * @param {integer} b - The blue color value. Between 1 and 255.\n   * @param {integer} a - The alpha color value. Between 1 and 255.\n   */\n  setColor(r, g, b, a) {\n    this.red.value = r;\n    this.green.value = g;\n    this.blue.value = b;\n    this.alpha.value = a;\n\n    if (this.particle.emitter.renderType !== Phaser.ParticleStorm.PIXEL) {\n      //  We don't tint pixels\n      this.isTinted = true;\n    }\n\n    this.step();\n  }\n};\n\nPhaser.ParticleStorm.Controls.Color.prototype.constructor = Phaser.ParticleStorm.Controls.Color;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * The Transform control belongs to a single particle and controls all aspects of its transformation.\n * It allows you to control the position, scale, rotation, velocity and other properties.\n *\n * @class Phaser.ParticleStorm.Controls.Transform\n * @constructor\n * @param {Phaser.ParticleStorm.Particle} particle - The particle this control belongs to.\n */\nPhaser.ParticleStorm.Controls.Transform = function(particle) {\n  /**\n   * The particle this control belongs to.\n   * @property {Phaser.ParticleStorm.Particle} particle\n   */\n  this.particle = particle;\n\n  /**\n   * A reference to the Phaser.Time class.\n   * @property {Phaser.Time} time\n   */\n  this.time = particle.emitter.game.time;\n\n  /**\n   * @property {Phaser.ParticleStorm.Graph} graph - A set of useful common static functions.\n   */\n  this.graph = Phaser.ParticleStorm.Graph;\n\n  /**\n   * The horizontal position of this particle.\n   * @property {number} x\n   */\n  this.x = 0;\n\n  /**\n   * The vertical position of this particle.\n   * @property {number} y\n   */\n  this.y = 0;\n\n  /**\n   * The velocity control object. Contains x, y and facing properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} velocity\n   */\n  this.velocity = { x: null, y: null, facing: null };\n\n  /**\n   * The acceleration control object. Contains x, y and facing properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} acceleration\n   */\n  this.acceleration = { x: null, y: null, facing: null };\n\n  /**\n   * The scale control object. Contains x and y and properties.\n   * They inherits all properties of the Phaser.ParticleStorm.BASE_1 object.\n   * @property {object} scale\n   */\n  this.scale = { x: null, y: null };\n\n  /**\n   * The rotation control object.\n   * This inherits all properties of the Phaser.ParticleStorm.BASE object.\n   * @property {object} rotation\n   */\n  this.rotation = {};\n\n  /**\n   * The anchor of the particle. By default particles all have anchors set to\n   * 0.5 (i.e. their center) to assist with rotation.\n   * @property {Phaser.Point} anchor\n   */\n  this.anchor = new Phaser.Point();\n};\n\nPhaser.ParticleStorm.Controls.Transform.prototype = {\n  /**\n   * Resets this control and all properties of it. This is called automatically\n   * when its parent particle is spawned.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#reset\n   */\n  reset() {\n    this.velocity.x = Object.create(Phaser.ParticleStorm.BASE);\n    this.velocity.y = Object.create(Phaser.ParticleStorm.BASE);\n    this.velocity.facing = Object.create(Phaser.ParticleStorm.BASE_NULL);\n\n    this.acceleration.x = Object.create(Phaser.ParticleStorm.BASE);\n    this.acceleration.y = Object.create(Phaser.ParticleStorm.BASE);\n    this.acceleration.facing = Object.create(Phaser.ParticleStorm.BASE_NULL);\n\n    this.scale.x = Object.create(Phaser.ParticleStorm.BASE_1);\n    this.scale.y = Object.create(Phaser.ParticleStorm.BASE_1);\n\n    this.rotation = Object.create(Phaser.ParticleStorm.BASE);\n\n    this.anchor.set(0.5);\n  },\n\n  /**\n   * Takes a particle data object and populates all aspects of this control\n   * that it applies to.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#init\n   * @param {number} x - The horizontal position of the particle.\n   * @param {number} y - The vertical position of the particle.\n   * @param {object} data - The particle data.\n   */\n  init(x, y, data) {\n    this.x = x;\n    this.y = y;\n\n    //  ------------------------------------------------\n    //  Anchor\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('anchor')) {\n      this.anchor.set(data.anchor);\n    } else {\n      if (data.hasOwnProperty('anchorX')) {\n        this.anchor.x = data.anchorX;\n      }\n\n      if (data.hasOwnProperty('anchorY')) {\n        this.anchor.y = data.anchorY;\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Velocity\n    //  ------------------------------------------------\n\n    //  Use 'velocity' instead or in addition to 'vx' and 'vy' when those two are interlinked\n    //  (eg. when creating a radial vector from the creation point)\n\n    if (data.hasOwnProperty('velocity')) {\n      if (this.graph.isNumeric(data.velocity)) {\n        //  velocity: 2\n        this.velocity.x.value = data.velocity;\n        this.velocity.y.value = data.velocity;\n      } else if (data.velocity.hasOwnProperty('min')) {\n        //  velocity: { min: -2, max: 2 }\n        this.velocity.x.value = this.graph.getMinMax(data.velocity);\n        this.velocity.y.value = this.velocity.x.value;\n      } else if (data.velocity.radial) {\n        //  radial velocity\n        const v = this.graph.getMinMaxInitial(data.velocity);\n\n        const arcs = data.velocity.radial.arcStart;\n        const arce = data.velocity.radial.arcEnd;\n\n        if (arcs !== undefined && arce !== undefined) {\n          //  Radiate within an arc\n          const angle = ((Math.random() * (arce - arcs) + arcs) * Math.PI) / 180.0;\n          const dx = Math.sin(angle);\n          const dy = -Math.cos(angle);\n          this.velocity.x.value = dx * v;\n          this.velocity.y.value = dy * v;\n        }\n      } else {\n        //  velocity: { initial: 2, value: 3, delta: 0.1, control: {} }\n        this.velocity.x.initial = this.graph.getMinMaxInitial(data.velocity);\n        this.velocity.y.initial = this.velocity.x.initial;\n\n        this.velocity.x.value = this.graph.getMinMax(data.velocity.value);\n        this.velocity.y.value = this.velocity.x.value;\n      }\n\n      if (data.velocity.hasOwnProperty('delta')) {\n        this.velocity.x.delta = this.graph.getMinMax(data.velocity.delta);\n        this.velocity.y.delta = this.velocity.x.delta;\n      }\n\n      if (data.velocity.hasOwnProperty('control')) {\n        this.velocity.x.control = data.velocity.control;\n        this.velocity.y.control = data.velocity.control;\n      }\n\n      //  If they defined vx/vy AND velocity then the vx/vy settings over-ride velocity\n      if (data.hasOwnProperty('vx')) {\n        this.graph.fromData(data.vx, this.velocity.x);\n      }\n\n      if (data.hasOwnProperty('vy')) {\n        this.graph.fromData(data.vy, this.velocity.y);\n      }\n    } else if (data.hasOwnProperty('target')) {\n      //  ------------------------------------------------\n      //  Target\n      //  ------------------------------------------------\n\n      this.particle.target(data.target);\n    } else {\n      //  ------------------------------------------------\n      //  vx / vy\n      //  ------------------------------------------------\n\n      //  Avoids calling fromData if we know we're just dealing with a number\n      if (typeof data.vx === 'number') {\n        this.velocity.x.value = data.vx;\n      } else {\n        this.graph.fromData(data.vx, this.velocity.x);\n      }\n\n      if (typeof data.vy === 'number') {\n        this.velocity.y.value = data.vy;\n      } else {\n        this.graph.fromData(data.vy, this.velocity.y);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Facing Acceleration / Velocity\n    //  ------------------------------------------------\n\n    //  Avoids calling fromData if we know we're just dealing with a number\n    if (typeof data.facingVelocity === 'number') {\n      this.velocity.facing.value = data.facingVelocity;\n    } else {\n      this.graph.fromData(data.facingVelocity, this.velocity.facing);\n    }\n\n    if (typeof data.facingAcceleration === 'number') {\n      this.acceleration.facing.value = data.facingAcceleration;\n    } else {\n      this.graph.fromData(data.facingAcceleration, this.acceleration.facing);\n    }\n\n    //  ------------------------------------------------\n    //  Acceleration\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('acceleration')) {\n      //  Use 'acceleration' when the ax and ay are interlinked\n      this.graph.fromData(data.acceleration, this.acceleration.x);\n      this.graph.fromData(data.acceleration, this.acceleration.y);\n    } else {\n      //  Avoids calling fromData if we know we're just dealing with a number\n      if (typeof data.ax === 'number') {\n        this.acceleration.x.value = data.ax;\n      } else {\n        this.graph.fromData(data.ax, this.acceleration.x);\n      }\n\n      if (typeof data.ay === 'number') {\n        this.acceleration.y.value = data.ay;\n      } else {\n        this.graph.fromData(data.ay, this.acceleration.y);\n      }\n    }\n\n    //  ------------------------------------------------\n    //  Scale and Rotation\n    //  ------------------------------------------------\n\n    if (data.hasOwnProperty('scale')) {\n      this.graph.fromData(data.scale, this.scale.x);\n      this.graph.clone(this.scale.x, this.scale.y);\n    } else {\n      if (typeof data.scaleX === 'number') {\n        this.scale.x.value = data.scaleX;\n      } else {\n        this.graph.fromData(data.scaleX, this.scale.x);\n      }\n\n      if (typeof data.scaleY === 'number') {\n        this.scale.y.value = data.scaleY;\n      } else {\n        this.graph.fromData(data.scaleY, this.scale.y);\n      }\n    }\n\n    if (typeof data.rotation === 'number') {\n      this.rotation.value = data.rotation;\n    } else {\n      this.graph.fromData(data.rotation, this.rotation);\n    }\n\n    const { parent } = this.particle;\n\n    if (parent && parent.emit && parent.emit.inherit) {\n      this.inherit(parent);\n    }\n  },\n\n  /**\n   * Adjust Particle parameters according to the inheritable properties\n   * of the parent particle.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#inherit\n   * @param {Phaser.ParticleStorm.Particle} - The Parent particle to inherit from.\n   */\n  inherit(parent) {\n    const { inherit } = parent.emit;\n    let all = false;\n\n    if (typeof inherit === 'boolean') {\n      all = true;\n    }\n\n    if (all || inherit.vx || inherit.velocity) {\n      this.graph.clone(parent.transform.velocity.x, this.velocity.x);\n    }\n\n    if (all || inherit.vy || inherit.velocity) {\n      this.graph.clone(parent.transform.velocity.y, this.velocity.y);\n    }\n\n    if (all || inherit.facingVelocity) {\n      this.graph.clone(parent.transform.velocity.facing, this.velocity.facing);\n    }\n\n    if (all || inherit.scaleX || inherit.scale) {\n      this.graph.clone(parent.transform.scale.x, this.scale.x);\n    }\n\n    if (all || inherit.scaleY || inherit.scale) {\n      this.graph.clone(parent.transform.scale.y, this.scale.y);\n    }\n\n    if (all || inherit.rotation) {\n      this.graph.clone(parent.transform.rotation, this.rotation);\n    }\n\n    if (inherit.angularVelocity) {\n      const r = ((parent.transform.rotation.initial + parent.transform.rotation.value) * Math.PI) / 180;\n      this.velocity.x.initial = Math.sin(r);\n      this.velocity.y.initial = -Math.cos(r);\n    }\n  },\n\n  /**\n   * Called automatically when the parent particle updates. It applies\n   * all transform controls to the particle based on its lifespan.\n   *\n   * @method Phaser.ParticleStorm.Controls.Transform#step\n   */\n  step() {\n    const { life } = this.particle;\n\n    this.scale.x.value += this.scale.x.delta;\n    this.scale.y.value += this.scale.y.delta;\n\n    this.rotation.value += this.rotation.delta;\n\n    this.rotation.calc = ((this.rotation.initial + this.graph.getValue(this.rotation, life)) * Math.PI) / 180;\n\n    this.scale.x.calc = this.scale.x.initial + this.graph.getValue(this.scale.x, life);\n    this.scale.y.calc = this.scale.y.initial + this.graph.getValue(this.scale.y, life);\n\n    //  Bail out if fresh\n    if (life === 0) {\n      return;\n    }\n\n    let r = 0;\n    let v = 0;\n\n    if (this.acceleration.facing.value !== null) {\n      //  Add 90 degrees because particle rotation 0 is right-handed\n      this.acceleration.facing.value += this.acceleration.facing.delta;\n      r = this.rotation.calc + ((90 + this.acceleration.facing.offset) * Math.PI) / 180;\n      v = this.acceleration.facing.initial + this.graph.getValue(this.acceleration.facing, life);\n      this.velocity.x.value += v * Math.sin(r);\n      this.velocity.y.value += v * -Math.cos(r);\n    }\n\n    this.acceleration.x.value += this.acceleration.x.delta;\n    this.acceleration.y.value += this.acceleration.y.delta;\n\n    this.velocity.x.value +=\n      this.velocity.x.delta + this.acceleration.x.initial + this.graph.getValue(this.acceleration.x, life);\n    this.velocity.y.value +=\n      this.velocity.y.delta + this.acceleration.y.initial + this.graph.getValue(this.acceleration.y, life);\n\n    if (this.velocity.facing.value !== null) {\n      //  Add 90 degrees because particle rotation 0 is right-handed\n      this.velocity.facing.value += this.velocity.facing.delta;\n      r = this.rotation.calc + ((90 + this.velocity.facing.offset) * Math.PI) / 180;\n      v = this.velocity.facing.initial + this.graph.getValue(this.velocity.facing, life);\n      this.x += v * Math.sin(r);\n      this.y += v * -Math.cos(r);\n    }\n\n    this.x += this.velocity.x.initial + this.graph.getValue(this.velocity.x, life);\n    this.y += this.velocity.y.initial + this.graph.getValue(this.velocity.y, life);\n  }\n};\n\nPhaser.ParticleStorm.Controls.Transform.prototype.constructor = Phaser.ParticleStorm.Controls.Transform;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\nPhaser.ParticleStorm.Renderer = {};\n\n/**\n * The base class which all ParticleStorm renderers must extend.\n *\n * @class Phaser.ParticleStorm.Renderer.Base\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.Base = function(emitter) {\n  /**\n   * @property {Phaser.Game} game - A reference to the Phaser Game instance.\n   */\n  this.game = emitter.game;\n\n  /**\n   * @property {Phaser.ParticleStorm.Emitter} emitter - The emitter that owns this renderer.\n   */\n  this.emitter = emitter;\n\n  /**\n   * @property {Phaser.ParticleStorm} parent - The Particle Storm plugin.\n   */\n  this.parent = emitter.parent;\n\n  /**\n   * The size of a 'pixel' as used by the Pixel renderer and others that extend\n   * it. It can be any positive value from 1 up. A value of 2 means a 2x2 pixel,\n   * 3 is a 3x3 pixel and so on. At a size of 1 or 2 it uses setPixel to\n   * draw to the BitmapData. At 3+ it uses a fillRect operation.\n   * @property {integer} pixelSize\n   */\n  this.pixelSize = 1;\n};\n\nPhaser.ParticleStorm.Renderer.Base.prototype = {\n  /**\n   * Adds this Particle Renderer to the display list.\n   *\n   * You can specify a Group to add it to. If none is given it will use Phaser.World instead.\n   * If this renderer emits particle display objects such as Phaser.Sprites they will be added to the same Group.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#addToWorld\n   * @param {Phaser.Group} [group] - The Group to add this renderer to. If not specified Phaser.World is used.\n   * @return {Phaser.Image|Phaser.Sprite|Phaser.Group} The display object that contains the particle renderer.\n   */\n  addToWorld(group) {\n    group.add(this.display);\n\n    return this.display;\n  },\n\n  /**\n   * The preUpdate method of this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#preUpdate\n   */\n  preUpdate() {},\n\n  /**\n   * Adds the given particle to this renderer, to be rendered in the next update.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#add\n   * @param {Phaser.ParticleStorm.Particle} particle - Adds a particle to this renderer.\n   */\n  add() {\n    return null;\n  },\n\n  /**\n   * Updates the given particle within this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#update\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n   */\n  update(particle) {\n    return particle;\n  },\n\n  /**\n   * The postUpdate method of this renderer.\n   * Called after all updates have taken place, before the render pass.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#postUpdate\n   */\n  postUpdate() {},\n\n  /**\n   * Kills the given particle from this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#kill\n   * @param {Phaser.ParticleStorm.Particle} particle - The particle to be killed.\n   */\n  kill(particle) {\n    return particle;\n  },\n\n  /**\n   * Destroys this renderer.\n   *\n   * @method Phaser.ParticleStorm.Renderer.Base#destroy\n   */\n  destroy() {\n    this.game = null;\n  }\n};\n\nPhaser.ParticleStorm.Renderer.Base.prototype.constructor = Phaser.ParticleStorm.Renderer.Base;\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Sprite based renderer.\n *\n * @class Phaser.ParticleStorm.Renderer.Sprite\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.Sprite = function(emitter) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * A Phaser.Group that contains all particles created by this renderer.\n   * @property {Phaser.Group} display\n   */\n  this.display = this.game.make.group(null, 'particleStormSpriteRenderer');\n};\n\nPhaser.ParticleStorm.Renderer.Sprite.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.Sprite.prototype.constructor = Phaser.ParticleStorm.Renderer.Sprite;\n\n/**\n * Adds the given particle to this renderer. If the particle has a sprite property\n * then its reset and updated. If it doesn't then a new Phaser.Sprite is created,\n * belonging to this renderers display group.\n *\n * @method Phaser.ParticleStorm.Renderer.Sprite#add\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n * @return {Phaser.Sprite} This particles sprite property.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.add = function(particle) {\n  let spr = particle.sprite;\n  const { key } = particle.texture;\n  let { frame } = particle.texture;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (spr) {\n    spr.reset(particle.transform.x, particle.transform.y);\n\n    if (spr.key !== key) {\n      spr.loadTexture(key, frame);\n    } else if (particle.texture.frame !== undefined) {\n      spr.frame = frame;\n    } else if (particle.texture.frameName !== undefined) {\n      spr.frameName = frame;\n    }\n  } else {\n    spr = this.display.create(particle.transform.x, particle.transform.y, key, frame);\n  }\n\n  spr.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.blendMode = particle.color.blendMode[0];\n  spr.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  spr.visible = particle.visible;\n\n  particle.sprite = spr;\n\n  return spr;\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Sprite#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.update = function(particle) {\n  const spr = particle.sprite;\n\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    spr.visible = false;\n    return;\n  }\n\n  spr.visible = particle.visible;\n\n  spr.alpha = particle.color.alpha.calc;\n\n  spr.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  spr.x = particle.transform.x;\n  spr.y = particle.transform.y;\n};\n\n/**\n * Kills the given particle from this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#kill\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be killed.\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.kill = function(particle) {\n  if (particle.sprite) {\n    particle.sprite.kill();\n  }\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#destroy\n */\nPhaser.ParticleStorm.Renderer.Sprite.prototype.destroy = function() {\n  this.display.destroy(true);\n\n  this.emitter = null;\n\n  this.game = null;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Pixel renderer. This is a special form of the BitmapData renderer which is\n * dedicated to rendering pixel particles, rather than images or sprites.\n *\n * The size of the pixels can be controlled with the `pixelSize` property, which can\n * be changed in real-time.\n *\n * @class Phaser.ParticleStorm.Renderer.Pixel\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.Pixel = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The BitmapData object which is used to render the particles to.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = this.game.make.bitmapData(width, height);\n\n  /**\n   * A Phaser.Image that has this BitmapData set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.bmd);\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.Pixel.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.Pixel.prototype.constructor = Phaser.ParticleStorm.Renderer.Pixel;\n\n/**\n * Resizes the dimensions of the BitmapData used for rendering.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#resize\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n * @return {Phaser.ParticleStorm.Renderer.Pixel} This renderer.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.resize = function(width, height) {\n  this.bmd.resize(width, height);\n\n  return this;\n};\n\n/**\n * Clears this BitmapData. An optional `alpha` value allows you to specify\n * the amount of alpha to use when clearing. By setting values lower than 1\n * you can leave behind previous particle images, creating 'trail' like effects.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#clear\n * @param {number} [alpha=1] - The alpha color value, between 0 and 1.\n * @return {Phaser.ParticleStorm.Renderer.Pixel} This renderer.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.clear = function(alpha) {\n  this.bmd.fill(0, 0, 0, alpha);\n  this.bmd.update();\n\n  return this;\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#preUpdate\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.bmd.clear();\n    this.bmd.update();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    return;\n  }\n\n  //  We need whole numbers to render pixels\n  const x = Math.floor(particle.transform.x);\n  const y = Math.floor(particle.transform.y);\n\n  const r = particle.color.red.calc;\n  const g = particle.color.green.calc;\n  const b = particle.color.blue.calc;\n  const a = Math.floor(particle.color.alpha.calc * 255);\n\n  if (this.pixelSize > 2) {\n    this.bmd.rect(x, y, this.pixelSize, this.pixelSize, particle.color.rgba);\n  } else {\n    this.bmd.setPixel32(x, y, r, g, b, a, false);\n\n    //  2x2\n    if (this.pixelSize === 2) {\n      this.bmd.setPixel32(x + 1, y, r, g, b, a, false);\n      this.bmd.setPixel32(x, y + 1, r, g, b, a, false);\n      this.bmd.setPixel32(x + 1, y + 1, r, g, b, a, false);\n    }\n  }\n};\n\n/**\n * The postUpdate method is called automatically when all particles have\n * been rendered.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#postUpdate\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.postUpdate = function() {\n  if (this.pixelSize <= 2) {\n    this.bmd.context.putImageData(this.bmd.imageData, 0, 0);\n  }\n\n  this.bmd.dirty = true;\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.Pixel#destroy\n */\nPhaser.ParticleStorm.Renderer.Pixel.prototype.destroy = function() {\n  this.game = null;\n\n  this.display.destroy();\n\n  this.bmd.destroy();\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A BitmapData based renderer. A single BitmapData is created onto which all\n * particles are rendered directly. The renderer can be resized using the resize method.\n *\n * @class Phaser.ParticleStorm.Renderer.BitmapData\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.BitmapData = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The BitmapData object which is used to render the particles to.\n   * @property {Phaser.BitmapData} bmd\n   */\n  this.bmd = this.game.make.bitmapData(width, height);\n\n  /**\n   * A Phaser.Image that has this BitmapData set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.bmd);\n\n  /**\n   * If true then all pixel coordinates will be rounded before being rendered.\n   * This avoids sub-pixel anti-aliasing.\n   * @property {boolean} roundPx\n   * @default\n   */\n  this.roundPx = true;\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.BitmapData.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.constructor = Phaser.ParticleStorm.Renderer.BitmapData;\n\n/**\n * Resizes the dimensions of the BitmapData used for rendering.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#resize\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n * @return {Phaser.ParticleStorm.Renderer.BitmapData} This renderer.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.resize = function(width, height) {\n  this.bmd.resize(width, height);\n\n  return this;\n};\n\n/**\n * Clears this BitmapData. An optional `alpha` value allows you to specify\n * the amount of alpha to use when clearing. By setting values lower than 1\n * you can leave behind previous particle images, creating 'trail' like effects.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#clear\n * @param {number} [alpha=1] - The alpha color value, between 0 and 1.\n * @return {Phaser.ParticleStorm.Renderer.BitmapData} This renderer.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.clear = function(alpha) {\n  this.bmd.fill(0, 0, 0, alpha);\n\n  return this;\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#preUpdate\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.bmd.clear();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    return;\n  }\n\n  //  We need whole numbers to render pixels\n  const t = particle.transform;\n\n  this.bmd.copy(\n    particle.texture.key,\n    0,\n    0,\n    null,\n    null,\n    t.x,\n    t.y,\n    null,\n    null,\n    t.rotation.calc,\n    t.anchor.x,\n    t.anchor.y,\n    t.scale.x.calc,\n    t.scale.y.calc,\n    particle.color.alpha.calc,\n    particle.color.blendMode[1],\n    this.roundPx\n  );\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.BitmapData#destroy\n */\nPhaser.ParticleStorm.Renderer.BitmapData.prototype.destroy = function() {\n  this.game = null;\n\n  this.display.destroy();\n\n  this.bmd.destroy();\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A RenderTexture based renderer. Render Textures are highly optimised (under WebGL)\n * for rendering images to. This renderer works by creating a 'stamp', which takes on\n * the form of each particle and then 'stamps' itself on this RenderTexture. This avoids\n * each particle needing to have its own sprite instance.\n *\n * @class Phaser.ParticleStorm.Renderer.RenderTexture\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n * @param {integer} width - The width of the renderer. Defaults to Game.width.\n * @param {integer} height - The height of the renderer. Defaults to Game.height.\n */\nPhaser.ParticleStorm.Renderer.RenderTexture = function(emitter, width, height) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * The RenderTexture object which is used to render the particles to.\n   * @property {Phaser.RenderTexture} renderTexture\n   */\n  this.renderTexture = this.game.make.renderTexture(width, height);\n\n  /**\n   * A Phaser.Image that has this RenderTexture set as its texture.\n   * When you add this renderer to the display list it is this image\n   * that is added.\n   * @property {Phaser.Image} display\n   */\n  this.display = this.game.make.sprite(0, 0, this.renderTexture);\n\n  /**\n   * A Phaser.Image that is used as the stamp for this RenderTexture. When a\n   * particle is rendered to this RenderTexture the stamp takes on the texture\n   * and form of the particle, then 'stamps' itself on the RenderTexture.\n   * @property {Phaser.Image} stamp\n   * @protected\n   */\n  this.stamp = this.game.make.sprite(0, 0);\n\n  /**\n   * If true then this renderer automatically clears itself each update, before\n   * new particles are rendered to it. You can disable this and then call the\n   * `clear` method directly to control how and when it's cleared.\n   * @property {boolean} autoClear\n   * @default\n   */\n  this.autoClear = true;\n};\n\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.constructor = Phaser.ParticleStorm.Renderer.RenderTexture;\n\n/**\n * Clears the RenderTexture being used by this renderer. This happens automatically\n * if `autoClear` is enabled.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#clear\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.clear = function() {\n  this.renderTexture.clear();\n};\n\n/**\n * The preUpdate method of this renderer. This is called automatically by\n * the Emitter.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#preUpdate\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.preUpdate = function() {\n  if (this.autoClear) {\n    this.renderTexture.clear();\n  }\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.update = function(particle) {\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if ((particle.delay > 0 && !particle.delayVisible) || !particle.visible || particle.color.alpha.calc === 0) {\n    return;\n  }\n\n  //  Transfer settings to the drawing object\n  const { key } = particle.texture;\n  let { frame } = particle.texture;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (this.stamp.key !== key) {\n    this.stamp.loadTexture(key, frame);\n  } else if (particle.texture.frame !== undefined) {\n    this.stamp.frame = frame;\n  } else if (particle.texture.frameName !== undefined) {\n    this.stamp.frameName = frame;\n  }\n\n  this.stamp.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  this.stamp.alpha = particle.color.alpha.calc;\n\n  this.stamp.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    this.stamp.tint = particle.color.tint;\n  }\n\n  this.stamp.blendMode = particle.color.blendMode[0];\n\n  this.stamp.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  this.stamp.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  this.renderTexture.renderXY(this.stamp, particle.transform.x, particle.transform.y, false);\n};\n\n/**\n * Destroys this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.RenderTexture#destroy\n */\nPhaser.ParticleStorm.Renderer.RenderTexture.prototype.destroy = function() {\n  this.display.destroy();\n\n  this.stamp.destroy();\n\n  this.renderTexture.destroy();\n\n  this.emitter = null;\n\n  this.game = null;\n};\n\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2015 Photon Storm Ltd.\n * @license      {@link http://choosealicense.com/licenses/no-license/|No License}\n */\n\n/**\n * A Sprite Batch based renderer. Sprite Batching is a way to get extremely fast\n * drawing, especially under WebGL, by batching the particles together and reducing\n * the quantity of draw calls. It only works when every particle uses the exact same\n * Texture. If you have particles with varying textures then they will break the batch,\n * nullifying the effect of its speed. You can use texture atlases to combine different\n * frames into a single batch, but the core texture must be the same for all particles.\n *\n * @class Phaser.ParticleStorm.Renderer.SpriteBatch\n * @constructor\n * @param {Phaser.ParticleStorm.Emitter} emitter - The emitter that this renderer belongs to.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch = function(emitter) {\n  Phaser.ParticleStorm.Renderer.Base.call(this, emitter);\n\n  /**\n   * A Phaser.SpriteBatch that contains all of the particles in this renderer.\n   * @property {Phaser.SpriteBatch} display\n   */\n  this.display = this.game.make.spriteBatch();\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype = Object.create(Phaser.ParticleStorm.Renderer.Base.prototype);\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.constructor = Phaser.ParticleStorm.Renderer.SpriteBatch;\n\n/**\n * Adds the given particle to this renderer. If the particle has a sprite property\n * then its reset and updated. If it doesn't then a new Phaser.Sprite is created,\n * belonging to this renderers display.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#add\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n * @return {Phaser.Sprite} This particles sprite property.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.add = function(particle) {\n  let spr = particle.sprite;\n  const { key } = particle.texture;\n  let { frame } = particle.texture;\n\n  if (frame === undefined && particle.texture.frameName !== undefined) {\n    //  String frame\n    frame = particle.texture.frameName;\n  }\n\n  if (spr) {\n    spr.reset(particle.transform.x, particle.transform.y);\n\n    if (spr.key !== key) {\n      spr.loadTexture(key, frame);\n    } else if (particle.texture.frame !== undefined) {\n      spr.frame = frame;\n    } else if (particle.texture.frameName !== undefined) {\n      spr.frameName = frame;\n    }\n  } else {\n    spr = this.game.make.sprite(particle.transform.x, particle.transform.y, key, frame);\n  }\n\n  this.display.addChild(spr);\n\n  spr.anchor.set(particle.transform.anchor.x, particle.transform.anchor.y);\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.blendMode = particle.color.blendMode[0];\n  spr.texture.baseTexture.scaleMode = particle.texture.scaleMode;\n\n  spr.visible = particle.visible;\n\n  particle.sprite = spr;\n\n  return spr;\n};\n\n/**\n * Updates and renders the given particle to this renderer.\n *\n * @method Phaser.ParticleStorm.Renderer.SpriteBatch#update\n * @param {Phaser.ParticleStorm.Particle} particle - The particle to be updated.\n */\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.update = function(particle) {\n  const spr = particle.sprite;\n\n  //  If the particle is delayed AND should be hidden when delayed ...\n  if (particle.delay > 0 && !particle.delayVisible) {\n    spr.visible = false;\n    return;\n  }\n\n  spr.visible = particle.visible;\n\n  spr.alpha = particle.color.alpha.calc;\n\n  spr.rotation = particle.transform.rotation.calc;\n\n  if (particle.color.isTinted) {\n    spr.tint = particle.color.tint;\n  }\n\n  spr.scale.setTo(particle.transform.scale.x.calc, particle.transform.scale.y.calc);\n\n  spr.x = particle.transform.x;\n  spr.y = particle.transform.y;\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.kill = function(particle) {\n  if (particle.sprite) {\n    particle.sprite.kill();\n  }\n};\n\nPhaser.ParticleStorm.Renderer.SpriteBatch.prototype.destroy = function() {\n  this.display.destroy(true);\n\n  this.emitter = null;\n\n  this.game = null;\n};\n","import { startupCommand } from './commands/startup-command';\nimport FontLoader from './display/font-loader';\nimport LU from './display/layout-utils';\nimport Globals from './kernel/globals';\nimport './lib/particle-storm';\nimport { GameState } from './states/game-state';\nimport { PreloaderState } from './states/preloader-state';\nimport './strings';\n\nwindow.CI_API = window.CI_API || {\n  states: {},\n  PreloaderState,\n  GameState,\n  FontLoader,\n  LU,\n  CTA: null, // define CTA later\n  Globals,\n  renderer: 1 /* 0 - Auto | << 1 - Canvas >> | 2 - WebGL */\n};\n\nclass Game extends Phaser.Game {\n  constructor() {\n    super('100%', '100%', CI_API.renderer, LU.CONTAINER_NAME, null);\n  }\n}\n\n/* Load our font resources and create a new game */\nwindow.ad_begin = () => {\n  FontLoader.loadFonts(() => {\n    /**\n     * Create new game after initializing all information about loading modules.\n     * xp-assets.json is loaded as independent file in the -preview mode.\n     * May define the CTA class here as a CTA xp module.\n     */\n    xp.init(Globals.WEB_ROOT, () => {\n      // CI_API.CTA = xp.getActiveModule('cta_style', CTAView);\n      // @ts-ignore\n      CI_API.game = new Game();\n      setTimeout(() => {\n        // legologger.start(legoLoggerConfig);\n        startupCommand();\n      });\n    });\n  });\n};\n","import { AdStatus, AdViewState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\nimport { CtaModel } from './cta-model';\nimport { HintModel } from './hint-model';\nimport { LoadModel } from './load-model';\nimport { PersistentCtaModel } from './persistent-cta-model';\nimport { SoundModel } from './sound-model';\nimport { TutorialModel } from './tutorial-model';\n\nexport class AdModel extends ObservableModel {\n  constructor() {\n    super('AdModel');\n\n    this._cta = null;\n    this._hint = null;\n    this._load = null;\n    this._sound = null;\n    this._tutorial = null;\n    this._persistentCta = null;\n    this._status = AdStatus.Unknown;\n    this._viewState = AdViewState.Unknown;\n    this._retries = CI_API.Globals.PARAMS.retries;\n\n    this.makeObservable();\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  set status(value) {\n    this._status = value;\n  }\n\n  get viewState() {\n    return this._viewState;\n  }\n\n  set viewState(value) {\n    this._viewState = value;\n  }\n\n  get load() {\n    return this._load;\n  }\n\n  get hint() {\n    return this._hint;\n  }\n\n  get tutorial() {\n    return this._tutorial;\n  }\n\n  get persistentCta() {\n    return this._persistentCta;\n  }\n\n  get cta() {\n    return this._cta;\n  }\n\n  get sound() {\n    return this._sound;\n  }\n\n  get retries() {\n    return this._retries;\n  }\n\n  initialize() {\n    this._load = new LoadModel();\n  }\n\n  // CTA\n  initializeCtaModel() {\n    this._cta = new CtaModel();\n    this._cta.initialize();\n  }\n\n  destroyCtaModel() {\n    this._cta.destroy();\n    this._cta = null;\n  }\n\n  // HINT\n  initializeHintModel() {\n    this._hint = new HintModel();\n    this._hint.initialize();\n  }\n\n  destroyHintModel() {\n    this._hint.destroy();\n    this._hint = null;\n  }\n\n  // LOAD\n  initializeLoadModel() {\n    this._load = new LoadModel();\n    this._load.initialize();\n  }\n\n  destroyLoadModel() {\n    this._load.destroy();\n    this._load = null;\n  }\n\n  // TUTORIAL\n  initializeTutorialModel() {\n    this._tutorial = new TutorialModel();\n    this._tutorial.initialize();\n  }\n\n  destroyTutorialModel() {\n    this._tutorial.destroy();\n    this._tutorial = null;\n  }\n\n  // PERSISTENT_CTA\n  initializePersistentCtaModel() {\n    this._persistentCta = new PersistentCtaModel();\n    this._persistentCta.initialize();\n  }\n\n  destroyPersistentCtaModel() {\n    this._persistentCta.destroy();\n    this._persistentCta = null;\n  }\n\n  // SOUND;\n  initializeSoundModel() {\n    this._sound = new SoundModel();\n    this._sound.initialize();\n  }\n\n  destroySoundModel() {\n    this._sound.destroy();\n    this._sound = null;\n  }\n\n  decreaseRetriesCount() {\n    this._retries -= 1;\n  }\n}\n","import { GameOverReasons } from '../../constants';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nconst ctaTypesDependsOnReason = {\n  [GameOverReasons.Idled]: 'standard',\n  [GameOverReasons.ItemsToCtaReached]: 'standard'\n};\n\nexport class CtaModel extends ObservableModel {\n  constructor() {\n    super('CtaModel');\n\n    this._type = null;\n    this._visible = null;\n    this._preVisible = null;\n    this._reason = GameOverReasons.Unknown;\n\n    this.makeObservable();\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get reason() {\n    return this._reason;\n  }\n\n  get preVisible() {\n    return this._preVisible;\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  destroy() {\n    removeRunnable(this._visibilityDelayTimer);\n  }\n\n  show(reason, delay = 0) {\n    this._reason = reason;\n    this._preVisible = true;\n    this._type = ctaTypesDependsOnReason[reason]; // || CI_API.Globals.PARAMS.cta_type;\n\n    removeRunnable(this._visibilityDelayTimer);\n    this._visibilityDelayTimer = delayRunnable(delay, () => {\n      this._visible = true;\n    });\n  }\n}\n","import { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class HintModel extends ObservableModel {\n  constructor() {\n    super('HintModel');\n\n    this._visible = false;\n    this.makeObservable();\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    this._visible = value;\n    this.stopVisibilityTimer();\n  }\n\n  get timerAlreadyStarted() {\n    return this._visibilityTimer;\n  }\n\n  destroy() {\n    this.stopVisibilityTimer();\n  }\n\n  startVisibilityTimer() {\n    this._visibilityTimer = delayRunnable(CI_API.Globals.PARAMS.hint_on_idle, () => {\n      this._visible = true;\n    });\n  }\n\n  stopVisibilityTimer() {\n    removeRunnable(this._visibilityTimer);\n    this._visibilityTimer = null;\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class LoadModel extends ObservableModel {\n  constructor() {\n    super('LoadModel');\n\n    this._progress = 0;\n    this._complete = false;\n    this.makeObservable();\n  }\n\n  get progress() {\n    return this._progress;\n  }\n\n  set progress(value) {\n    this._progress = value;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PersistentCtaModel extends ObservableModel {\n  constructor() {\n    super('PersistentCtaModel');\n  }\n}\n","import { SoundState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\n\nexport class SoundModel extends ObservableModel {\n  constructor() {\n    super('SoundModel');\n\n    this._state = SoundState.Unknown;\n    this._icon = null;\n\n    this.makeObservable();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value) {\n    this._icon = value;\n  }\n\n  initialize() {\n    this._icon = CI_API.Globals.PARAMS.sound_icon;\n    this._state = SoundState.On;\n  }\n}\n","import { getTutorialConfig } from '../../configs/tutorial-config';\nimport { delayRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\nimport { TutorialSequenceModel } from './tutorial-sequence-model';\n\nexport class TutorialModel extends ObservableModel {\n  constructor() {\n    super('TutorialModel');\n\n    this._complete = false;\n    this._skip = false;\n    this._sequences = null;\n    this._currentIndex = null;\n    this._sequenceCompleteTimer = null;\n\n    this.makeObservable('_complete', '_skip', '_currentIndex');\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n\n  get skip() {\n    return this._skip;\n  }\n\n  set skip(value) {\n    this._skip = value;\n  }\n\n  get sequences() {\n    return this._sequences;\n  }\n\n  get current() {\n    return this._sequences[this._currentIndex];\n  }\n\n  get currentIndex() {\n    return this._currentIndex;\n  }\n\n  getSequenceByUuid(uuid) {\n    return this._sequences.find(sequence => sequence.uuid === uuid);\n  }\n\n  initialize() {\n    super.initialize();\n\n    this._initSequences();\n\n    this.nextSequence();\n    this.showSequence();\n  }\n\n  destroy() {\n    this._stopSequenceCompleteTimer();\n    super.destroy();\n  }\n\n  nextSequence() {\n    this.current && this.completeSequence();\n    this._currentIndex = this.current ? this._currentIndex + 1 : 0;\n  }\n\n  showSequence() {\n    this.current.show = true;\n    this._startSequenceCompleteTimer();\n  }\n\n  completeSequence() {\n    this.current.complete = true;\n    this._stopSequenceCompleteTimer();\n  }\n\n  _initSequences() {\n    this._sequences = getTutorialConfig().map((config, index) => new TutorialSequenceModel(config, index));\n  }\n\n  _startSequenceCompleteTimer() {\n    const { duration } = this.current.config;\n\n    if (duration !== -1) {\n      this._sequenceCompleteTimer = delayRunnable(duration, this.completeSequence, this);\n    }\n  }\n\n  _stopSequenceCompleteTimer() {\n    removeRunnable(this._sequenceCompleteTimer);\n  }\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class TutorialSequenceModel extends ObservableModel {\n  constructor(config, index) {\n    super('TutorialSequenceModel');\n\n    this._index = index;\n    this._config = config;\n    this._complete = false;\n    this._show = false;\n\n    this.makeObservable('_complete', '_show');\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get index() {\n    return this._index;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n\n  get show() {\n    return this._show;\n  }\n\n  set show(value) {\n    this._show = value;\n  }\n}\n","import { getAutoPlaySoundPartsConfig, getPadsConfig, getPlaySequence } from '../../../configs/board-config';\nimport { BoardState } from '../../../constants';\nimport { delayRunnable, removeRunnable } from '../../../utils';\nimport { ObservableModel } from '../../observable-model';\nimport { PadModel } from './pad-model';\nimport { SoundPartModel } from './sound-part-model';\n\nexport class BoardModel extends ObservableModel {\n  constructor() {\n    super('BoardModel');\n\n    this._pads = [];\n    this._playSequence = [];\n    this._autoPlaySounds = [];\n    this._simulationSequence = [];\n    this._sequence = null;\n    this._state = BoardState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get pads() {\n    return this._pads;\n  }\n\n  get playSequence() {\n    return this._playSequence;\n  }\n\n  get autoPlaySounds() {\n    return this._autoPlaySounds;\n  }\n\n  get simulationSequence() {\n    return this._simulationSequence;\n  }\n\n  get sequence() {\n    return this._sequence;\n  }\n\n  set sequence(value) {\n    this._sequence = value;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  destroy() {\n    removeRunnable(this._simulateRunnable);\n    this._simulateRunnable = null;\n\n    super.destroy();\n  }\n\n  getPadByUuid(uuid) {\n    return this._pads.find(p => p.uuid === uuid);\n  }\n\n  getPadBySound(sound) {\n    return this._pads.find(p => p.sound === sound);\n  }\n\n  getPadByPosition(row, column) {\n    return this._pads.find(p => p.row === row && p.column === column);\n  }\n\n  getAutoPlaySoundByUuid(uuid) {\n    return this._autoPlaySounds.find(p => p.uuid === uuid);\n  }\n\n  getSimulationSoundByUuid(uuid) {\n    return this._simulationSequence.find(p => p.uuid === uuid);\n  }\n\n  getSimulationSoundByState(state) {\n    return this._simulationSequence.find(p => p.state === state);\n  }\n\n  simulate() {\n    const delay = 500;\n\n    this._simulateRunnable = delayRunnable(delay, () => {\n      this._state = BoardState.Simulation;\n    });\n  }\n\n  resetAutoPlaySounds() {\n    this._autoPlaySounds = [];\n\n    this._initializeAutoPlaySounds();\n  }\n\n  resetPlaySequence() {\n    this._playSequence = [];\n\n    this._initializePlaySequence();\n  }\n\n  resetSimulationSequence() {\n    this._simulationSequence = [];\n\n    this._initializeSimulationSequence();\n  }\n\n  addPad(config) {\n    const { row, column, color, sound } = config;\n    const pad = new PadModel(row, column, color, sound);\n\n    this._pads = [...this._pads, pad];\n\n    pad.initialize();\n  }\n\n  initialize() {\n    this._sequence = 0;\n\n    this._initializePads();\n    this._initializeAutoPlaySounds();\n    this._initializePlaySequence();\n    this._initializeSimulationSequence();\n\n    this._state = BoardState.Idle;\n  }\n\n  _initializePads() {\n    const padConfig = getPadsConfig();\n\n    for (let i = 0; i < padConfig.length; i += 1) {\n      const row = padConfig[i];\n      for (let j = 0; j < row.length; j += 1) {\n        this.addPad(row[j]);\n      }\n    }\n  }\n\n  _initializeAutoPlaySounds() {\n    const { tutorial } = CI_API.Globals.PARAMS;\n    const soundPartsConfig = getAutoPlaySoundPartsConfig();\n    const arr = [];\n\n    for (let i = 0; i < soundPartsConfig[this._sequence].length; i += 1) {\n      const { name, startTime } = soundPartsConfig[this._sequence][i];\n      const part = new SoundPartModel(name, startTime);\n\n      arr.push(part);\n    }\n\n    let a = [];\n    soundPartsConfig.forEach(s => {\n      const b = [];\n      for (let i = 0; i < s.length; i += 1) {\n        const { name, startTime } = s[i];\n        const part = new SoundPartModel(name, startTime);\n        part.initialize();\n\n        b.push(part);\n      }\n      a = [...a, ...b];\n    });\n\n    tutorial ? (this._autoPlaySounds = [...arr]) : (this._autoPlaySounds = [...a]);\n  }\n\n  _initializePlaySequence() {\n    const { tutorial } = CI_API.Globals.PARAMS;\n    const sequences = getPlaySequence();\n    const arr = [];\n\n    for (let i = 0; i < sequences[this._sequence].length; i += 1) {\n      const { name, startTime } = sequences[this._sequence][i];\n      const part = new SoundPartModel(name, startTime);\n\n      arr.push(part);\n    }\n\n    let a = [];\n    sequences.forEach(s => {\n      const b = [];\n      for (let i = 0; i < s.length; i += 1) {\n        const { name, startTime } = s[i];\n        const part = new SoundPartModel(name, startTime);\n        part.initialize();\n\n        b.push(part);\n      }\n      a = [...a, ...b];\n    });\n\n    tutorial ? (this._playSequence = [...arr]) : (this._playSequence = [...a]);\n  }\n\n  _initializeSimulationSequence() {\n    const { tutorial } = CI_API.Globals.PARAMS;\n    const sequences = getPlaySequence();\n    const arr = [];\n\n    for (let i = 0; i < sequences[this._sequence].length; i += 1) {\n      const { name, startTime } = sequences[this._sequence][i];\n      const part = new SoundPartModel(name, startTime);\n      part.initialize();\n\n      arr.push(part);\n    }\n\n    let a = [];\n    sequences.forEach(s => {\n      const b = [];\n      for (let i = 0; i < s.length; i += 1) {\n        const { name, startTime } = s[i];\n        const part = new SoundPartModel(name, startTime);\n        part.initialize();\n\n        b.push(part);\n      }\n      a = [...a, ...b];\n    });\n\n    tutorial ? (this._simulationSequence = [...arr]) : (this._simulationSequence = [...a]);\n  }\n}\n","import { PadState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\n\nexport class PadModel extends ObservableModel {\n  constructor(row, column, color, sound) {\n    super('PadModel');\n\n    this._row = row;\n    this._column = column;\n    this._color = color;\n    this._sound = sound;\n    this._state = PadState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get row() {\n    return this._row;\n  }\n\n  get column() {\n    return this._column;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  get sound() {\n    return this._sound;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  idle() {\n    this._state = PadState.Idle;\n  }\n\n  block() {\n    this._state = PadState.Blocked;\n  }\n\n  enable() {\n    this._state = PadState.Enabled;\n  }\n\n  disable() {\n    this._state = PadState.Disabled;\n  }\n\n  initialize() {\n    this._state = PadState.Blocked;\n  }\n}\n","import { SoundPartState } from '../../../constants';\nimport { ObservableModel } from '../../observable-model';\n\nexport class SoundPartModel extends ObservableModel {\n  constructor(name, startTime) {\n    super('SoundPartModel');\n\n    this._name = name;\n    this._startTime = startTime;\n    this._state = SoundPartState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get startTime() {\n    return this._startTime;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  initialize() {\n    this._state = SoundPartState.Idle;\n  }\n}\n","import { DotState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\n\nexport class DotModel extends ObservableModel {\n  constructor() {\n    super('DotModel');\n\n    this._state = DotState.Unknown;\n\n    this.makeObservable();\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  initialize() {\n    this._state = DotState.Idle;\n  }\n}\n","import { ObservableModel } from '../observable-model';\nimport { BoardModel } from './board/board-model';\nimport { ProgressBarModel } from './progress-bar-model';\nimport { TimerModel } from './timer-model';\n\nexport class GameModel extends ObservableModel {\n  constructor() {\n    super('GameModel');\n\n    this._boardModel = null;\n    this._timerModel = null;\n    this._progressBarModel = null;\n\n    this.makeObservable();\n  }\n\n  get boardModel() {\n    return this._boardModel;\n  }\n\n  get timerModel() {\n    return this._timerModel;\n  }\n\n  get progressBarModel() {\n    return this._progressBarModel;\n  }\n\n  initializeTimer() {\n    this._initializeTimerModel();\n  }\n\n  destroyTimer() {\n    this._destroyTimerModel();\n  }\n\n  initialize() {\n    this._initializeBoardModel();\n    this._initializeTimerModel();\n    this._initializeProgressBarModel();\n  }\n\n  _initializeBoardModel() {\n    this._boardModel = new BoardModel();\n    this._boardModel.initialize();\n  }\n\n  _destroyBoardModel() {\n    this._boardModel.destroy();\n    this._boardModel = null;\n  }\n\n  _initializeTimerModel() {\n    this._timerModel = new TimerModel();\n    this._timerModel.initialize();\n  }\n\n  _destroyTimerModel() {\n    this._timerModel.destroy();\n    this._timerModel = null;\n  }\n\n  _initializeProgressBarModel() {\n    this._progressBarModel = new ProgressBarModel();\n    this._progressBarModel.initialize();\n  }\n\n  _destroyProgressBarModel() {\n    this._progressBarModel.destroy();\n    this._progressBarModel = null;\n  }\n\n  destroy() {\n    this._destroyBoardModel();\n    this._destroyTimerModel();\n    this._destroyProgressBarModel();\n  }\n}\n","import { DotState } from '../../constants';\nimport { ObservableModel } from '../observable-model';\nimport { DotModel } from './dot-model';\n\nexport class ProgressBarModel extends ObservableModel {\n  constructor() {\n    super('ProgressBarModel');\n\n    this._dots = [];\n    this._progress = null;\n\n    this.makeObservable();\n  }\n\n  get dots() {\n    return this._dots;\n  }\n\n  get progress() {\n    return this._progress;\n  }\n\n  set progress(value) {\n    this._progress = value;\n  }\n\n  getDotByUuid(uuid) {\n    return this._dots.find(d => d.uuid === uuid);\n  }\n\n  getDotAtPosition(index) {\n    return this._dots[index];\n  }\n\n  reset() {\n    this._dots.forEach((d, i) => {\n      i === 0 ? (d.state = DotState.Filled) : (d.state = DotState.Idle);\n    });\n    this._progress = 0;\n  }\n\n  addDot() {\n    const pad = new DotModel();\n    this._dots = [...this._dots, pad];\n    pad.initialize();\n  }\n\n  initialize() {\n    this._initializeDots();\n    this._progress = 0;\n  }\n\n  _initializeDots() {\n    const count = 3;\n\n    for (let i = 0; i < count; i += 1) {\n      this.addDot();\n    }\n  }\n}\n","import { getGameTime } from '../../configs/board-config';\nimport { delayRunnable, loopRunnable, removeRunnable } from '../../utils';\nimport { ObservableModel } from '../observable-model';\n\nexport class TimerModel extends ObservableModel {\n  constructor(delta = CI_API.game.time.physicsElapsedMS) {\n    super('TimerModel');\n\n    this._delta = delta;\n    this._timer = null;\n    this._duration = null;\n    this._remaining = null;\n    this._complete = null;\n    this._stopped = false;\n\n    this.makeObservable();\n  }\n\n  get timer() {\n    return this._timer;\n  }\n\n  get remaining() {\n    return this._remaining;\n  }\n\n  get duration() {\n    return this._duration;\n  }\n\n  get delta() {\n    return this._delta;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n\n  set complete(value) {\n    this._complete = value;\n  }\n\n  get stopped() {\n    return this._stopped;\n  }\n\n  set stopped(value) {\n    this._stopped = value;\n  }\n\n  destroy() {\n    this.stopTimer();\n  }\n\n  pause() {\n    this.stopTimer();\n  }\n\n  resume() {\n    this._startTimer();\n  }\n\n  startTimer() {\n    this._stopped = false;\n    this._duration = getGameTime();\n    this._remaining = this._duration;\n    this._startTimer();\n  }\n\n  startTimerFrom(time, delay) {\n    this._stopped = false;\n    this._duration = getGameTime();\n    this._remaining = getGameTime() - time;\n\n    if (delay) {\n      this._startRunnable = delayRunnable(500, () => {\n        this._startTimer();\n      });\n    } else {\n      this._startTimer();\n    }\n  }\n\n  stopTimer() {\n    this._stopped = true;\n    this._complete = false;\n\n    if (this._timer) {\n      removeRunnable(this._timer);\n    }\n  }\n\n  _startTimer() {\n    this._timer = loopRunnable(this._delta, () => {\n      this._remaining = Math.max(this._remaining - this._delta, 0);\n      if (this._remaining <= 0) {\n        this._remaining = 0;\n        this._complete = true;\n        this.stopTimer();\n      }\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\n\nconst getUUID = (() => {\n  let num = 0;\n  return (prefix = '') => {\n    num += 1;\n    const value = num < 10 ? `0${num}` : num;\n    return `${prefix}${value.toString()}`;\n  };\n})();\n\nexport class ObservableModel {\n  constructor(name) {\n    this.__name__ = name;\n    this._uuid = getUUID(this.__name__);\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  makeObservable(...properties) {\n    lego.observe.makeObservable(this, ...properties);\n  }\n\n  createObservable(property, value) {\n    lego.observe.createObservable(this, property, value);\n  }\n\n  removeObservable(...properties) {\n    lego.observe.removeObservable(this, ...properties);\n  }\n\n  initialize() {}\n\n  destroy() {}\n}\n","import { ObservableModel } from '../observable-model';\n\nexport class PlayerModel extends ObservableModel {\n  constructor() {\n    super('PlayerModel');\n\n    this._score = 0;\n  }\n\n  get score() {\n    return this._score;\n  }\n\n  set score(value) {\n    this._score = value;\n  }\n}\n","import { AdModel } from './ad/ad-model';\nimport { GameModel } from './game/game-model';\nimport { ObservableModel } from './observable-model';\nimport { PlayerModel } from './player/player-model';\n\nclass Store extends ObservableModel {\n  constructor() {\n    super('Store');\n\n    this._ad = null;\n    this._game = null;\n    this._player = null;\n\n    this.makeObservable();\n  }\n\n  get ad() {\n    return this._ad;\n  }\n\n  set ad(value) {\n    this._ad = value;\n  }\n\n  get player() {\n    return this._player;\n  }\n\n  set player(value) {\n    this._player = value;\n  }\n\n  get game() {\n    return this._game;\n  }\n\n  set game(value) {\n    this._game = value;\n  }\n\n  // AD\n  initializeADModel() {\n    this._ad = new AdModel();\n    this._ad.initialize();\n  }\n\n  // PLAYER\n  initializePlayerModel() {\n    this._player = new PlayerModel();\n    this._player.initialize();\n  }\n\n  destroyPlayerModel() {\n    this._player.destroy();\n    this._player = null;\n  }\n\n  // GAME\n  initializeGameModel() {\n    this._game = new GameModel();\n    this._game.initialize();\n  }\n\n  destroyGameModel() {\n    this._game.destroy();\n    this._game = null;\n  }\n}\n\nexport const store = new Store();\n","import * as animationConfigs from './configs/animation-configs';\nimport * as buttonConfigs from './configs/button-configs';\nimport * as gridConfigs from './configs/grid-configs';\nimport * as imageConfigs from './configs/image-configs';\nimport * as ninepatchConfigs from './configs/ninepatch-configs';\nimport * as particlesConfigs from './configs/particles-configs';\nimport * as spineConfigs from './configs/spine-configs';\nimport * as textConfigs from './configs/text-configs';\nimport * as utils from './utils';\n\nexport default {\n  animationConfigs,\n  buttonConfigs,\n  gridConfigs,\n  particlesConfigs,\n  imageConfigs,\n  ninepatchConfigs,\n  spineConfigs,\n  textConfigs,\n  utils\n};\n","/* eslint-disable class-methods-use-this */\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getBackgroundGridConfig } from '../../configs/grid-configs';\nimport { makeGradient } from '../../utils';\n\nexport class BackgroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    this._build();\n  }\n\n  get name() {\n    return 'BackgroundView';\n  }\n\n  getGridConfig() {\n    return getBackgroundGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    this._gradient && this._rebuildGradient();\n\n    super.rebuild(config);\n  }\n\n  _rebuildGradient() {\n    this._destroyGradient();\n    this._buildGradient();\n  }\n\n  _build() {\n    this._buildGradient();\n  }\n\n  _buildGradient() {\n    this._gradient && this._gradient.destroy();\n    this._gradient = makeGradient({\n      width: CI_API.game.width,\n      height: CI_API.game.height,\n      horizontal: 0,\n      vertical: 1,\n      colors: [\n        {\n          percent: 0,\n          color: '#282167'\n        },\n        {\n          percent: 0.25,\n          color: '#020339'\n        },\n        {\n          percent: 0.75,\n          color: '#020339'\n        },\n        {\n          percent: 1,\n          color: '#282167'\n        }\n      ]\n    });\n\n    this._gradient.inputEnabled = true;\n    this._gradient.name = 'background';\n\n    this.setChild('bg', this._gradient);\n  }\n\n  _destroyGradient() {\n    this._gradient.destroy();\n    this._gradient = null;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getCTAContainerGridConfig } from '../../configs/grid-configs';\nimport { AdStatus, GameOverReasons } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { store } from '../../models/store';\nimport { CTAEmbeddedView } from './cta-embedded-view';\nimport { CTAStandardView } from './cta-standard-view';\n\n/* eslint-disable class-methods-use-this */\nexport class CTAContainer extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    lego.event.on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this);\n  }\n\n  getGridConfig() {\n    return getCTAContainerGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this._build();\n        break;\n      case AdStatus.Game:\n        if (this._cta) {\n          this._ctaHideTw = this._cta.hide();\n          this._ctaHideTw.onComplete.add(() => {\n            this._cta.destroy();\n            this._cta = null;\n          });\n        }\n        break;\n      default:\n    }\n  }\n\n  _build() {\n    this._cta && this._destroyCta();\n\n    this.build(this.getGridConfig());\n    this._buildCta();\n  }\n\n  _destroyCta() {\n    this.game.tweens.remove(this._ctaHideTw);\n    this._cta.destroy();\n    this._cta = null;\n  }\n\n  _buildCta() {\n    const { cta_type: type } = CI_API.Globals.PARAMS;\n    const { reason } = store.ad.cta;\n\n    switch (type) {\n      case 'standard':\n        this._buildStandardCta();\n        break;\n      case 'embedded':\n        reason === GameOverReasons.ItemsToCtaReached ? this._buildEmbeddedCta() : this._buildStandardCta();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _buildStandardCta() {\n    this._cta = new CTAStandardView();\n    this.setChild('cta', this._cta);\n  }\n\n  _buildEmbeddedCta() {\n    this._cta = new CTAEmbeddedView();\n    this.setChild('cta', this._cta);\n  }\n}\n","import { getPlaySequence } from '../../configs/board-config';\nimport { getEmbeddedCTAEmitterConfig } from '../../configs/particles-configs';\nimport {\n  getCTAEmbeddedProgressTextConfig,\n  getCTAStandardLabelTextConfig as getCTAEmbeddedLabelTextConfig\n} from '../../configs/text-configs';\nimport { store } from '../../models/store';\nimport { makeEmitter, makeText } from '../../utils';\nimport { Container } from '../../utils/container';\nimport { CTAProgressComponent } from './cta-progress-component';\n\n/* eslint-disable class-methods-use-this */\nexport class CTAEmbeddedContent extends Container {\n  constructor() {\n    super();\n    this._buildLabel();\n    this._buildProgress();\n    this._buildProgressLabel();\n    this._buildParticles();\n    this.alpha = 0;\n\n    // const gr = this.game.add.graphics();\n    // gr.beginFill(0xff0000, 0.5);\n    // gr.drawRect(-270, -300, 540, 600);\n    // this.add(gr);\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(-270, -300, 540, 600);\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._hideTw);\n    if (this._particleEmitter) {\n      this._particleEmitter.paused = true;\n      this._particleEmitter.destroy();\n    }\n\n    super.destroy();\n  }\n\n  show() {\n    this.game.add.tween(this).to({ alpha: 1 }, 500, Phaser.Easing.Sinusoidal.InOut, true);\n  }\n\n  hide() {\n    this._hideTw = this.game.add.tween(this).to({ alpha: 0 }, 800, Phaser.Easing.Sinusoidal.InOut, true);\n\n    return this._hideTw;\n  }\n\n  _buildProgress() {\n    let length = 0;\n\n    const sequence = getPlaySequence();\n\n    if (CI_API.Globals.PARAMS.short_version) {\n      length = sequence[0].length;\n    } else {\n      sequence.forEach(s => {\n        length += s.length;\n      });\n    }\n\n    const percent = Math.max(0.5, store.player.score / length);\n\n    const progress = new CTAProgressComponent(percent);\n    this.addChild(progress);\n  }\n\n  _buildProgressLabel() {\n    let length = 0;\n\n    const sequence = getPlaySequence();\n\n    if (CI_API.Globals.PARAMS.short_version) {\n      length = sequence[0].length;\n    } else {\n      sequence.forEach(s => {\n        length += s.length;\n      });\n    }\n\n    const percent = Math.max(0.5, store.player.score / length);\n\n    const label = makeText(getCTAEmbeddedProgressTextConfig(percent));\n    label.anchor.set(0.5);\n    label.y = 100;\n    this.addChild(label);\n  }\n\n  _buildParticles() {\n    this._particlesContainer = new Container();\n    this.addChildAt(this._particlesContainer, 0);\n\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x00ff00, 0);\n    gr.drawRect(-300, -350, 600, 700);\n    this.add(gr);\n    this._particleEmitter = makeEmitter(getEmbeddedCTAEmitterConfig(this._particlesContainer, gr));\n  }\n\n  _buildLabel() {\n    const label = makeText(getCTAEmbeddedLabelTextConfig());\n    label.anchor.set(0.5);\n    label.y = -80;\n    this.addChild(label);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getCtaPlayButtonConfig } from '../../configs/button-configs';\nimport { getCTAEmbeddedGridConfig } from '../../configs/grid-configs';\nimport { store } from '../../models/store';\nimport { delayRunnable, hideToBottom, hideToUp, removeRunnable, showFromBottom, showFromUp } from '../../utils';\nimport { CTAEmbeddedContent } from './cta-embedded-contnent';\nimport { CTAView } from './cta-view';\nimport { NextButton } from './next-button';\n\nexport class CTAEmbeddedView extends CTAView {\n  constructor() {\n    super();\n\n    this._build();\n    this.show();\n  }\n\n  getGridConfig() {\n    return getCTAEmbeddedGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n  }\n\n  destroy() {\n    removeRunnable(this._showRunnable);\n\n    super.destroy();\n  }\n\n  buildPlayButton(cellName = 'play_button') {\n    this._playBtn = new NextButton(getCtaPlayButtonConfig('NEXT SONG'));\n    this._playBtn.onClick.add(this._onPlayClick, this);\n    this._playBtn.alpha = 0;\n\n    this.setChild(cellName, this._playBtn);\n  }\n\n  show() {\n    this._showRunnable = delayRunnable(500, () => {\n      this._content.show();\n      this._logo.alpha = 1;\n      this._playBtn.alpha = 1;\n      this.showBlocker().onComplete.add(() => {\n        if (CI_API.Globals.PARAMS.cta_scrn_clickable) {\n          this._blocker.events.onInputDown.add(this._onScreenClick, this);\n        }\n      });\n      showFromBottom(this._playBtn, 200, 500, false, Phaser.Easing.Cubic.Out).onComplete.add(() => {\n        this._playBtn.onClick.add(this._onPlayClick, this);\n      });\n      showFromUp(this._logo, 0, 500, false, Phaser.Easing.Sinusoidal.Out);\n      if (this._retryBtn) {\n        this._retryBtn.alpha = 1;\n        showFromBottom(this._retryBtn, 0, 500, false, Phaser.Easing.Cubic.Out).onComplete.add(() => {\n          this._retryBtn.onClick.add(this._onRetryClick, this);\n        });\n      }\n    });\n  }\n\n  hide() {\n    this.hideBlocker();\n    hideToBottom(this._playBtn, 0, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n      this._playBtn.visible = false;\n    });\n    hideToUp(this._logo, 0, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n      this._logo.visible = false;\n    });\n\n    const longestTween = this._content.hide();\n    if (this._retryBtn) {\n      hideToBottom(this._retryBtn, 200, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n        this._retryBtn.visible = false;\n      });\n    }\n\n    return longestTween;\n  }\n\n  _build() {\n    this.build(this.getGridConfig());\n    this.buildLogo();\n    this._buildContent();\n    if (store.ad.retries) {\n      this.buildPlayButton();\n      this.buildRetryButton();\n    } else {\n      this.buildPlayButton('play_button_no_retry');\n    }\n  }\n\n  _buildContent() {\n    this.setChild('content', (this._content = new CTAEmbeddedContent()));\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getCtaLogoLabelTextConfig } from '../../configs/text-configs';\nimport { makeText, searchAtlasByFrame } from '../../utils';\n\nexport class CtaLogoView extends Phaser.Sprite {\n  constructor() {\n    const texture = searchAtlasByFrame('ui/logo.png');\n    super(CI_API.game, 0, 0, texture.key, texture.frame);\n    this.name = 'LogoView';\n    this.anchor.set(0.5);\n\n    this._buildLabel();\n    this._buildBounds();\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(-200, -80, 400, 200);\n  }\n\n  _buildLabel() {\n    const label = makeText(getCtaLogoLabelTextConfig());\n    label.anchor.set(0.5);\n    label.y = this.height * 0.8;\n    this.addChild(label);\n  }\n\n  _buildBounds() {\n    const { x, y, width, height } = this.getBounds();\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xff0000, 0);\n    gr.drawRect(x, y, width, height);\n    gr.endFill();\n\n    gr.inputEnabled = true;\n    gr.name = 'logo';\n\n    this.addChild(gr);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { Container } from '../../utils/container';\nimport { DotComponent } from '../game/dot-component';\n\nexport class CTAProgressComponent extends Container {\n  constructor(progress) {\n    super();\n\n    this._dots = [];\n    this._build();\n    this._updateProgress(progress);\n  }\n\n  _updateProgress(progress) {\n    this._updateGrWidth(this._maskRect, progress);\n    if (progress === 1) {\n      this._dots[0].fill();\n      this._dots[1].fill();\n      this._dots[2].fill();\n    } else if (progress >= 0.5) {\n      this._dots[0].fill();\n      this._dots[1].fill();\n    } else if (progress < 0.5) {\n      this._dots[0].fill();\n    }\n  }\n\n  _updateGrWidth(gr, progress) {\n    const { x, y, width, height } = this._fill;\n    gr.clear();\n    gr.beginFill(0xff0000, 0.6);\n    gr.drawRect(x - width / 2, y - height / 2, width * progress, height);\n    gr.endFill();\n  }\n\n  _build() {\n    this._buildBg();\n    this._buildFill();\n    this._buildMask();\n    this._buildDots();\n\n    this._buildBounds();\n  }\n\n  _buildBounds() {\n    const { x, y, width, height } = this.getBounds();\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xff0000, 0);\n    gr.drawRect(x, y, width, height);\n    gr.endFill();\n    this.addChild(gr);\n  }\n\n  _buildBg() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x9396ff, 1);\n    gr.drawRoundedRect(-250, -10, 500, 20, 20);\n    gr.endFill();\n\n    this.addChild((this._bg = gr));\n  }\n\n  _buildFill() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xfef955, 1);\n    gr.drawRoundedRect(-250, -10, 500, 20, 20);\n    gr.endFill();\n\n    this.addChild((this._fill = gr));\n  }\n\n  _buildMask() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x00ff00);\n    gr.drawRect(0, 0, 0, 0);\n    this.addChild((this._maskRect = gr));\n\n    this._fill.mask = gr;\n  }\n\n  _buildDots() {\n    const count = 3;\n    for (let i = 0; i < count; i += 1) {\n      const dot = new DotComponent();\n      dot.idle();\n      dot.position.set(this._dots.length * (this._bg.width / 2) - this._bg.width / 2, 0);\n\n      this._dots.push(dot);\n\n      this.addChild(dot);\n    }\n  }\n}\n","import { getStandardCtaTitleTextConfig } from '../../configs/text-configs';\nimport { makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\n/* eslint-disable class-methods-use-this */\nexport class CTAStandardTitleComponent extends Container {\n  constructor() {\n    super();\n    this._build();\n  }\n\n  _build() {\n    const label1 = makeText(getStandardCtaTitleTextConfig('Choose', '#f9db0b'));\n    const label2 = makeText(getStandardCtaTitleTextConfig('your next song!'));\n    label2.position.set(label1.right, 0);\n\n    this.addChild(label1);\n    this.addChild(label2);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getCTAStandardGridConfig } from '../../configs/grid-configs';\nimport { store } from '../../models/store';\nimport {\n  delayRunnable,\n  hideToBottom,\n  hideToLeft,\n  hideToUp,\n  removeRunnable,\n  showFromBottom,\n  showFromLeft,\n  showFromUp\n} from '../../utils';\nimport { CTAStandardTitleComponent } from './cta-standard-title-component';\nimport { CTAView } from './cta-view';\nimport { OptionSetComponent } from './option-set-component';\n\nexport class CTAStandardView extends CTAView {\n  constructor() {\n    super();\n\n    this._build();\n    this.show();\n  }\n\n  getGridConfig() {\n    return getCTAStandardGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n  }\n\n  destroy() {\n    removeRunnable(this._showRunnable);\n\n    super.destroy();\n  }\n\n  show() {\n    this._showRunnable = delayRunnable(500, () => {\n      this._optionSet.show();\n      this._logo.alpha = 1;\n      this._playBtn.alpha = 1;\n      this._titleLabel.alpha = 1;\n      this.showBlocker().onComplete.add(() => {\n        if (CI_API.Globals.PARAMS.cta_scrn_clickable) {\n          this._blocker.events.onInputDown.add(this._onScreenClick, this);\n        }\n      });\n      showFromBottom(this._playBtn, 200, 500, false, Phaser.Easing.Cubic.Out).onComplete.add(() => {\n        this._playBtn.onClick.add(this._onPlayClick, this);\n      });\n      showFromLeft(this._titleLabel, 400, 500, false, Phaser.Easing.Back.Out);\n      showFromUp(this._logo, 0, 500, false, Phaser.Easing.Sinusoidal.Out);\n      if (this._retryBtn) {\n        this._retryBtn.alpha = 1;\n        showFromBottom(this._retryBtn, 0, 500, false, Phaser.Easing.Cubic.Out).onComplete.add(() => {\n          this._retryBtn.onClick.add(this._onRetryClick, this);\n        });\n      }\n    });\n  }\n\n  hide() {\n    this.hideBlocker();\n    hideToBottom(this._playBtn, 0, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n      this._playBtn.visible = false;\n    });\n    hideToUp(this._logo, 0, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n      this._logo.visible = false;\n    });\n    hideToLeft(this._titleLabel, 0, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n      this._titleLabel.visible = false;\n    });\n\n    const longestTween = this._optionSet.hide();\n    if (this._retryBtn) {\n      hideToBottom(this._retryBtn, 200, 500, false, Phaser.Easing.Cubic.In).onComplete.add(() => {\n        this._retryBtn.visible = false;\n      });\n    }\n\n    return longestTween;\n  }\n\n  _build() {\n    this.build(this.getGridConfig());\n    this.buildLogo();\n    this._buildTitleLabel();\n    this._buildContent();\n    if (store.ad.retries) {\n      this.buildPlayButton();\n      this.buildRetryButton();\n    } else {\n      this.buildPlayButton('play_button_no_retry');\n    }\n  }\n\n  _buildTitleLabel() {\n    this.setChild('title', (this._titleLabel = new CTAStandardTitleComponent()));\n    this._titleLabel.alpha = 0;\n  }\n\n  _buildContent() {\n    this.setChild('content', (this._optionSet = new OptionSetComponent()));\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getCtaPlayButtonConfig, getCtaRetryButtonConfig } from '../../configs/button-configs';\nimport { InputPriority } from '../../constants';\nimport { ViewEvents } from '../../events/view-events';\nimport moduleBindings from '../../module-bindings';\nimport { makePixel } from '../../utils';\nimport { Button } from '../../utils/button/button';\nimport { CtaLogoView } from './cta-logo-view';\n\nexport class CTAView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n\n    this._blocker = null;\n    this.bindings = moduleBindings;\n  }\n\n  get name() {\n    return 'CTAView';\n  }\n\n  get logoPosition() {\n    return this.toGlobal(this._logo.position);\n  }\n\n  getGridConfig() {\n    return new Error('function getGridConfig() is not implemented');\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    super.rebuild(config);\n  }\n\n  buildLogo() {\n    this._logo = new CtaLogoView();\n    this._logo.alpha = 0;\n    this.setChild('logo', this._logo);\n  }\n\n  buildPlayButton(cellName = 'play_button') {\n    this._playBtn = new Button(getCtaPlayButtonConfig(CI_API.Globals.PARAMS.cta_btn_text));\n    this._playBtn.alpha = 0;\n\n    this.setChild(cellName, this._playBtn);\n  }\n\n  buildRetryButton() {\n    this._retryBtn = new Button(getCtaRetryButtonConfig());\n    this._retryBtn.alpha = 0;\n\n    this.setChild('retry_button', this._retryBtn);\n  }\n\n  build(config, blockerAlpha = 0) {\n    super.build(config);\n    this._buildBlocker(blockerAlpha);\n  }\n\n  showBlocker() {\n    this._showBlockerTw = this.game.add\n      .tween(this._blocker)\n      .to({ alpha: 0.8 }, 500, Phaser.Easing.Sinusoidal.InOut, true, 0);\n    this._showBlockerTw.universal = true;\n\n    return this._showBlockerTw;\n  }\n\n  hideBlocker() {\n    this._hideBlockerTw = this.game.add\n      .tween(this._blocker)\n      .to({ alpha: 0 }, 500, Phaser.Easing.Sinusoidal.InOut, true, 0);\n    this._hideBlockerTw.universal = true;\n\n    return this._hideBlockerTw;\n  }\n\n  _buildBlocker(alpha) {\n    this._blocker = makePixel({ alpha });\n    this._blocker.inputEnabled = true;\n    this._blocker.input.priorityID = InputPriority.Cta;\n    this._blocker.name = 'cta_overlay';\n    this.setChild('blocker', this._blocker);\n  }\n\n  _buildButton(config, callback) {\n    const btn = new Button(config);\n    btn.onClick.add(callback, this);\n    return btn;\n  }\n\n  _onScreenClick() {\n    if (!this._hideBlockerTw) {\n      lego.event.emit(ViewEvents.CtaView.ScreenClick);\n    }\n  }\n\n  _onPlayClick() {\n    lego.event.emit(ViewEvents.CtaView.PlayClick);\n  }\n\n  _onRetryClick() {\n    lego.event.emit(ViewEvents.CtaView.RetryClick);\n    this._retryBtn.onClick.remove(this._onRetryClick, this);\n  }\n}\n","import { getNextButtonIconImageConfig } from '../../configs/image-configs';\nimport { fitText, makeImage, makeNinePatch, makeText } from '../../utils';\nimport { AbstractButton } from '../../utils/button/abstract-button';\n\nexport class NextButton extends AbstractButton {\n  constructor(config) {\n    super(config);\n    this.createIcon();\n  }\n\n  createIcon() {\n    const icon = makeImage(getNextButtonIconImageConfig());\n    // @ts-ignore\n    icon.right = this.states.up.right - 30;\n    this.addChild(icon);\n  }\n\n  createState(config) {\n    const state = new Phaser.Group(this.game);\n\n    const { bg, label, fitHeight = 0.9 } = config;\n\n    // FRAME\n    const bgObj = bg.width && bg.height ? makeNinePatch(bg) : makeImage(bg);\n    state.add(bgObj);\n\n    // LABEL\n    if (label) {\n      const labelObj = makeText(label);\n      labelObj.anchor.set(0.5);\n      state.add(labelObj);\n\n      fitText(labelObj, bgObj.width * 0.45, bgObj.height * fitHeight);\n    }\n\n    return this.add(state);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getPauseMusicImageConfig, getPlayMusicImageConfig, getSingerImageConfig } from '../../configs/image-configs';\nimport { getMusicBarGlowPatchConfig, getMusicBarPatchConfig } from '../../configs/ninepatch-configs';\nimport {\n  getCtaOptionOriginalTextConfig,\n  getCtaOptionSingerTextConfig,\n  getCtaOptionTitleTextConfig\n} from '../../configs/text-configs';\nimport { InputPriority } from '../../constants';\nimport { ViewEvents } from '../../events/view-events';\nimport { makeImage, makeNinePatch, makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class OptionComponent extends Container {\n  constructor(config) {\n    super();\n\n    this._config = config;\n\n    this._build();\n  }\n\n  get playButton() {\n    return this._playButton;\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(-265, -90, 530, 180);\n  }\n\n  highlightGlow() {\n    this._glow.visible = true;\n    const tw = this.game.add.tween(this._glow).to({ alpha: 1 }, 500, Phaser.Easing.Sinusoidal.InOut, true, 0, 0, true);\n    tw.universal = true;\n    tw.onComplete.add(() => {\n      this._glow.visible = false;\n    });\n  }\n\n  play() {\n    this._playButton.alpha = 0;\n    this._pauseButton.alpha = 1;\n  }\n\n  pause() {\n    this._playButton.alpha = 1;\n    this._pauseButton.alpha = 0;\n  }\n\n  enable() {\n    this._bg.input.priorityID = InputPriority.Cta + 1;\n    this._bg.events.onInputDown.add(() => {\n      lego.event.emit(ViewEvents.CtaView.OptionClick, this._bg.name);\n    });\n  }\n\n  _build() {\n    const { icon, title, singer } = this._config;\n\n    this._buildBg();\n    this._buildGlow();\n    this._buildIcon(icon);\n    this._buildTitleLabel(title);\n    this._buildOriginalLabel();\n    this._buildPlayButton();\n    this._buildPauseButton();\n    this._buildSingerLabel(singer);\n  }\n\n  _buildBg() {\n    const bg = makeNinePatch(getMusicBarPatchConfig());\n    const { title, singer } = this._config;\n    bg.name = `${singer}: ${title}`;\n    bg.inputEnabled = true;\n    this.addChild((this._bg = bg));\n  }\n\n  _buildGlow() {\n    const glow = makeNinePatch(getMusicBarGlowPatchConfig());\n    this.addChild((this._glow = glow));\n    this._glow.alpha = 0;\n    this._glow.visible = false;\n  }\n\n  _buildIcon(icon) {\n    const img = makeImage(getSingerImageConfig(icon));\n    this.addChild((this._icon = img));\n    img.left = this._bg.left + 33;\n    img.y = -1;\n  }\n\n  _buildTitleLabel(text) {\n    const label = makeText(getCtaOptionTitleTextConfig(text));\n    label.left = this._icon.right + 30;\n    label.top = this._icon.top + 30;\n    this.addChild(label);\n  }\n\n  _buildOriginalLabel() {\n    const label = makeText(getCtaOptionOriginalTextConfig());\n    label.left = this._icon.right + 30;\n    label.top = this._icon.top + 75;\n    this.addChild(label);\n  }\n\n  _buildSingerLabel(text) {\n    const label = makeText(getCtaOptionSingerTextConfig(text));\n    label.left = this._icon.right + 30;\n    label.top = this._icon.top + 105;\n    this.addChild(label);\n  }\n\n  _buildPlayButton() {\n    const img = makeImage(getPlayMusicImageConfig());\n    this.addChild((this._playButton = img));\n    img.right = this._bg.right - 70;\n    img.y = -1;\n  }\n\n  _buildPauseButton() {\n    const img = makeImage(getPauseMusicImageConfig());\n    this.addChild((this._pauseButton = img));\n    img.right = this._bg.right - 70;\n    img.alpha = 0;\n    img.y = -1;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getHandImageConfig } from '../../configs/image-configs';\nimport { ViewEvents } from '../../events/view-events';\nimport {\n  delayRunnable,\n  handMoveTw,\n  handScaleTw,\n  hideToRight,\n  makeImage,\n  removeRunnable,\n  showFromRight\n} from '../../utils';\nimport { last } from '../../utils/array/last';\nimport { Container } from '../../utils/container';\nimport { OptionComponent } from './option-component';\n\nconst optionSetCOnfig = [\n  {\n    icon: '1',\n    title: 'Faded',\n    singer: 'Alan Walker'\n  },\n  {\n    icon: '2',\n    title: 'Closer',\n    singer: 'The Chainsmokers'\n  }\n];\n\nexport class OptionSetComponent extends Container {\n  constructor() {\n    super();\n\n    this._optionsShowTweens = [];\n    this._optionsHideTweens = [];\n    this._options = [];\n\n    this._build();\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(-265, -90, 530, 400);\n  }\n\n  show() {\n    this._showOptions();\n    last(this._optionsShowTweens).onComplete.add(() => {\n      this._showHand();\n      this._options.forEach(o => o.enable());\n    });\n  }\n\n  hide() {\n    this.removeActions();\n    this._hand.destroy();\n    return this._hideOptions();\n  }\n\n  removeActions() {\n    removeRunnable(this._highlightRunnable);\n    removeRunnable(this._previewRunnable);\n    this.game.tweens.remove(this._moveTw);\n    this.game.tweens.remove(this._showTw);\n    this.game.tweens.remove(this._alphaTw);\n    this.game.tweens.remove(this._scaleTw);\n    this.game.tweens.remove(this._scaleBackTw);\n    this._optionsShowTweens.forEach(tw => {\n      this.game.tweens.remove(tw);\n    });\n    this._optionsHideTweens.forEach(tw => {\n      this.game.tweens.remove(tw);\n    });\n  }\n\n  _build() {\n    this._buildOptions();\n    this._buildHand();\n  }\n\n  _buildOptions() {\n    optionSetCOnfig.forEach((config, i) => {\n      const option = new OptionComponent(config);\n      this.addChild(option);\n      this._options.push(option);\n      option.alpha = 0;\n      option.y = i * (option.height + 25);\n    });\n  }\n\n  _buildHand() {\n    const hand = makeImage(getHandImageConfig());\n    hand.visible = false;\n    this.addChild((this._hand = hand));\n  }\n\n  _showOptions() {\n    this._optionsShowTweens = this._options.map((opt, i) => {\n      opt.alpha = 1;\n      return showFromRight(opt, 150 * i, 1000, false, Phaser.Easing.Back.Out);\n    });\n  }\n\n  _hideOptions() {\n    this._optionsHideTweens = this._options.map((opt, i) => {\n      opt.alpha = 1;\n      return hideToRight(opt, 150 * i, 1000, false, Phaser.Easing.Back.In);\n    });\n\n    return last(this._optionsHideTweens);\n  }\n\n  _showHand() {\n    this._positions = this._getHintPositions();\n    this._currentPoint = 0;\n\n    this._firstTimeShow();\n  }\n\n  _firstTimeShow() {\n    const point = this._positions[this._currentPoint];\n    this._hand.scale.set(1);\n    this._hand.alpha = 1;\n    this._hand.position.set(point.x, point.y);\n    this._hand.angle = 0;\n    this._hand.visible = true;\n    const { x, y, angle } = this._hand;\n\n    this._showTw = this.game.add\n      .tween(this._hand)\n      .from({ x: x + 50, y: y + 50, angle: angle + 30 }, 400, Phaser.Easing.Cubic.Out, true, 0);\n    this._showTw.universal = true;\n    this._showTw.onComplete.addOnce(() => {\n      this._pointHand();\n    });\n\n    this._alphaTw = this.game.add.tween(this._hand).from({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 0);\n    this._alphaTw.universal = true;\n  }\n\n  _pointHand() {\n    this._scaleTw = handScaleTw(this._hand);\n    this._scaleTw.universal = true;\n\n    this._highlightRunnable = delayRunnable(200, () => {\n      this._options[this._currentPoint].highlightGlow();\n    });\n\n    this._scaleTw.onComplete.addOnce(() => {\n      this._options[this._currentPoint].play();\n      lego.event.emit(ViewEvents.CtaView.OptionPreview, this._currentPoint);\n\n      this._previewRunnable = delayRunnable(4500, () => {\n        this._scaleBackTw = handScaleTw(this._hand);\n        this._scaleBackTw.universal = true;\n\n        this._scaleBackTw.onComplete.addOnce(() => {\n          this._options[this._currentPoint].pause();\n\n          this._currentPoint += 1;\n          if (this._currentPoint === this._positions.length) {\n            this._currentPoint = 0;\n          }\n\n          this._moveHand(this._positions[this._currentPoint]);\n        });\n      });\n    });\n  }\n\n  _moveHand(pos) {\n    this._moveTw = handMoveTw(this._hand, pos);\n    this._moveTw.universal = true;\n    this._moveTw.onComplete.addOnce(() => {\n      this._pointHand();\n    });\n  }\n\n  _getHintPositions() {\n    return this._options.map(opt => {\n      return this.toLocal(opt.toGlobal(opt.playButton.position), undefined);\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getForegroundGridConfig } from '../../configs/grid-configs';\nimport { AdStatus } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { store } from '../../models/store';\nimport { getRetryDelay, hideToUp, showFromUp } from '../../utils';\nimport { CtaLogoView } from '../cta/cta-logo-view';\nimport { LogoView } from './logo-view';\nimport { TutorialView } from './tutorial-view';\n\nfunction getLogo() {\n  if (LP(true, false)) {\n    return new CtaLogoView();\n  }\n  return new LogoView();\n}\n\nexport class ForegroundView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    lego.event\n      .on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this)\n      .on(ModelEvents.AdModel.TutorialUpdate, this._onTutorialUpdate, this);\n  }\n\n  get name() {\n    return 'ForegroundView';\n  }\n\n  get logoPosition() {\n    return this._logoView ? this.toGlobal(this._logoView.position) : null;\n  }\n\n  getGridConfig() {\n    return getForegroundGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    if (this._logoView) {\n      this._destroyLogo();\n      this.setChild('logo', (this._logoView = getLogo()));\n    }\n\n    super.rebuild(config);\n  }\n\n  _removeTweens() {\n    this.game.tweens.remove(this._tutorialHideTw);\n    this.game.tweens.remove(this._logoShowTw);\n    this.game.tweens.remove(this._logoHideTw);\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.PreCta:\n        this._removeTweens();\n        this._tutorialView && this._destroyTutorial();\n\n        this._hideLogo().onComplete.add(this._destroyLogo, this);\n        break;\n      case AdStatus.Game:\n        this._build();\n        this._removeTweens();\n\n        this._logoView && this._destroyLogo();\n        this._buildLogo();\n        this._showLogo();\n        break;\n      default:\n    }\n  }\n\n  _build() {\n    //\n  }\n\n  // LOGO\n  _buildLogo() {\n    this._logoView = getLogo();\n    this.setChild('logo', this._logoView);\n  }\n\n  _destroyLogo() {\n    this._logoView.destroy();\n    this._logoView = null;\n  }\n\n  _showLogo() {\n    const twArg = [this._logoView, getRetryDelay(store.ad.retries), 500, false, Phaser.Easing.Cubic.Out];\n    this._logoShowTw = LP(showFromUp, showFromUp).call(null, ...twArg);\n    return this._logoShowTw;\n  }\n\n  _hideLogo() {\n    const twArg = [this._logoView, 0, 500, false, Phaser.Easing.Cubic.In];\n    this._logoHideTw = LP(hideToUp, hideToUp).call(null, ...twArg);\n    return this._logoHideTw;\n  }\n\n  // TUTORIAL\n  _onTutorialUpdate(tutorial) {\n    if (tutorial) {\n      this._buildTutorial();\n    } else if (this._tutorialView) {\n      this._tutorialHideTw = this._hideTutorial();\n      this._tutorialHideTw.onComplete.add(() => this._destroyTutorial());\n    }\n  }\n\n  _onTutorialSequenceReady() {\n    this.setChild('tutorial', this._tutorialView);\n  }\n\n  _buildTutorial() {\n    this._tutorialView = new TutorialView();\n    this._tutorialView.onSequenceReady.add(this._onTutorialSequenceReady, this);\n  }\n\n  _destroyTutorial() {\n    this._tutorialView.destroy();\n    this._tutorialView = null;\n  }\n\n  _hideTutorial() {\n    const tw = this.game.add.tween(this._tutorialView).to({ alpha: 0 }, 500, Phaser.Easing.Sinusoidal.InOut, true);\n    tw.universal = true;\n\n    return tw;\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getGameLogoLabelTextConfig } from '../../configs/text-configs';\nimport { makeText, searchAtlasByFrame } from '../../utils';\n\nexport class LogoView extends Phaser.Sprite {\n  constructor() {\n    const texture = searchAtlasByFrame('ui/logo.png');\n    super(CI_API.game, 0, 0, texture.key, texture.frame);\n    this.name = 'LogoView';\n    this.anchor.set(0.5);\n\n    this._buildLabel();\n    this._buildBounds();\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(-70, -80, 835, 150);\n  }\n\n  _buildLabel() {\n    const label = makeText(getGameLogoLabelTextConfig());\n    label.anchor.set(0, 0.5);\n    label.x = this.width / 2 + 20;\n    label.y = 5;\n    this.addChild((this._label = label));\n  }\n\n  _buildBounds() {\n    const { x, y, width, height } = this.getBounds();\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xff0000, 0);\n    gr.drawRect(x, y, width, height);\n    gr.endFill();\n\n    gr.inputEnabled = true;\n    gr.name = 'logo';\n\n    this.addChild(gr);\n  }\n}\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable class-methods-use-this */\nimport { InputPriority } from '../../constants';\nimport LU from '../../display/layout-utils';\nimport { getViewByProperty, isSquareLikeScreen, makeImage, postRunnable } from '../../utils/index';\n\nexport class SoundIconBuilder {\n  constructor() {\n    this._onBtn = null;\n\n    this._build();\n  }\n\n  onResize() {\n    this._setPosition();\n  }\n\n  _build() {\n    this._onBtn = makeImage({ frame: 'sound_on.png' });\n    this._onBtn.scale.set(0.8);\n    soundLoader.registerMuteButton(this._onBtn);\n\n    this._onBtn.name = 'mute_button';\n    this._onBtn.input.priorityID = InputPriority.Foreground;\n    CI_API.game.world.add(this._onBtn);\n\n    postRunnable(() => {\n      LU.resizeCall(CI_API.game.world);\n    });\n  }\n\n  _setPosition() {\n    postRunnable(() => {\n      let x;\n      const { logoPosition } = getViewByProperty('name', 'ForegroundView');\n\n      if (logoPosition) {\n        x = LP(logoPosition.x, CI_API.game.width - this._onBtn.width / 2 - 30);\n      } else {\n        const { logoPosition: ctaLogoPos } = getViewByProperty('name', 'CTAView');\n        x = LP(ctaLogoPos.x, CI_API.game.width - this._onBtn.width / 2 - 30);\n      }\n\n      const y = LP(CI_API.game.height / 2 + 15, this._onBtn.height / 2 + (isSquareLikeScreen() ? 0 : 15));\n\n      this._onBtn.x = x;\n      this._onBtn.y = y;\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getTutorialSequenceGridConfig } from '../../configs/grid-configs';\nimport { getTutorialTextConfig } from '../../configs/text-configs';\nimport { store } from '../../models/store';\nimport { fitText, getRetryDelay, makeText } from '../../utils';\n\nexport class TutorialSequenceView extends Phaser2Grid {\n  constructor(config, index) {\n    super(CI_API.game);\n\n    this._showTween = null;\n    this._hideTween = null;\n\n    this._config = config;\n    this._index = index;\n    this.alpha = 0;\n\n    this._build();\n  }\n\n  getGridConfig() {\n    return getTutorialSequenceGridConfig();\n  }\n\n  destroy() {\n    this.game.tweens.remove(this._showTween);\n    this.game.tweens.remove(this._hideTween);\n\n    super.destroy();\n  }\n\n  show() {\n    let delay;\n\n    if (this._index === 0) {\n      delay = getRetryDelay(store.ad.retries);\n    } else {\n      delay = 500;\n    }\n\n    this._showTween = this.game.add.tween(this).to({ alpha: 1 }, 300, Phaser.Easing.Linear.None, true, delay);\n    return this._showTween;\n  }\n\n  hide() {\n    this._hideTween = this.game.add.tween(this).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n    return this._hideTween;\n  }\n\n  _build() {\n    super.build(this.getGridConfig());\n    this._buildLabel();\n  }\n\n  _buildLabel() {\n    let fill;\n    switch (this._index) {\n      case 0:\n      case 2:\n        fill = '#ffffff';\n        break;\n      case 1:\n      case 3:\n        fill = '#fef955';\n        break;\n      default:\n        break;\n    }\n    this._label = makeText(getTutorialTextConfig(this._config.text, fill));\n    this._label.anchor.set(0.5);\n\n    fitText(this._label, 400, 400);\n\n    this.setChild(`${this._index}`, this._label);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getTutorialGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { ViewEvents } from '../../events/view-events';\nimport { store } from '../../models/store';\nimport { postRunnable, removeRunnable } from '../../utils';\nimport { TutorialSequenceView } from './tutorial-sequence-view';\n\nexport class TutorialView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    this._current = null;\n    this.onSequenceReady = new Phaser.Signal();\n\n    lego.event.on(ModelEvents.TutorialSequenceModel.ShowUpdate, this._onTutorialSequenceShowUpdate, this);\n    lego.event.on(ModelEvents.TutorialSequenceModel.CompleteUpdate, this._onTutorialCurrentCompleteUpdate, this);\n  }\n\n  getGridConfig() {\n    return getTutorialGridConfig();\n  }\n\n  destroy(destroyChildren = true, soft = false) {\n    lego.event\n      .off(ModelEvents.TutorialSequenceModel.ShowUpdate, this._onTutorialSequenceShowUpdate, this)\n      .off(ModelEvents.TutorialSequenceModel.CompleteUpdate, this._onTutorialCurrentCompleteUpdate, this);\n\n    removeRunnable(this._showRunnable);\n    this.game.tweens.remove(this._showTw);\n    this.game.tweens.remove(this._hideTw);\n    this._switchScreenInput(false);\n\n    super.destroy(destroyChildren, soft);\n  }\n\n  _onTutorialSequenceShowUpdate() {\n    const { current: sequence } = store.ad.tutorial;\n    if (!sequence) {\n      return;\n    }\n\n    this._buildSequence(sequence, false);\n    this.onSequenceReady.dispatch();\n  }\n\n  _onTutorialCurrentCompleteUpdate(complete) {\n    if (!complete) {\n      return;\n    }\n\n    this._switchScreenInput(false);\n    this._hideTw = this._current.hide();\n    this._hideTw.onComplete.addOnce(() => {\n      this._current.destroy();\n      this._current = null;\n      lego.event.emit(ViewEvents.TutorialView.SequenceHideComplete);\n    });\n  }\n\n  _buildSequence(sequence, force) {\n    this._current = new TutorialSequenceView(sequence.config, sequence.index);\n    this.setChild('sequence', this._current);\n\n    if (!force) {\n      this._showRunnable = postRunnable(() => {\n        this._showTw = this._current.show();\n        this._showTw.onComplete.addOnce(() => {\n          const { clickToComplete } = store.ad.tutorial.current.config;\n          this._switchScreenInput(clickToComplete);\n        });\n      });\n    }\n  }\n\n  _switchScreenInput(enable) {\n    this.game.input.onDown.remove(this._onScreenClick, this);\n\n    enable && this.game.input.onDown.addOnce(this._onScreenClick, this);\n  }\n\n  _onScreenClick() {\n    lego.event.emit(ViewEvents.TutorialView.ScreenClick);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Column, Row } from '../../../configs/board-config';\nimport { getBallImageConfig, getHandImageConfig } from '../../../configs/image-configs';\nimport { BoardState, PadGap, PadHeight, PadState, PadWidth, SoundPartState } from '../../../constants';\nimport { ModelEvents } from '../../../events/model-events';\nimport { ViewEvents } from '../../../events/view-events';\nimport { store } from '../../../models/store';\nimport { getRetryDelay, makeImage, pulse } from '../../../utils';\nimport { difference } from '../../../utils/array/difference';\nimport { Container } from '../../../utils/container';\nimport { PadView } from './pad-view';\n\nexport class BoardView extends Container {\n  constructor() {\n    super();\n\n    this._pads = [];\n\n    this._build();\n\n    lego.event\n      .on(ModelEvents.BoardModel.PadsUpdate, this._onPadsUpdate, this)\n      .on(ModelEvents.BoardModel.StateUpdate, this._onBoardStateUpdate, this)\n      .on(ModelEvents.PadModel.StateUpdate, this._onPadStateUpdate, this)\n      .on(ModelEvents.SoundPartModel.StateUpdate, this._onSoundStateUpdate, this)\n      .on(ModelEvents.TutorialModel.CurrentIndexUpdate, this._onTutorialIndexUpdate, this)\n      .on(ModelEvents.AdModel.HintUpdate, this._onHintUpdate, this);\n  }\n\n  get name() {\n    return 'BoardView';\n  }\n\n  getBounds() {\n    const width = Column * PadWidth + PadGap * 2;\n    const height = Row * PadHeight + PadGap * 3;\n\n    return new Phaser.Rectangle(\n      ...LP([-height / 2, -width / 2, height, width], [-width / 2, -height / 2, width, height])\n    );\n  }\n\n  rebuild() {\n    this._hintView && (this._hintView.angle = LP(-120, -30));\n  }\n\n  _getPadByUuid(uuid) {\n    return this._pads.find(p => p.uuid === uuid);\n  }\n\n  _getPadByPosition(row, column) {\n    return this._pads.find(p => p.row === row && p.column === column);\n  }\n\n  _onPadsUpdate(pads) {\n    this._buildPads(pads);\n  }\n\n  _onBoardStateUpdate(state) {\n    switch (state) {\n      case BoardState.Playing:\n        this._hintView && this._removeHintPulse();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _onTutorialIndexUpdate(index) {\n    switch (index) {\n      case 0:\n      case 2:\n        this._buildBall();\n        this._showBall(index);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _onPadStateUpdate(state, previousState, uuid) {\n    const pad = this._getPadByUuid(uuid);\n\n    switch (state) {\n      case PadState.Idle:\n        pad.idle();\n        break;\n      case PadState.Blocked:\n        pad.block();\n        break;\n      case PadState.Enabled:\n        pad.enable();\n        break;\n      case PadState.Disabled:\n        pad.disable();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _onPadClick(uuid) {\n    const { sound } = store.game.boardModel.getPadByUuid(uuid);\n\n    lego.event.emit(ViewEvents.BoardView.PadClick, uuid, sound);\n  }\n\n  _onSoundStateUpdate(state, previousState, uuid) {\n    switch (state) {\n      case SoundPartState.Simulate:\n        this._ballMovement();\n        this._simulateClick(uuid);\n        break;\n      case SoundPartState.Hint:\n        this._startHintMovement();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _ballMovement() {\n    const simulationSound = store.game.boardModel.getSimulationSoundByState(SoundPartState.Idle);\n\n    if (simulationSound) {\n      const { name, startTime } = simulationSound;\n      const { uuid: padUuid } = store.game.boardModel.getPadBySound(name);\n      const position = store.game.boardModel.simulationSequence.map(e => e.state).indexOf(SoundPartState.Idle);\n      const previousPart = store.game.boardModel.simulationSequence[position - 1];\n\n      const duration = startTime - previousPart.startTime;\n\n      const pad = this._getPadByUuid(padUuid);\n      const { x, y } = pad.position;\n\n      this._moveBall(x, y, duration);\n    } else {\n      this._hideBall().onComplete.add(this._destroyBall, this);\n    }\n  }\n\n  _simulateClick(uuid) {\n    const { name } = store.game.boardModel.getSimulationSoundByUuid(uuid);\n    const { uuid: padUuid } = store.game.boardModel.getPadBySound(name);\n\n    const pad = this._getPadByUuid(padUuid);\n    pad.click();\n  }\n\n  _buildBall() {\n    const { name } = store.game.boardModel.simulationSequence[0];\n    const { uuid } = store.game.boardModel.getPadBySound(name);\n    const { x, y } = this._getPadByUuid(uuid).position;\n\n    this._ball = makeImage(getBallImageConfig());\n    this._ball.scale.set(0.8);\n    this._ball.position.set(x + 35, y - 35);\n\n    this.addChild(this._ball);\n  }\n\n  _showBall(index) {\n    let delay;\n\n    if (index === 0) {\n      delay = getRetryDelay(store.ad.retries);\n    } else {\n      delay = 500;\n    }\n\n    this._ballShowTw = this.game.add.tween(this._ball).from({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true, delay);\n\n    return this._ballShowTw;\n  }\n\n  _hideBall() {\n    this._ballHideTw = this.game.add.tween(this._ball).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n\n    return this._ballHideTw;\n  }\n\n  _destroyBall() {\n    this._ball.destroy();\n    this._ball = null;\n  }\n\n  _moveBall(x, y, duration) {\n    const xArr = [(x + 35) / 1, x + 35];\n    const yArr = [(y - 35) / 1.5, y - 35];\n    this._ballMoveTw = this.game.add\n      .tween(this._ball)\n      .to({ x: xArr, y: yArr }, duration, Phaser.Easing.Linear.None, true, 0);\n    this._ballMoveTw.interpolation(Phaser.Math.bezierInterpolation);\n\n    const scaleArr = [0.8, 0.6, 0.8];\n    this._ballScaleTw = this.game.add\n      .tween(this._ball.scale)\n      .to({ x: scaleArr, y: scaleArr }, duration, Phaser.Easing.Linear.None, true, 0);\n    this._ballScaleTw.interpolation(Phaser.Math.bezierInterpolation);\n\n    this._ballMoveTw.universal = true;\n    this._ballScaleTw.universal = true;\n  }\n\n  // HINT\n  _onHintUpdate(hint) {\n    hint && this._buildHint();\n  }\n\n  _buildHint() {\n    const { name } = store.game.boardModel.playSequence[0];\n    const { uuid } = store.game.boardModel.getPadBySound(name);\n    const { x, y } = this._getPadByUuid(uuid).position;\n\n    this._hintView = makeImage(getHandImageConfig());\n    this._hintView.scale.set(0.9);\n    this._hintView.anchor.set(0.4, 0);\n    this._hintView.position.set(x, y);\n    this._hintView.angle = LP(-120, -30);\n\n    this._hintPulseTw = pulse(this._hintView, 0.1);\n    this.game.add.tween(this._hintView).from({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true, 500);\n\n    this.addChild(this._hintView);\n  }\n\n  _destroyHint() {\n    this._hintView.destroy();\n    this._hintView = null;\n  }\n\n  _hideHint() {\n    this.game.tweens.remove(this._hintPulseTw);\n    this.game.tweens.remove(this._hintScaleTw);\n    this.game.tweens.remove(this._hintMoveTw);\n\n    this._hintHideTw = this.game.add.tween(this._hintView).to({ alpha: 0 }, 300, Phaser.Easing.Linear.None, true);\n\n    return this._hintHideTw;\n  }\n\n  _removeHintPulse() {\n    this._hintView.scale.set(0.9);\n    this.game.tweens.remove(this._hintPulseTw);\n  }\n\n  _startHintMovement() {\n    const simulationSound = store.game.boardModel.getSimulationSoundByState(SoundPartState.Idle);\n\n    if (simulationSound) {\n      const { name, startTime } = simulationSound;\n      const { uuid: padUuid } = store.game.boardModel.getPadBySound(name);\n      const position = store.game.boardModel.simulationSequence.map(e => e.state).indexOf(SoundPartState.Idle);\n      const previousPart = store.game.boardModel.simulationSequence[position - 1];\n\n      const duration = startTime - previousPart.startTime;\n\n      const pad = this._getPadByUuid(padUuid);\n      const { x, y } = pad.position;\n\n      this._moveHint(x, y, duration);\n    } else {\n      this._hideHint().onComplete.add(this._destroyHint, this);\n    }\n  }\n\n  _moveHint(x, y, duration) {\n    const xArr = [x / 1, x];\n    const yArr = [y / 1.5, y];\n    this._hintMoveTw = this.game.add\n      .tween(this._hintView)\n      .to({ x: xArr, y: yArr }, duration, Phaser.Easing.Linear.None, true, 0);\n    this._hintMoveTw.interpolation(Phaser.Math.bezierInterpolation);\n\n    const scaleArr = [0.6, 0.9, 0.6];\n    this._hintScaleTw = this.game.add\n      .tween(this._hintView.scale)\n      .to({ x: scaleArr, y: scaleArr }, duration, Phaser.Easing.Linear.None, true, 0);\n    this._hintScaleTw.interpolation(Phaser.Math.bezierInterpolation);\n\n    this._hintMoveTw.universal = true;\n    this._hintScaleTw.universal = true;\n  }\n\n  _build() {\n    // this._buildBounds();\n  }\n\n  _buildBounds() {\n    const { x, y, width, height } = this.getBounds();\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xff0000, 0.5);\n    gr.drawRect(x, y, width, height);\n    gr.endFill();\n    this.addChild(gr);\n  }\n\n  _buildPads(pads) {\n    const padsModels = pads.map(p => p.uuid);\n    const padsView = this._pads.map(p => p.uuid);\n\n    const newPads = difference(padsModels, padsView);\n\n    newPads.forEach(uuid => {\n      const { row, column } = store.game.boardModel.getPadByUuid(uuid);\n      const pad = new PadView(uuid);\n\n      pad.onClick.add(this._onPadClick, this);\n      pad.position.set(\n        column * (PadWidth + PadGap) - (PadWidth + PadGap),\n        row * (PadHeight + PadGap) - (PadHeight + PadGap) * 1.5\n      );\n\n      this._pads.push(pad);\n      this.addChild(pad);\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { getPadImageConfig, getPadInnerGlowImageConfig } from '../../../configs/image-configs';\nimport { store } from '../../../models/store';\nimport { makeImage } from '../../../utils';\nimport { Container } from '../../../utils/container';\n\nexport class PadView extends Container {\n  constructor(uuid) {\n    super();\n\n    this._uuid = uuid;\n    this.onClick = new Phaser.Signal();\n\n    this._build();\n  }\n\n  get name() {\n    return 'PadView';\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  idle() {\n    this._blocker.alpha = 0;\n  }\n\n  block() {\n    this._blocker.alpha = 0.8;\n  }\n\n  enable() {\n    this._bg.inputEnabled = true;\n    this._bg.events.onInputDown.add(this._onClick, this);\n  }\n\n  disable() {\n    this._bg.inputEnabled = false;\n    this._bg.events.onInputDown.remove(this._onClick, this);\n  }\n\n  click() {\n    this.scale.set(1);\n    this._outline.alpha = 1;\n    this._innerGlow.alpha = 1;\n    this._outline.scale.set(1, 1);\n\n    this.game.tweens.remove(this._padScaleTw);\n    this.game.tweens.remove(this._outlineScaleTw);\n    this.game.tweens.remove(this._outlineAlphaTw);\n\n    this._padScaleTw = this.game.add\n      .tween(this.scale)\n      .to({ x: 0.8, y: 0.8 }, 100, Phaser.Easing.Cubic.InOut, true, 0, 0, true);\n\n    this._outlineScaleTw = this.game.add\n      .tween(this._outline.scale)\n      .to({ x: 1.5, y: 1.5 }, 500, Phaser.Easing.Cubic.InOut, true, 0);\n\n    this._outlineAlphaTw = this.game.add.tween(this._outline).to({ alpha: 0 }, 500, Phaser.Easing.Cubic.InOut, true, 0);\n\n    this._padScaleTw.universal = true;\n\n    this._padScaleTw.onComplete.add(() => {\n      this._innerGlow.alpha = 0;\n    });\n\n    this._outlineAlphaTw.onComplete.add(() => {\n      this._outline.scale.set(1, 1);\n      this._outline.alpha = 1;\n    });\n  }\n\n  _build() {\n    this._buildOutline();\n    this._buildBg();\n    this._buildInnerGlow();\n    this._buildBlocker();\n  }\n\n  _buildOutline() {\n    const gr = this.game.add.graphics();\n    gr.lineStyle(5, 0xffffff, 1);\n    gr.drawRoundedRect(-70, -70, 140, 140, 10);\n    gr.endFill();\n\n    this.addChild((this._outline = gr));\n  }\n\n  _buildBg() {\n    const { color } = store.game.boardModel.getPadByUuid(this._uuid);\n    this._bg = makeImage(getPadImageConfig(color));\n    this._bg.name = store.game.boardModel.getPadByUuid(this._uuid).sound;\n\n    this.addChild(this._bg);\n  }\n\n  _buildInnerGlow() {\n    this._innerGlow = makeImage(getPadInnerGlowImageConfig());\n    this._innerGlow.alpha = 0;\n\n    this.addChild(this._innerGlow);\n  }\n\n  _buildBlocker() {\n    this._blocker = makeImage(getPadImageConfig('cube_black'));\n\n    this.addChild(this._blocker);\n  }\n\n  _onClick() {\n    this.click();\n    this.onClick.dispatch(this._uuid);\n  }\n}\n","import { getProgressBarDotGlowImageConfig, getProgressBarDotImageConfig } from '../../configs/image-configs';\nimport { makeImage, postRunnable } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class DotComponent extends Container {\n  constructor(uuid) {\n    super();\n\n    this._uuid = uuid;\n\n    this._build();\n  }\n\n  get uuid() {\n    return this._uuid;\n  }\n\n  getBounds() {\n    return this._dot.getBounds();\n  }\n\n  idle() {\n    this._fill.alpha = 0;\n    this._glow.alpha = 0;\n    this.game.tweens.remove(this._alphaTw);\n  }\n\n  glow() {\n    postRunnable(() => {\n      this._alphaTw = this.game.add\n        .tween(this._glow)\n        .to({ alpha: 1 }, 1000, Phaser.Easing.Sinusoidal.InOut, true, 0, -1, true);\n      this._alphaTw.universal = true;\n    });\n  }\n\n  fill() {\n    this._fill.alpha = 1;\n  }\n\n  _build() {\n    this._buildGlow();\n    this._buildDot();\n    this._buildFill();\n  }\n\n  _buildGlow() {\n    this._glow = makeImage(getProgressBarDotGlowImageConfig());\n\n    this.addChild(this._glow);\n  }\n\n  _buildDot() {\n    this._dot = makeImage(getProgressBarDotImageConfig());\n\n    this.addChild(this._dot);\n  }\n\n  _buildFill() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xfef955, 1);\n    gr.drawCircle(0, 0, 25);\n    gr.endFill();\n\n    this.addChild((this._fill = gr));\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getGameGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { BoardView } from './board/board-view';\nimport { ProgressBarView } from './progress-bar-view';\nimport { TimerView } from './timer-view';\n\nexport class GameView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    this._boardView = null;\n\n    lego.event\n      .on(ModelEvents.GameModel.BoardModelUpdate, this._onBoardUpdate, this)\n      .on(ModelEvents.GameModel.ProgressBarModelUpdate, this._onProgressBarUpdate, this);\n  }\n\n  get name() {\n    return 'GameView';\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    this._boardView && this._rebuildBoard();\n    this._progressBarView && this._rebuildProgressBar();\n\n    super.rebuild(config);\n  }\n\n  _rebuildBoard() {\n    this._boardView.rebuild();\n    this._boardView.angle = LP(90, 0);\n  }\n\n  _rebuildProgressBar() {\n    this._progressBarView.rebuild();\n    this._progressBarView.angle = LP(-90, 0);\n  }\n\n  getGridConfig() {\n    return getGameGridConfig();\n  }\n\n  // BOARD\n  _onBoardUpdate(board) {\n    board && this._buildBoard();\n  }\n\n  _buildBoard() {\n    this._boardView && this._destroyBoard();\n\n    this._boardView = new BoardView();\n    this._boardView.angle = LP(90, 0);\n    this.setChild('board', this._boardView);\n  }\n\n  _destroyBoard() {\n    this._boardView.destroy();\n    this._boardView = null;\n  }\n\n  // PROGRESS BAR\n  _onProgressBarUpdate(progressBar) {\n    progressBar && this._buildProgressBar();\n  }\n\n  _buildProgressBar() {\n    this._progressBarView && this._destroyProgressBar();\n    this._progressBarView = new ProgressBarView();\n    this._progressBarView.angle = LP(-90, 0);\n    this.setChild('progress_bar', this._progressBarView);\n  }\n\n  _destroyProgressBar() {\n    this._progressBarView.destroy();\n    this._progressBarView = null;\n  }\n\n  // TIMER\n  _onTimerUpdate(timer) {\n    timer ? this._buildTimer() : this._destroyTimer();\n  }\n\n  _buildTimer() {\n    this._timerView = new TimerView();\n    this.setChild('timer', this._timerView);\n  }\n\n  _destroyTimer() {\n    this._timerView.destroy();\n    this._timerView = null;\n  }\n}\n","import { getProgressBarTriangleImageConfig } from '../../configs/image-configs';\nimport { getPointerTextConfig } from '../../configs/text-configs';\nimport { fitText, makeImage, makeText } from '../../utils';\nimport { Container } from '../../utils/container';\n\nexport class PointerComponent extends Container {\n  constructor() {\n    super();\n\n    this._build();\n\n    this.updateText(0);\n  }\n\n  updateText(percent) {\n    this._label.setText({\n      text: `${parseInt(percent, 10)} %`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n  }\n\n  rebuild() {\n    this._repositionText();\n  }\n\n  _repositionText() {\n    this._label.angle = LP(90, 0);\n    this._label.anchor.set(LP(1, 0.5), LP(0.5, 1));\n    this._label.position.set(LP(-2, 0), LP(this._pointer.top - 5, this._pointer.top));\n  }\n\n  _build() {\n    this._buildPointer();\n    this._buildText();\n  }\n\n  _buildPointer() {\n    this._pointer = makeImage(getProgressBarTriangleImageConfig());\n    this._pointer.anchor.set(0.5, 1);\n\n    this.addChild(this._pointer);\n  }\n\n  _buildText() {\n    this._label = makeText(getPointerTextConfig());\n    this._repositionText();\n\n    fitText(this._label, this._pointer.width * 0.95, this._pointer.height);\n\n    this.addChild(this._label);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { AdStatus, DotState } from '../../constants';\nimport { ModelEvents } from '../../events/model-events';\nimport { store } from '../../models/store';\nimport { difference } from '../../utils/array/difference';\nimport { Container } from '../../utils/container';\nimport { DotComponent } from './dot-component';\nimport { PointerComponent } from './pointer-component';\n\nexport class ProgressBarView extends Container {\n  constructor() {\n    super();\n\n    this._dots = [];\n\n    lego.event\n      .on(ModelEvents.ProgressBarModel.DotsUpdate, this._onDotsUpdate, this)\n      .on(ModelEvents.DotModel.StateUpdate, this._onDotsStateUpdate, this)\n      .on(ModelEvents.ProgressBarModel.ProgressUpdate, this._onProgressUpdate, this);\n\n    this._build();\n  }\n\n  getBounds() {\n    return new Phaser.Rectangle(...LP([-13.5, -250, 27, 500], [-250, -13.5, 500, 27]));\n  }\n\n  rebuild() {\n    store.ad.status !== AdStatus.Cta && this._updateProgress(store.game.progressBarModel.progress);\n    this._pointer && this._pointer.rebuild();\n  }\n\n  _onDotsUpdate(dots) {\n    this._buildDots(dots);\n  }\n\n  _onDotsStateUpdate(state, previousValue, uuid) {\n    const dot = this._getDotByUuid(uuid);\n\n    switch (state) {\n      case DotState.Idle:\n        dot.idle();\n        break;\n      case DotState.Glowing:\n        dot.glow();\n        break;\n      case DotState.Filled:\n        dot.fill();\n        break;\n      default:\n        break;\n    }\n  }\n\n  _onProgressUpdate(progress) {\n    this._updateProgress(progress);\n  }\n\n  _updateProgress(progress) {\n    this._updatePointer(progress);\n    this._updateGrWidth(this._maskRect, progress);\n  }\n\n  _getDotByUuid(uuid) {\n    return this._dots.find(d => d.uuid === uuid);\n  }\n\n  _updateGrWidth(gr, progress) {\n    const { x, y, width, height } = this._fill;\n    gr.clear();\n    gr.beginFill(0xff0000, 0.6);\n    gr.drawRect(x - width / 2, y - height / 2, width * progress, height);\n    gr.endFill();\n  }\n\n  _updatePointer(progress) {\n    this._pointer.updateText(progress * 100);\n    this._pointer.position.set(progress * this._bg.width - this._bg.width / 2, -10);\n  }\n\n  _build() {\n    this._buildBg();\n    this._buildFill();\n    this._buildMask();\n    this._buildPointerComponent();\n\n    this._buildBounds();\n  }\n\n  _buildBounds() {\n    const { x, y, width, height } = this.getBounds();\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xff0000, 0);\n    gr.drawRect(x, y, width, height);\n    gr.endFill();\n    this.addChild(gr);\n  }\n\n  _buildBg() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x9396ff, 1);\n    gr.drawRoundedRect(-250, -10, 500, 20, 20);\n    gr.endFill();\n\n    this.addChild((this._bg = gr));\n  }\n\n  _buildFill() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0xfef955, 1);\n    gr.drawRoundedRect(-250, -10, 500, 20, 20);\n    gr.endFill();\n\n    this.addChild((this._fill = gr));\n  }\n\n  _buildMask() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x00ff00);\n    gr.drawRect(0, 0, 0, 0);\n    this.addChild((this._maskRect = gr));\n\n    this._fill.mask = gr;\n  }\n\n  _buildPointerComponent() {\n    this._pointer = new PointerComponent();\n    this._pointer.position.set(this._bg.left, -10);\n\n    this.addChild(this._pointer);\n  }\n\n  _buildDots(dots) {\n    const dotsModels = dots.map(d => d.uuid);\n    const dotsView = this._dots.map(d => d.uuid);\n\n    const newDots = difference(dotsModels, dotsView);\n\n    newDots.forEach(uuid => {\n      const dot = new DotComponent(uuid);\n\n      dot.position.set(this._dots.length * (this._bg.width / 2) - this._bg.width / 2, 0);\n\n      this._dots.push(dot);\n\n      this.addChild(dot);\n    });\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { getGameTime } from '../../configs/board-config';\nimport { getTimerTextConfig } from '../../configs/text-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { Container } from '../../utils/container';\nimport { fitText, makeText, msToTime } from '../../utils/index';\n\nexport class TimerView extends Container {\n  constructor() {\n    super();\n\n    lego.event\n      .on(ModelEvents.TimerModel.RemainingUpdate, this._onTimerUpdate, this)\n      .on(ModelEvents.TimerModel.StoppedUpdate, this._onTimerStoppedUpdate, this);\n\n    this._build();\n    this._updateText(getGameTime());\n  }\n\n  get name() {\n    return 'TimerView';\n  }\n\n  _updateText(value) {\n    const time = msToTime(value);\n    this._label.setText({\n      text: `${parseInt(time.secondsStr, 10)}`,\n      ignoreLocalization: true,\n      toString: function toString() {\n        return this;\n      }\n    });\n  }\n\n  destroy() {\n    super.destroy();\n  }\n\n  _onTimerStoppedUpdate(stopped) {\n    if (stopped) {\n      // this._hide();\n    }\n  }\n\n  _onTimerUpdate(newValue) {\n    this._updateText(newValue);\n  }\n\n  _build() {\n    this._buildBg();\n    this._buildText();\n  }\n\n  _buildBg() {\n    const gr = this.game.add.graphics();\n    gr.beginFill(0x000000, 0.5);\n    gr.drawRoundedRect(-100, -50, 200, 100, 20);\n    gr.endFill();\n\n    this.addChild((this._bg = gr));\n  }\n\n  _buildText() {\n    this._label = makeText(getTimerTextConfig());\n    this._label.anchor.set(0.5);\n\n    fitText(this._label, this._bg.width * 0.95, this._bg.height);\n\n    this.addChild(this._label);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getMainGridConfig } from '../configs/grid-configs';\nimport { AdStatus } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { postRunnable } from '../utils';\nimport { BackgroundView } from './background/background-view';\nimport { CTAContainer } from './cta/cta-container';\nimport { ForegroundView } from './foreground/foreground-view';\nimport { SoundIconBuilder } from './foreground/sound-icon-builder';\nimport { GameView } from './game/game-view';\nimport { UIView } from './ui/ui-view';\n\nexport class MainView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build();\n\n    lego.event\n      .on(ViewEvents.Game.Resize, this._onResize, this)\n      .on(ModelEvents.AdModel.StatusUpdate, this._onAdStatusUpdate, this)\n      .on(ModelEvents.SoundModel.IconUpdate, this._onSoundIconUpdate, this);\n  }\n\n  get name() {\n    return 'MainView';\n  }\n\n  getGridConfig() {\n    return getMainGridConfig();\n  }\n\n  build() {\n    super.build(this.getGridConfig());\n\n    this.setChild('main', new BackgroundView());\n    this.setChild('main', new GameView());\n    this.setChild('main', new UIView());\n    this.setChild('main', (this._ctaView = new CTAContainer()));\n    this.setChild('main', new ForegroundView());\n\n    postRunnable(CI_API.LU.refresh, CI_API.LU);\n  }\n\n  _onSoundIconUpdate(value) {\n    value && this._buildSoundIcon();\n  }\n\n  // SOUND\n  _buildSoundIcon() {\n    this._sound = new SoundIconBuilder();\n  }\n\n  _onResize() {\n    this._sound && this._sound.onResize();\n    this.rebuild(this.getGridConfig());\n  }\n\n  _onAdStatusUpdate(status) {\n    switch (status) {\n      case AdStatus.Cta:\n        this.rebuildChild(this._ctaView);\n        break;\n      default:\n    }\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { getPersistentCtaButtonConfig } from '../../configs/button-configs';\nimport { getPCTASparkleEmitterConfig } from '../../configs/particles-configs';\nimport { ViewEvents } from '../../events/view-events';\nimport { isSquareLikeScreen, makeEmitter, pulse } from '../../utils';\nimport { Button } from '../../utils/button/button';\nimport { Container } from '../../utils/container';\n\nexport class PersistentCTAView extends Container {\n  constructor() {\n    super();\n    this._build();\n  }\n\n  getBounds() {\n    const { width, height } = this._button;\n    return new Phaser.Rectangle(-width / 2, -height / 2, width, height);\n  }\n\n  destroy() {\n    this._sparkleEmitter && (this._sparkleEmitter.paused = true);\n    this.game.tweens.removeFrom(this._button);\n    this.game.tweens.removeFrom(this._button.scale);\n    super.destroy();\n  }\n\n  rebuild() {\n    this._button.scale.set(LP(isSquareLikeScreen() ? 0.5 : 0.6, 0.8));\n  }\n\n  _build() {\n    this._buildButton();\n    this._buildPersistentCtaEffect();\n  }\n\n  _buildPersistentCtaEffect() {\n    const effect = CI_API.Globals.PARAMS.pcta_button_effect;\n    switch (effect) {\n      case 'sparkle':\n        this._buildSparkle();\n        break;\n      case 'pulse':\n        pulse(this);\n        break;\n      case 'both':\n        this._buildSparkle();\n        pulse(this);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _buildButton() {\n    this._button = new Button(getPersistentCtaButtonConfig());\n    this._button.onClick.add(() => lego.event.emit(ViewEvents.PersistentCtaView.Click), this);\n    this._button.scale.set(LP(isSquareLikeScreen() ? 0.5 : 0.6, 0.8));\n    this.addChild(this._button);\n  }\n\n  _buildSparkle() {\n    const { x, y, width, height } = this;\n    this._sparkleEmitter = makeEmitter(getPCTASparkleEmitterConfig(this, { x, y, width, height }));\n    this.bringToTop(this._button);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\nimport { getUIGridConfig } from '../../configs/grid-configs';\nimport { ModelEvents } from '../../events/model-events';\nimport { store } from '../../models/store';\nimport { getRetryDelay, hideToBottom, showFromBottom } from '../../utils';\nimport { PersistentCTAView } from './persistent-cta-view';\n\nexport class UIView extends Phaser2Grid {\n  constructor() {\n    super(CI_API.game);\n    this.build(this.getGridConfig());\n\n    lego.event.on(ModelEvents.AdModel.PersistentCtaUpdate, this._onPersistentCtaUpdate, this);\n  }\n\n  get name() {\n    return 'UIView';\n  }\n\n  getGridConfig() {\n    return getUIGridConfig();\n  }\n\n  rebuild(config) {\n    if (!this.grid) {\n      return;\n    }\n\n    this._persistentCtaView && this._persistentCtaView.rebuild();\n\n    super.rebuild(config);\n  }\n\n  // PERSISTENT\n  _onPersistentCtaUpdate(persistentCta) {\n    if (persistentCta) {\n      this.game.tweens.remove(this._hideTw);\n      this._hideTw = null;\n      this._persistentCtaView && this._destroyPersistentCta();\n      this._buildPersistentCta();\n      this._showPersistentCta();\n    } else {\n      this.game.tweens.remove(this._showTw);\n      this._showTw = null;\n      this._hidePersistentCta().onComplete.add(this._destroyPersistentCta, this);\n    }\n  }\n\n  _buildPersistentCta() {\n    this.setChild('p_cta', (this._persistentCtaView = new PersistentCTAView()));\n  }\n\n  _destroyPersistentCta() {\n    this._persistentCtaView.destroy();\n    this._persistentCtaView = null;\n  }\n\n  _showPersistentCta() {\n    const twArg = [this._persistentCtaView, getRetryDelay(store.ad.retries), 500, false, Phaser.Easing.Cubic.Out];\n    this._showTw = LP(showFromBottom, showFromBottom).call(null, ...twArg);\n    return this._showTw;\n  }\n\n  _hidePersistentCta() {\n    const twArg = [this._persistentCtaView, 0, 500, false, Phaser.Easing.Cubic.In];\n    this._hideTw = LP(hideToBottom, hideToBottom).call(null, ...twArg);\n    return this._hideTw;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nconst toSnakeCase = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('_');\n\nfunction logCtaOverride() {\n  analytics.logProgress('cta_override', 'restart');\n}\n\nfunction logIdledCta() {\n  analytics.logProgress('objective', 'idle');\n}\n\nfunction logItemsToCtaReached() {\n  analytics.logProgress('objective', 'completed');\n}\n\nfunction logCta() {\n  switch (store.ad.cta.reason) {\n    case GameOverReasons.Idled:\n      logIdledCta();\n      break;\n    case GameOverReasons.ItemsToCtaReached:\n      logItemsToCtaReached();\n      break;\n    default:\n      throw new Error(`Unknown CTA reason`);\n  }\n}\n\nfunction onGameDown(pointer) {\n  if (!pointer.targetObject || !pointer.targetObject.sprite) {\n    analytics.logClick('first_interaction_click', 'unknown');\n    return;\n  }\n  analytics.logClick('first_interaction_click', toSnakeCase(pointer.targetObject.sprite.name));\n}\n\nfunction onCtaScreenClick() {\n  analytics.logClick('cta_click', 'cta_overlay');\n}\n\nfunction onCtaPlayClick() {\n  analytics.logClick('cta_click', 'cta_button');\n}\n\nfunction onCtaRetryClick() {\n  analytics.logClick('cta_click', 'retry_button');\n}\n\nfunction onCtaOptionClick(optionName) {\n  analytics.logClick('option_click', optionName);\n}\n\nfunction onPersistentCtaClick() {\n  analytics.logClick('cta_click', 'persistent_cta_button');\n}\n\nfunction onTutorialCompleteUpdate(complete) {\n  if (complete) {\n    analytics.logProgress('tutorial', 'complete');\n  }\n}\n\nfunction onTutorialSkipUpdate(skip) {\n  if (skip) {\n    analytics.logProgress('tutorial', 'skipped');\n  }\n}\n\nfunction onViewStateUpdate(state) {\n  switch (state) {\n    case AdViewState.Create:\n      CI_API.game.input.onDown.addOnce(onGameDown, this);\n      lego.event.off(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this);\n      break;\n    default:\n  }\n}\n\nfunction onAdStatusUpdate(status) {\n  switch (status) {\n    case AdStatus.Restart:\n      logCtaOverride();\n      break;\n    default:\n  }\n}\n\nfunction onCtaVisibleUpdate(visible) {\n  if (!visible) {\n    return;\n  }\n\n  logCta();\n}\n\nexport function AnalyticsObservant() {\n  lego.event\n    .on(ViewEvents.CtaView.ScreenClick, onCtaScreenClick, this)\n    .on(ViewEvents.CtaView.PlayClick, onCtaPlayClick, this)\n    .on(ViewEvents.CtaView.RetryClick, onCtaRetryClick, this)\n    .on(ViewEvents.CtaView.OptionClick, onCtaOptionClick, this)\n    .on(ViewEvents.PersistentCtaView.Click, onPersistentCtaClick, this)\n    .on(ModelEvents.TutorialModel.CompleteUpdate, onTutorialCompleteUpdate, this)\n    .on(ModelEvents.TutorialModel.SkipUpdate, onTutorialSkipUpdate, this)\n    .on(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this)\n    .on(ModelEvents.AdModel.StatusUpdate, onAdStatusUpdate, this)\n    .on(ModelEvents.CtaModel.VisibleUpdate, onCtaVisibleUpdate, this);\n}\n","import { lego } from '@armathai/lego';\nimport { AdStatus, SoundPartState } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nlet sfx;\n\nfunction play(id, volume = 1) {\n  sfx.play(id, volume);\n}\n\nfunction stop(id) {\n  sfx.stop(id);\n}\n\nfunction onLoadCompleteUpdate(complete) {\n  if (!complete) {\n    return;\n  }\n\n  sfx = soundLoader.addAudioSprite('audio');\n}\n\nfunction onAdStatusUpdate(status) {\n  switch (status) {\n    case AdStatus.Game:\n      stop('faded_preview');\n      stop('closer_preview');\n      break;\n    case AdStatus.PreCta:\n      stop('first_sequence');\n      stop('second_sequence');\n      stop('drum_1');\n      stop('drum_2');\n      stop('drum_3');\n      stop('missing_part_1');\n      stop('missing_part_2');\n      break;\n    default:\n      break;\n  }\n}\n\nfunction onPadClick(uuid, sound) {\n  play(sound);\n}\n\nfunction onSoundPartStateUpdate(state, previousState, uuid) {\n  switch (state) {\n    case SoundPartState.Autoplay:\n      play(store.game.boardModel.getAutoPlaySoundByUuid(uuid).name);\n      break;\n    case SoundPartState.Simulate:\n      play(store.game.boardModel.getSimulationSoundByUuid(uuid).name);\n      break;\n    default:\n      break;\n  }\n}\n\nfunction onOptionPreview(option) {\n  switch (option) {\n    case 0:\n      play('faded_preview');\n      break;\n    case 1:\n      play('closer_preview');\n      break;\n    default:\n      break;\n  }\n}\n\nexport function SoundObservant() {\n  lego.event\n    .on(ModelEvents.LoadModel.CompleteUpdate, onLoadCompleteUpdate, this)\n    .on(ModelEvents.AdModel.StatusUpdate, onAdStatusUpdate, this)\n    .on(ViewEvents.BoardView.PadClick, onPadClick, this)\n    .on(ModelEvents.SoundPartModel.StateUpdate, onSoundPartStateUpdate, this)\n    .on(ViewEvents.CtaView.OptionPreview, onOptionPreview, this);\n}\n","import { lego } from '@armathai/lego';\nimport { AdViewState, GameOverReasons } from '../constants';\nimport { ModelEvents } from '../events/model-events';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\n\nfunction hideSplash() {\n  wrapper_hide_splash();\n}\n\nfunction onLoadProgress(progress) {\n  wrapper_load_progress(progress);\n}\n\nfunction onLoadComplete() {\n  wrapper_preload_complete();\n}\n\nfunction onViewStateUpdate(state) {\n  state === AdViewState.Create && hideSplash();\n}\n\nfunction clickGo() {\n  wrapper_click_go();\n}\n\nfunction onCtaVisibleUpdate(visible) {\n  if (!visible) {\n    return;\n  }\n\n  if (store.ad.cta.reason === GameOverReasons.Unknown) {\n    // eslint-disable-next-line no-console\n    console.error('Please provide game over reason');\n  }\n\n  wrapper_mark_cta(store.ad.cta.reason);\n}\n\nfunction markInteraction() {\n  wrapper_mark_interaction();\n}\n\nexport function WrapperObservant() {\n  lego.event\n    .on(ModelEvents.LoadModel.ProgressUpdate, onLoadProgress, this)\n    .on(ModelEvents.LoadModel.CompleteUpdate, onLoadComplete, this)\n    .on(ModelEvents.AdModel.ViewStateUpdate, onViewStateUpdate, this)\n    .on(ViewEvents.PersistentCtaView.Click, clickGo, this)\n    .on(ViewEvents.CtaView.ScreenClick, clickGo, this)\n    .on(ViewEvents.CtaView.PlayClick, clickGo, this)\n    .on(ViewEvents.CtaView.OptionClick, clickGo, this)\n    .on(ModelEvents.CtaModel.VisibleUpdate, onCtaVisibleUpdate, this)\n    .on(ViewEvents.Game.UserInteraction, markInteraction, this);\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport { AdStatus, AdViewState } from '../constants';\nimport { ViewEvents } from '../events/view-events';\nimport { store } from '../models/store';\nimport { MainView } from '../objects/main-view';\nimport { manageUniversalTweens } from '../utils';\n\nexport class GameState extends Phaser.State {\n  constructor() {\n    super();\n\n    this._adModel = store.ad;\n    this._mainView = null;\n  }\n\n  init() {\n    super.init();\n\n    store.ad.viewState = AdViewState.Init;\n  }\n\n  preload(game) {\n    super.preload(game);\n\n    store.ad.viewState = AdViewState.Preload;\n  }\n\n  create(game) {\n    super.create(game);\n\n    this._mainView = new MainView();\n\n    this.input.onDown.add(() => {\n      lego.event.emit(ViewEvents.Game.UserInteraction);\n    });\n\n    this.game.world.handleResize = orientation => {\n      manageUniversalTweens();\n      lego.event.emit(ViewEvents.Game.Resize, orientation);\n    };\n\n    store.ad.viewState = AdViewState.Create;\n  }\n\n  shutdown(game) {\n    store.ad.viewState = AdViewState.ShutDown;\n\n    super.shutdown(game);\n  }\n\n  update() {\n    const { Globals, game } = CI_API;\n\n    super.update(game);\n\n    if (ad_state === 'live' && this._adModel.status !== AdStatus.Cta) {\n      if (game.time.totalElapsedSeconds() - Globals.LAST_INTERACTION_TIME > Globals.PARAMS.cta_on_idle_time * 0.001) {\n        lego.event.emit(ViewEvents.GameState.CtaIdleTime);\n      }\n    }\n  }\n\n  victory(_reason) {\n    //\n  }\n\n  defeat(_reason) {\n    //\n  }\n}\n","/* eslint-disable class-methods-use-this */\nimport { lego } from '@armathai/lego';\nimport LU from '../display/layout-utils';\nimport { ViewEvents } from '../events/view-events';\nimport '../kernel/atlas-rescale';\nimport '../kernel/multiple-atlas';\nimport { store } from '../models/store';\n\nexport class PreloaderState extends Phaser.State {\n  init() {\n    if (this.game && this.game.device && this.game.device.touch) {\n      this.game.input.mouse.stop();\n    }\n    this.stage.backgroundColor = '#010101';\n    this.stage.disableVisibilityChange = true;\n\n    LU.init(this.game, true);\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * Enable handlers and use imageLoader to preload assets\n   *\n   * @name preload\n   * @function\n   * @returns {void}\n   */\n  preload() {\n    utils.enableHandlers(this.game);\n\n    imageLoader.registerGame(this.game);\n    /**\n     * Loading assets and modules due to xp-assets.json file params\n     */\n    xp.loadAssets({\n      // spine: [\n      //   'tiffy_happy',              // Spine name can be set as the string\n      //   {name:'yeti_dance'},              // Spine name can be set as Object.name value\n      //   {name: 'mr-toffe', scale: 0.5}  // define the custom scale of Spine animation if needed\n      //   {name: 'mr-toffe', scale: 0.5, basePath: 'spineAnimation1/'}  // define custom spine assets path\n      // ]\n    });\n    if (CI_API.Globals.PARAMS.sound) {\n      this.preloadAudio();\n    }\n  }\n\n  preloadAudio() {\n    soundLoader.registerGame(this.game);\n    soundLoader.loadAudioSprite(\n      'audio',\n      `${CI_API.Globals.WEB_ROOT}/audio/audio.mp3`,\n      `${CI_API.Globals.WEB_ROOT}/embed/audio.json`\n    );\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   *\n   * @name create\n   * @function\n   * @returns {void}\n   */\n  create() {\n    store.ad.load.complete = true;\n  }\n\n  /**\n   * @name loadUpdate\n   * @function\n   * @returns {void}\n   */\n  loadUpdate() {\n    store.ad.load.progress = this.game.load.progress;\n  }\n\n  /**\n   * Required function, please do not delete <br>\n   * ad_state being set to live is important for partnerships\n   *\n   * @name update\n   * @function\n   * @returns {void}\n   */\n  update() {\n    if (ad_state === 'ready') {\n      ad_state = 'live';\n\n      lego.event.emit(ViewEvents.Ad.Live);\n    }\n  }\n}\n","localization.registerStrings({\n  'Tutorial Text 1': {\n    en: 'Tap to listen!'\n  },\n  'Tutorial Text 2': {\n    en: \"Now it's your turn!\"\n  },\n  cta_btn_persistent_text: {\n    en: 'MAKE YOUR OWN BEAT'\n  },\n  'Download Now': {\n    en: 'DOWNLOAD NOW'\n  },\n  Download: {\n    en: 'DOWNLOAD'\n  },\n  'Play Now': {\n    en: 'PLAY NOW'\n  },\n  Play: {\n    en: 'PLAY'\n  },\n  Continue: {\n    en: 'CONTINUE'\n  },\n  RETRY: {\n    en: 'RETRY'\n  },\n  'NEXT SONG': {\n    en: 'NEXT SONG'\n  },\n  'WELL DONE!': {\n    en: 'WELL DONE!'\n  },\n  'BEAT MAKER PRO': {\n    en: 'BEAT MAKER PRO'\n  },\n  Choose: {\n    en: 'Choose '\n  },\n  'your next song!': {\n    en: 'your next song!'\n  },\n  Faded: {\n    en: 'Faded'\n  },\n  Closer: {\n    en: 'Closer'\n  },\n  'Alan Walker': {\n    en: 'Alan Walker'\n  },\n  'The Chainsmokers': {\n    en: 'The Chainsmokers'\n  },\n  'Original by': {\n    en: 'Original by'\n  }\n});\n\n","export const difference = (arrA, arrB) => {\n  return arrA.filter(x => !arrB.includes(x));\n};\n","export const last = arr => {\n  return arr.slice(-1)[0];\n};\n","/* eslint-disable class-methods-use-this */\nimport { InputHandler } from './input-handler';\n\nexport class AbstractButton extends InputHandler {\n  constructor({ states, input }) {\n    super();\n\n    this.onClick = new Phaser.Signal();\n    this.states = this.createStates(states);\n    this.inputArea = this.createHitArea(input);\n\n    this.switchEnable(true);\n  }\n\n  switchEnable(value) {\n    super.switchInput(value);\n\n    this.setState('up');\n\n    if (value === false) {\n      this.setState('disable');\n    }\n  }\n\n  // override\n  onDown(_target, _pointer) {\n    this.setState('down');\n  }\n\n  // override\n  onUp(target, pointer, isOver) {\n    this.setState('up');\n\n    if (isOver) {\n      this.onClick.dispatch(this);\n    }\n  }\n\n  createStates({ up = null, down = null, disable = null } = {}) {\n    return {\n      up: up && this.createState(up),\n      down: down && this.createState(down),\n      disable: disable && this.createState(disable)\n    };\n  }\n\n  // abstract\n  createState(_config) {\n    throw new Error('createState abstract function is not implemented');\n  }\n\n  setState(key) {\n    if (!this.states[key]) {\n      return;\n    }\n    Object.keys(this.states).forEach(prop => {\n      const state = this.states[prop];\n      if (!state) {\n        return;\n      }\n      state.visible = false;\n    });\n\n    this.states[key].visible = true;\n  }\n}\n","import { fitText, makeImage, makeNinePatch, makeText } from '..';\nimport { AbstractButton } from './abstract-button';\n\nexport class Button extends AbstractButton {\n  createState(config) {\n    const state = new Phaser.Group(this.game);\n\n    const { bg, label, fitWidth = 0.9, fitHeight = 0.9 } = config;\n\n    // FRAME\n    const bgObj = bg.width && bg.height ? makeNinePatch(bg) : makeImage(bg);\n    state.add(bgObj);\n\n    // LABEL\n    if (label) {\n      const labelObj = makeText(label);\n      labelObj.anchor.set(0.5);\n      state.add(labelObj);\n\n      fitText(labelObj, bgObj.width * fitWidth, bgObj.height * fitHeight);\n    }\n\n    return this.add(state);\n  }\n}\n","/* eslint-disable class-methods-use-this */\nexport class InputHandler extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n\n    this.inputArea = null;\n  }\n\n  get enabled() {\n    return this.inputArea.input.enabled;\n  }\n\n  switchInput(value) {\n    this.inputArea.input.reset();\n    this.inputArea.input.enabled = value;\n  }\n\n  onDown(_target, _pointer) {}\n\n  onUp(_target, _pointer, _isOver) {}\n\n  onOver(_target, _pointer) {}\n\n  createHitArea({ name = '', shape = null, priority = 0 } = {}) {\n    const gr = this.game.make.graphics();\n    gr.beginFill(0xffffff, 0);\n    gr.drawShape(shape || new Phaser.Rectangle(0, 0, this.width, this.height));\n    gr.endFill();\n\n    gr.inputEnabled = true;\n    gr.input.name = name;\n    gr.name = name;\n    gr.input.priorityID = priority;\n    gr.events.onInputDown.add(this.onDown, this);\n    gr.events.onInputUp.add(this.onUp, this);\n    gr.events.onInputOver.add(this.onOver, this);\n    gr.centerX = this.centerX;\n    gr.centerY = this.centerY;\n\n    this.add(gr);\n    this.inputArea = gr;\n    return gr;\n  }\n}\n","import { lego } from '@armathai/lego';\nimport { Phaser2Grid } from '@armathai/phaser2-grid';\n\nexport class Container extends Phaser.Group {\n  constructor() {\n    super(CI_API.game);\n  }\n\n  destroy(destroyChildren = true, soft = false) {\n    lego.event.removeListenersOf(this);\n\n    super.destroy(destroyChildren, soft);\n  }\n}\n\nPhaser2Grid.prototype.destroy = Container.prototype.destroy;\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable no-underscore-dangle */\nimport { objectKeys } from './object/object-keys';\nimport { UniversalTween } from './tween/universal-tween';\n\nfunction updateTextSize(textGameObject, fontSize) {\n  const styleRef = textGameObject.style;\n  styleRef.fontSize = fontSize;\n  textGameObject.setStyle(styleRef);\n}\n\nexport const searchAtlasByFrame = frame => {\n  const atlas = imageLoader._atlases.find(a => !!CI_API.game.cache.getFrameByName(a, frame));\n  return atlas ? { key: atlas, frame } : { key: frame };\n};\n\nexport const delayRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.add(delay, runnable, context, ...args);\n};\n\nexport const removeRunnable = runnable => {\n  return CI_API.game.time.events.remove(runnable);\n};\n\nexport const loopRunnable = (delay, runnable, context, ...args) => {\n  return CI_API.game.time.events.loop(delay, runnable, context, ...args);\n};\n\nexport const postRunnable = (runnable, context, ...args) => {\n  return delayRunnable(CI_API.game.time.physicsElapsedMS, runnable, context, ...args);\n};\n\nexport function fitText(textGameObject, width, height) {\n  if (textGameObject.__defaultFontSize__) {\n    updateTextSize(textGameObject, textGameObject.__defaultFontSize__);\n  }\n\n  const { fontSize, width: textWidth, height: textHeight } = textGameObject;\n  const ratioW = width ? width / textWidth : 1;\n  const ratioH = height ? height / textHeight : 1;\n  const ratio = Math.min(Math.min(ratioW, ratioH), 1);\n\n  if (typeof fontSize === 'number') {\n    const newFontSize = fontSize * ratio;\n    updateTextSize(textGameObject, newFontSize);\n  }\n}\n\nexport const getGameBounds = () => {\n  const { width, height } = CI_API.game;\n\n  return new Phaser.Rectangle(0, 0, width, height);\n};\n\nexport function tweenNumber(config) {\n  const {\n    from,\n    to,\n    duration,\n    onUpdate = () => {},\n    onComplete = () => {},\n    onStart = () => {},\n    context,\n    step = 1\n  } = config;\n  let localStep = 0;\n  const tweenObj = { from, to };\n  const t = CI_API.game.add.tween(tweenObj).to({ from: to }, duration, Phaser.Easing.Sinusoidal.Out, true);\n  t.onStart.addOnce(() => {\n    onStart.call(context);\n  });\n  t.onUpdateCallback(tween => {\n    localStep += 1;\n    if (localStep === step) {\n      onUpdate.call(context, tween.target.from);\n      localStep = 0;\n    }\n  });\n  t.onComplete.addOnce(() => {\n    tweenObj.from = to;\n    onUpdate.call(context, tweenObj.from);\n    onComplete.call(context);\n  });\n  return t;\n}\n\nexport function getViewByProperty(prop, value, parent) {\n  const { children } = parent || CI_API.game.world;\n\n  if (!children || children.length === 0) {\n    return null;\n  }\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    if (child[prop] === value) {\n      return child;\n    }\n\n    const view = getViewByProperty(prop, value, child);\n    if (view) {\n      return view;\n    }\n  }\n\n  return null;\n}\n\nexport function makeText(config) {\n  const { text, style = {}, x = 0, y = 0 } = config;\n  const { shadow, gradient, lineSpacing = 0, fontSize } = style;\n\n  const label = CI_API.game.add.text(x, y, text, style);\n  label.lineSpacing = lineSpacing;\n\n  if (fontSize) {\n    label.__defaultFontSize__ = fontSize;\n  }\n\n  if (shadow) {\n    const { x: shadowX, y: shadowY, color, blur, shadowStroke, shadowFill } = shadow;\n    label.setShadow(shadowX, shadowY, color, blur, shadowStroke, shadowFill);\n  }\n\n  if (gradient) {\n    //  Here we create a linear gradient on the Text context.\n    //  This uses the exact same method of creating a gradient as you do on a normal Canvas context.\n    const grd = label.context.createLinearGradient(0, 0, 0, label.height);\n    gradient.forEach(grdConfig => {\n      const { offset, color } = grdConfig;\n      grd.addColorStop(offset, color);\n    });\n    label.fill = grd;\n  }\n\n  return label;\n}\n\nexport function makeSpine(config) {\n  const { key, x = 0, y = 0, scalingVariant, scale = { x: 1, y: 1 }, skin } = config;\n  const spine = CI_API.game.add.spine(x, y, key, scalingVariant);\n  spine.scale.copyFrom(scale);\n  skin && spine.setSkinByName(skin);\n  return spine;\n}\n\nexport function makeAnimation(config) {\n  const { key, x = 0, y = 0, data } = config;\n  const animation = imageLoader.spriteMake(x, y, key);\n  data.forEach(d => {\n    const { name, prefix, start, stop, suffix, zeroPad, frameRate, loop } = d;\n    animation.animations.add(\n      name,\n      Phaser.Animation.generateFrameNames(prefix, start, stop, suffix, zeroPad),\n      frameRate,\n      loop\n    );\n  });\n  return animation;\n}\n\nexport function makeImage(config) {\n  const { frame, x = 0, y = 0, tint, scale = { x: 1, y: 1 }, anchor = { x: 0.5, y: 0.5 } } = config;\n  const { x: sx, y: sy } = scale;\n  const { x: ax, y: ay } = anchor;\n\n  const img = imageLoader.spriteMake(x, y, frame);\n\n  if (tint) img.tint = tint;\n  img.scale.set(sx, sy);\n  img.anchor.set(ax, ay);\n\n  return img;\n}\n\nexport function makeNinePatch(config) {\n  const { frame, x = 0, y = 0, width, height, tint, anchor = { x: 0.5, y: 0.5 } } = config;\n  const { x: ax, y: ay } = anchor;\n  const texture = searchAtlasByFrame(frame);\n  const ninePatch = CI_API.game.add.ninePatch(x, y, texture.key, texture.frame, width, height);\n  if (tint) ninePatch.tint = tint;\n  ninePatch.anchor.set(ax, ay);\n\n  return ninePatch;\n}\n\nexport function makeEmitter(config) {\n  const { key, parent, x = 0, y = 0, config: emitterConfig, force = { x: 0, y: 0 } } = config;\n  const emitter = CI_API.game.particleStorm.createEmitter();\n  emitter.addToWorld(parent);\n  emitter.force.set(force.x, force.y);\n  emitter.emit(key, x, y, emitterConfig);\n\n  return emitter;\n}\n\nexport const makePixel = (() => {\n  let texture = null;\n\n  return config => {\n    if (!texture) {\n      texture = CI_API.game.make\n        .graphics(0, 0)\n        .beginFill(0xffffff)\n        .drawRect(0, 0, 4, 4)\n        .endFill()\n        .generateTexture();\n    }\n    const { x = 0, y = 0, width, height, alpha = 1, tint = 0x0 } = config;\n    const pixel = CI_API.game.make.sprite(x, y, texture);\n    pixel.width = width;\n    pixel.height = height;\n    pixel.tint = tint;\n    pixel.alpha = alpha;\n\n    return pixel;\n  };\n})();\n\nexport function makeGradient(config) {\n  const { width, height, colors, vertical, horizontal } = config;\n\n  const bmp = CI_API.game.add.bitmapData(width, height);\n  const grd = bmp.context.createLinearGradient(0, 0, width * horizontal, vertical * height);\n  colors.forEach(c => {\n    const { percent, color } = c;\n    grd.addColorStop(percent, color);\n  });\n  bmp.context.fillStyle = grd;\n  bmp.context.fillRect(0, 0, width, height);\n\n  const img = CI_API.game.make.sprite(0, 0, bmp);\n\n  return img;\n}\n\nexport function updateUniversalTweenData(tw) {\n  const { timeline } = tw;\n  const vEnd = tw.getPropertiesEndValue();\n  const vStart = tw.getPropertiesStartValue();\n\n  timeline.forEach((tl, index) => {\n    tw.updateTweenData('vEnd', vEnd, index);\n    tw.updateTweenData('vStart', vStart, index);\n  });\n\n  tw.resume();\n}\n\nexport function completeTween(tw) {\n  let notStarted = false;\n  const { timeline, target } = tw;\n  tw.stop();\n  CI_API.game.tweens.removeFrom(target);\n\n  timeline.forEach(tl => {\n    const { vEnd, vStart, yoyo, percent } = tl;\n    const keys = objectKeys(vEnd);\n\n    keys.forEach(k => {\n      target[k] = yoyo ? vStart[k] : vEnd[k];\n    });\n\n    if (percent === 0) {\n      notStarted = true;\n    }\n  });\n\n  if (notStarted) {\n    tw.onStart.dispatch();\n  }\n\n  tw.onComplete.dispatch();\n}\n\nexport function manageUniversalTweens() {\n  const tweens = CI_API.game.tweens.getAll();\n  tweens.forEach(tw => {\n    if (tw instanceof UniversalTween) {\n      updateUniversalTweenData(tw);\n\n      return;\n    }\n\n    if (tw.universal === true) {\n      tw.resume();\n\n      return;\n    }\n\n    completeTween(tw);\n  });\n}\n\nexport function makeUniversalTween(config) {\n  const {\n    target,\n    startValues,\n    endValues,\n    context,\n    duration = 1000,\n    easing = null,\n    autoStart = false,\n    delay = 0,\n    repeat = 0,\n    yoyo = false,\n    from = false\n  } = config;\n\n  const sValues = from ? endValues : startValues;\n  const eValues = from ? startValues : endValues;\n\n  const tw = new UniversalTween(target, sValues, eValues, context);\n  tw.to(eValues.call(context), duration, easing, autoStart, delay, repeat, yoyo);\n\n  return tw;\n}\n\nexport function getRelativeScale(source, destination) {\n  const { width: sourceWidth, height: sourceHeight } = source.getLocalBounds();\n  const { width: destinationWidth, height: destinationHeight } = destination.getBounds();\n\n  return new Phaser.Point(\n    destinationWidth / (sourceWidth * source.parent.worldScale.x),\n    destinationHeight / (sourceHeight * source.parent.worldScale.y)\n  );\n}\n\nexport function getRelativePosition(source, destination) {\n  return source.parent.toLocal(destination.parent.toGlobal(destination.position));\n}\n\nexport function getRelativeTransform(source, destination) {\n  return { scale: getRelativeScale(source, destination), position: getRelativePosition(source, destination) };\n}\n\nexport function isSquareLikeScreen() {\n  const { width, height } = getGameBounds();\n  return Math.min(width, height) / Math.max(width, height) > 0.7;\n}\n\nexport function isNarrowScreen() {\n  const { width, height } = getGameBounds();\n  return Math.min(width, height) / Math.max(width, height) < 0.5;\n}\n\nexport function tweenToCell(grid, child, cellName, duration = 200, ease = Phaser.Easing.Sinusoidal.InOut) {\n  const { x: formScaleX, y: formScaleY } = child.scale;\n  const { x: formPositionX, y: formPositionY } = child.position;\n  grid.rebuildChild(child, cellName);\n  CI_API.game.add.tween(child).from({ x: formPositionX, y: formPositionY }, duration, ease, true);\n  CI_API.game.add.tween(child.scale).from({ x: formScaleX, y: formScaleY }, duration, ease, true);\n}\n\nexport function pulse(target, amplitude = 0.1, repeat = -1) {\n  const tw = CI_API.game.add\n    .tween(target.scale)\n    .to(\n      { x: target.scale.x + amplitude, y: target.scale.y + amplitude },\n      1000,\n      Phaser.Easing.Sinusoidal.InOut,\n      true,\n      0,\n      repeat,\n      true\n    );\n  tw.universal = true;\n  return tw;\n}\n\nexport function showFromBottom(\n  view,\n  delay = 0,\n  duration = 500,\n  universal = false,\n  easing = Phaser.Easing.Sinusoidal.Out\n) {\n  const { parent } = view;\n  const { y } = parent.toLocal({ x: 0, y: getGameBounds().bottom + Math.abs(view.height) }, null);\n\n  const tw = CI_API.game.add.tween(view).from({ y }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function showFromRight(\n  view,\n  delay = 0,\n  duration = 500,\n  universal = false,\n  easing = Phaser.Easing.Sinusoidal.Out\n) {\n  const { parent } = view;\n  const { x } = parent.toLocal({ x: getGameBounds().width + Math.abs(view.width), y: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).from({ x }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function showFromLeft(\n  view,\n  delay = 0,\n  duration = 500,\n  universal = false,\n  easing = Phaser.Easing.Sinusoidal.Out\n) {\n  const { parent } = view;\n  const { x } = parent.toLocal({ x: -Math.abs(view.width), y: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).from({ x }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function showFromUp(view, delay = 0, duration = 500, universal = false, easing = Phaser.Easing.Sinusoidal.Out) {\n  const { parent } = view;\n  const { y } = parent.toLocal({ y: -Math.abs(view.height), x: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).from({ y }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function hideToBottom(\n  view,\n  delay = 0,\n  duration = 500,\n  universal = false,\n  easing = Phaser.Easing.Sinusoidal.Out\n) {\n  const { parent } = view;\n  const { y } = parent.toLocal({ x: 0, y: getGameBounds().bottom + Math.abs(view.height) }, null);\n\n  const tw = CI_API.game.add.tween(view).to({ y }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function hideToRight(view, delay = 0, duration = 500, universal = false, easing = Phaser.Easing.Sinusoidal.Out) {\n  const { parent } = view;\n  const { x } = parent.toLocal({ x: getGameBounds().width + Math.abs(view.width), y: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).to({ x }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function hideToLeft(view, delay = 0, duration = 500, universal = false, easing = Phaser.Easing.Sinusoidal.Out) {\n  const { parent } = view;\n  const { x } = parent.toLocal({ x: -Math.abs(view.width), y: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).to({ x }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport function hideToUp(view, delay = 0, duration = 500, universal = false, easing = Phaser.Easing.Sinusoidal.Out) {\n  const { parent } = view;\n  const { y } = parent.toLocal({ y: -Math.abs(view.height), x: 0 }, null);\n\n  const tw = CI_API.game.add.tween(view).to({ y }, duration, easing, true, delay);\n  tw.universal = universal;\n\n  return tw;\n}\n\nexport const tweenTint = ({\n  target,\n  to,\n  from,\n  duration = 500,\n  easing = Phaser.Easing.Cubic.InOut,\n  delay = 0,\n  repeat = 0,\n  yoyo = false\n}) => {\n  const colorTo = Phaser.Color.getRGB(to);\n  const colorFrom = Phaser.Color.getRGB(from);\n  const tween = CI_API.game.add.tween(colorFrom).to(colorTo, duration, easing, true, delay, repeat, yoyo);\n\n  tween.onStart.addOnce(() => {\n    target.tint = from;\n  });\n\n  tween.onUpdateCallback(() => {\n    Phaser.Color.updateColor(tween.target);\n    target.tint = Phaser.Color.getColor32(target.alpha, tween.target.r, tween.target.g, tween.target.b);\n  }, this);\n\n  tween.onComplete.addOnce(() => {\n    target.tint = to;\n  });\n\n  return tween;\n};\n\nexport function handScaleTw(hand, amplitude = 0.2) {\n  const signX = Phaser.Math.sign(hand.scale.x);\n  const signY = Phaser.Math.sign(hand.scale.y);\n  const scaleTw = CI_API.game.add.tween(hand.scale).to(\n    {\n      x: hand.scale.x - amplitude * signX,\n      y: hand.scale.y - amplitude * signY\n    },\n    500,\n    Phaser.Easing.Cubic.InOut,\n    true,\n    0,\n    0,\n    true\n  );\n\n  return scaleTw;\n}\n\nexport function handMoveTw(hand, pos, offX = 0, offY = 0) {\n  const { x, y } = pos;\n  const moveTw = CI_API.game.add\n    .tween(hand)\n    .to({ x: x + offX, y: y + offY }, 500, Phaser.Easing.Cubic.InOut, true, 0, 0, false);\n\n  return moveTw;\n}\n\nexport function tintSlot(spine, slotName, color) {\n  const rgb = Phaser.Color.hexToRGBArray(color);\n  const slot = spine.skeleton.findSlot(slotName);\n\n  if (!slot) {\n    const slots = spine.skeleton.slots.filter(s => s.data && s.data.attachmentName === slotName);\n    slots.forEach(s => {\n      s.r = rgb[0];\n      s.g = rgb[1];\n      s.b = rgb[2];\n    });\n  }\n\n  if (slot) {\n    slot.r = rgb[0];\n    slot.g = rgb[1];\n    slot.b = rgb[2];\n  }\n}\n\nexport function tintSpine(spine, tint) {\n  const { slots } = spine.skeleton;\n  for (let i = 0; i < slots.length; i += 1) {\n    const slot = slots[i];\n    if (slot.currentSprite) slot.currentSprite.tint = tint;\n    const rgb = Phaser.Color.hexToRGBArray(tint);\n    slot.r = rgb[0];\n    slot.g = rgb[1];\n    slot.b = rgb[2];\n  }\n}\n\nexport function msToTime(duration) {\n  const milliseconds = parseInt(((duration % 1000) / 10).toString(), 10);\n  const seconds = parseInt(((duration / 1000) % 60).toString(), 10);\n  const minutes = parseInt(((duration / (1000 * 60)) % 60).toString(), 10);\n  const hours = parseInt(((duration / (1000 * 60 * 60)) % 24).toString(), 10);\n\n  const millisecondsStr = milliseconds < 10 ? `${0}${milliseconds}` : `${milliseconds}`;\n  const hoursStr = hours < 10 ? `${0}${hours}` : `${hours}`;\n  const minutesStr = minutes < 10 ? `${0}${minutes}` : `${minutes}`;\n  const secondsStr = seconds < 10 ? `${0}${seconds}` : `${seconds}`;\n  return { hoursStr, minutesStr, secondsStr, millisecondsStr };\n}\n\nexport function getRetryDelay(retries) {\n  return CI_API.Globals.PARAMS.retries === retries ? 0 : 1500;\n}\n","export const objectKeys = object => {\n  const keys = [];\n  Object.entries(object).forEach(entry => {\n    const key = entry[0];\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      keys.push(key);\n    }\n  });\n  return keys;\n};\n","export class UniversalTween extends Phaser.Tween {\n  constructor(target, startValues, endValues, context) {\n    super(target, CI_API.game, CI_API.game.tweens);\n    this.__context__ = context;\n    this.getStartValues = startValues;\n    this.getEndValues = endValues;\n  }\n\n  getPropertiesStartValue() {\n    super.start();\n    return this.getStartValues.call(this.__context__);\n  }\n\n  getPropertiesEndValue() {\n    return this.getEndValues.call(this.__context__);\n  }\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"./Types\");\nvar Point_1 = require(\"./utils/geom/Point\");\nvar Rect_1 = require(\"./utils/geom/Rect\");\nvar Utils_1 = require(\"./utils/Utils\");\nvar Cell = /** @class */ (function () {\n    /**\n     * @param config Input configuration object.\n     */\n    function Cell(config) {\n        var name = config.name, bounds = config.bounds, cells = config.cells, scale = config.scale, align = config.align, padding = config.padding, offset = config.offset;\n        this._config = config;\n        this._name = this._getName(name);\n        this._scale = this._getScale(scale);\n        this._align = this._getAlign(align);\n        this._offset = this._getOffset(offset);\n        this._contents = this._getContents();\n        this._bounds = this._getBounds(bounds);\n        this._padding = this._buildPadding(this._getPadding(padding));\n        this._cells = this._buildCells(this._getCells(cells));\n    }\n    Object.defineProperty(Cell.prototype, \"config\", {\n        /**\n         * @description Configuration object reference passed in constructor\n         * @returns {ICellConfig} configuration object\n         */\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"name\", {\n        /**\n         * @description Cell name defined in configuration object\n         * @returns {string} cell name\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"cells\", {\n        /**\n         * @description Array of child cells\n         * @returns {Cell[]} child cells\n         */\n        get: function () {\n            return this._cells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"bounds\", {\n        /**\n         * @description Bounds area in pixels\n         * @returns {Rect} bounds area\n         */\n        get: function () {\n            return this._bounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"padding\", {\n        /**\n         * @description Padding area in pixels\n         * @returns {Rect} padding area\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"scale\", {\n        /**\n         * @description Scale type, used to scale contents\n         * @returns {CellScale} scale type\n         */\n        get: function () {\n            return this._scale;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"align\", {\n        /**\n         * @description Align type, used to align contents\n         * @returns {CellAlign} align type\n         */\n        get: function () {\n            return this._align;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"contents\", {\n        /**\n         * @description Contents\n         * @returns {T[]} cell contents\n         */\n        get: function () {\n            return this._contents;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"area\", {\n        /**\n         * @description Cell bounds considered paddings\n         * @returns {Rect} Rectangle considered paddings\n         */\n        get: function () {\n            return this._padding;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Cell.prototype, \"offset\", {\n        /**\n         * @description Cell offset\n         * @returns {Point} cell offset\n         */\n        get: function () {\n            return this._offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @description Returns cells way down of the tree, recursively\n     * @returns {Cell[]} Array of cells\n     */\n    Cell.prototype.getCells = function () {\n        var cells = [];\n        cells.push(this);\n        this._cells.forEach(function (cell) { return cells.push.apply(cells, __spread(cell.getCells())); });\n        return cells;\n    };\n    /**\n     * @description Returns cell based on given name\n     * @param name The name of the cell\n     * @returns {Cell | undefined}\n     */\n    Cell.prototype.getCellByName = function (name) {\n        return this.getCells().find(function (cell) { return cell._name === name; });\n    };\n    Cell.prototype.getCellByContent = function (content) {\n        return this.getCells().find(function (cell) { return cell.contents.includes(content); });\n    };\n    Cell.prototype._getName = function (rawName) {\n        return rawName;\n    };\n    Cell.prototype._getScale = function (rawScale) {\n        return rawScale || Types_1.CellScale.Fit;\n    };\n    Cell.prototype._getAlign = function (rawAlign) {\n        return rawAlign || Types_1.CellAlign.Center;\n    };\n    Cell.prototype._getOffset = function (rawOffset) {\n        return rawOffset ? new Point_1.Point(rawOffset.x || 0, rawOffset.y || 0) : new Point_1.Point(0, 0);\n    };\n    Cell.prototype._getContents = function () {\n        return new Array(0);\n    };\n    Cell.prototype._getCells = function (rawCells) {\n        return rawCells || new Array(0);\n    };\n    Cell.prototype._getBounds = function (rawBounds) {\n        var b = rawBounds ? Utils_1.rawToRect(rawBounds) : new Rect_1.Rect(0, 0, Cell.MIN_SIZE, Cell.MIN_SIZE);\n        var o = this.offset;\n        return new Rect_1.Rect(b.x + o.x, b.y + o.y, b.width, b.height);\n    };\n    Cell.prototype._getPadding = function (rawPadding) {\n        return rawPadding\n            ? typeof rawPadding === 'number'\n                ? Utils_1.numberToRect(rawPadding)\n                : Utils_1.fillRect(rawPadding)\n            : new Rect_1.Rect(0, 0, 1, 1);\n    };\n    Cell.prototype._buildPadding = function (padding) {\n        var px = padding.x, py = padding.y, pw = padding.width, ph = padding.height;\n        var _a = this._bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        return new Rect_1.Rect(bx + px * bw, by + py * bh, bw * pw, bh * ph);\n    };\n    Cell.prototype._buildCells = function (rawCells) {\n        var e_1, _a;\n        var cells = [];\n        var _b = this.area, bw = _b.width, bh = _b.height, bl = _b.left, br = _b.right, bt = _b.top, bb = _b.bottom;\n        try {\n            for (var rawCells_1 = __values(rawCells), rawCells_1_1 = rawCells_1.next(); !rawCells_1_1.done; rawCells_1_1 = rawCells_1.next()) {\n                var rawCell = rawCells_1_1.value;\n                var _c = rawCell.bounds, bounds = _c === void 0 ? new Rect_1.Rect(0, 0, 0, 0) : _c;\n                var configBounds = __assign({}, bounds);\n                bounds.x =\n                    bounds.x !== undefined\n                        ? typeof bounds.x === 'string'\n                            ? bl + Utils_1.px2number(bounds.x)\n                            : bl + bounds.x * bw\n                        : Math.max.apply(Math, __spread([bl], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.right;\n                        })));\n                bounds.y =\n                    bounds.y !== undefined\n                        ? typeof bounds.y === 'string'\n                            ? bt + Utils_1.px2number(bounds.y)\n                            : bt + bounds.y * bh\n                        : Math.max.apply(Math, __spread([bt], cells.map(function (_a) {\n                            var b = _a._bounds;\n                            return b.bottom;\n                        })));\n                bounds.width =\n                    bounds.width !== undefined\n                        ? typeof bounds.width === 'string'\n                            ? Utils_1.px2number(bounds.width)\n                            : bounds.width * bw\n                        : br - bounds.x;\n                bounds.height =\n                    bounds.height !== undefined\n                        ? typeof bounds.height === 'string'\n                            ? Utils_1.px2number(bounds.height)\n                            : bounds.height * bh\n                        : bb - bounds.y;\n                var cell = new Cell(rawCell);\n                cell.config.bounds = configBounds;\n                cells.push(cell);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rawCells_1_1 && !rawCells_1_1.done && (_a = rawCells_1.return)) _a.call(rawCells_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return cells;\n    };\n    Cell.MIN_SIZE = 1 / Number.MAX_SAFE_INTEGER;\n    return Cell;\n}());\nexports.Cell = Cell;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CellScale;\n(function (CellScale) {\n    CellScale[CellScale[\"None\"] = 1] = \"None\";\n    CellScale[CellScale[\"Fit\"] = 2] = \"Fit\";\n    CellScale[CellScale[\"Fill\"] = 3] = \"Fill\";\n    CellScale[CellScale[\"ShowAll\"] = 4] = \"ShowAll\";\n    CellScale[CellScale[\"Envelop\"] = 5] = \"Envelop\";\n    CellScale[CellScale[\"Custom\"] = 6] = \"Custom\";\n})(CellScale = exports.CellScale || (exports.CellScale = {}));\nvar CellAlign;\n(function (CellAlign) {\n    CellAlign[CellAlign[\"None\"] = 1] = \"None\";\n    CellAlign[CellAlign[\"Center\"] = 2] = \"Center\";\n    CellAlign[CellAlign[\"CenterTop\"] = 3] = \"CenterTop\";\n    CellAlign[CellAlign[\"CenterBottom\"] = 4] = \"CenterBottom\";\n    CellAlign[CellAlign[\"LeftCenter\"] = 5] = \"LeftCenter\";\n    CellAlign[CellAlign[\"LeftTop\"] = 6] = \"LeftTop\";\n    CellAlign[CellAlign[\"LeftBottom\"] = 7] = \"LeftBottom\";\n    CellAlign[CellAlign[\"RightCenter\"] = 8] = \"RightCenter\";\n    CellAlign[CellAlign[\"RightTop\"] = 9] = \"RightTop\";\n    CellAlign[CellAlign[\"RightBottom\"] = 10] = \"RightBottom\";\n})(CellAlign = exports.CellAlign || (exports.CellAlign = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Cell_1 = require(\"./Cell\");\nexports.Cell = Cell_1.Cell;\nvar Types_1 = require(\"./Types\");\nexports.CellAlign = Types_1.CellAlign;\nexports.CellScale = Types_1.CellScale;\nvar Point_1 = require(\"./utils/geom/Point\");\nexports.Point = Point_1.Point;\nvar Rect_1 = require(\"./utils/geom/Rect\");\nexports.Rect = Rect_1.Rect;\nvar Utils_1 = require(\"./utils/Utils\");\nexports.align = Utils_1.align;\nexports.fit = Utils_1.fit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types_1 = require(\"../Types\");\nvar Point_1 = require(\"./geom/Point\");\nvar Rect_1 = require(\"./geom/Rect\");\nfunction rawToRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 0 : _d, _e = _a.height, height = _e === void 0 ? 0 : _e;\n    return new Rect_1.Rect(typeof x === 'string' ? px2number(x) : x, typeof y === 'string' ? px2number(y) : y, typeof width === 'string' ? px2number(width) : width, typeof height === 'string' ? px2number(height) : height);\n}\nexports.rawToRect = rawToRect;\nfunction numberToRect(value) {\n    return new Rect_1.Rect(value, value, 1 - 2 * value, 1 - 2 * value);\n}\nexports.numberToRect = numberToRect;\nfunction fillRect(_a) {\n    var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 1 - (x ? x : 0) : _d, _e = _a.height, height = _e === void 0 ? 1 - (y ? y : 0) : _e;\n    return new Rect_1.Rect(x, y, width, height);\n}\nexports.fillRect = fillRect;\nfunction px2number(value) {\n    return parseInt(value, 10);\n}\nexports.px2number = px2number;\n/**\n * @description Represents scale difference needed to scale first dimension compared with second based on scale type\n * @param d1 Dimension to scale\n * @param d2 Dimension to compare with\n * @param scaleType Scale type\n * @returns {Point}\n */\nfunction fit(d1, d2, scaleType) {\n    switch (scaleType) {\n        case Types_1.CellScale.Fit:\n            return _fit(d1, d2);\n        case Types_1.CellScale.Fill:\n            return _fill(d1, d2);\n        case Types_1.CellScale.ShowAll:\n            return _showAll(d1, d2);\n        case Types_1.CellScale.Envelop:\n            return _envelop(d1, d2);\n        case Types_1.CellScale.None:\n            return new Point_1.Point(1, 1);\n        default:\n            throw new Error(\"Unknown scale type: \" + scaleType);\n    }\n}\nexports.fit = fit;\n/**\n * @description Represents position difference needed to align dimension in rect based on align type\n * @param dimension Dimension to align\n * @param rect Rect to align to\n * @param alignType Align type\n * @returns {Point}\n */\nfunction align(dimension, rect, alignType) {\n    var w1 = dimension.width, h1 = dimension.height;\n    var x2 = rect.x, y2 = rect.y, w2 = rect.width, h2 = rect.height;\n    var pos = new Point_1.Point(x2, y2);\n    switch (alignType) {\n        case Types_1.CellAlign.Center:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.CenterTop:\n            return pos.set(x2 + (w2 - w1) / 2, y2);\n        case Types_1.CellAlign.CenterBottom:\n            return pos.set(x2 + (w2 - w1) / 2, y2 + (h2 - h1));\n        case Types_1.CellAlign.LeftCenter:\n            return pos.set(x2, y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.LeftTop:\n            return pos;\n        case Types_1.CellAlign.LeftBottom:\n            return pos.set(x2, y2 + (h2 - h1));\n        case Types_1.CellAlign.RightCenter:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1) / 2);\n        case Types_1.CellAlign.RightTop:\n            return pos.set(x2 + (w2 - w1), y2);\n        case Types_1.CellAlign.RightBottom:\n            return pos.set(x2 + (w2 - w1), y2 + (h2 - h1));\n        case Types_1.CellAlign.None:\n            return pos;\n        default:\n            throw new Error(\"Unknown align: \" + align);\n    }\n}\nexports.align = align;\nfunction _fit(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return s < 1 ? new Point_1.Point(s, s) : new Point_1.Point(1, 1);\n}\nfunction _showAll(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.min(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _envelop(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    var s = Math.max(w2 / w1, h2 / h1);\n    return new Point_1.Point(s, s);\n}\nfunction _fill(d1, d2) {\n    var w1 = d1.width, h1 = d1.height;\n    var w2 = d2.width, h2 = d2.height;\n    return new Point_1.Point(w2 / w1, h2 / h1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Defines a Point in 2D space, with an | x, y | component.\n */\nvar Point = /** @class */ (function () {\n    /**\n     *\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * @description Set the x and y coordinates of the point to the given values.\n     * @param x The x coordinate of this Point.\n     * @param y The y coordinate of this Point.\n     */\n    Point.prototype.set = function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    return Point;\n}());\nexports.Point = Point;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Encapsulates a 2D rectangle with an | x, y, width, height | component\n */\nvar Rect = /** @class */ (function () {\n    /**\n     *\n     * @param x The X coordinate of the top left corner of the Rectangle.\n     * @param y The Y coordinate of the top left corner of the Rectangle.\n     * @param width The width of the Rectangle.\n     * @param height The height of the Rectangle.\n     */\n    function Rect(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    Object.defineProperty(Rect.prototype, \"left\", {\n        /**\n         * @description The x coordinate of the left of the Rectangle.\n         */\n        get: function () {\n            return this.x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"right\", {\n        /**\n         * @description The sum of the x and width properties.\n         */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"top\", {\n        /**\n         * @description The y coordinate of the top of the Rectangle.\n         */\n        get: function () {\n            return this.y;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Rect.prototype, \"bottom\", {\n        /**\n         * @description The sum of the y and height properties.\n         */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Rect;\n}());\nexports.Rect = Rect;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nvar Command = /** @class */ (function () {\n    function Command() {\n        this._guards = [];\n        this._payloads = [];\n    }\n    Command.prototype.on = function (event, command) {\n        index_1.lego.event.on(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.once = function (event, command) {\n        index_1.lego.event.once(event, this._getEventCallback(command));\n        return this;\n    };\n    Command.prototype.off = function (event, command) {\n        var ll = index_1.lego.event.getListeners(event);\n        // @ts-ignore\n        var found = ll.find(function (l) { return l.callback.__command === command; });\n        if (!found) {\n            return this;\n        }\n        index_1.lego.event.off(event, found.callback);\n        return this;\n    };\n    Command.prototype.execute = function () {\n        var e_1, _a;\n        var commands = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            commands[_i] = arguments[_i];\n        }\n        var _b = this, _guards = _b._guards, _payloads = _b._payloads;\n        var passed = !_guards.length || !_guards.find(function (guard) { return !guard.apply(undefined, _payloads); });\n        if (passed) {\n            try {\n                for (var commands_1 = __values(commands), commands_1_1 = commands_1.next(); !commands_1_1.done; commands_1_1 = commands_1.next()) {\n                    var c = commands_1_1.value;\n                    this._execute.apply(this, __spread([c], _payloads));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (commands_1_1 && !commands_1_1.done && (_a = commands_1.return)) _a.call(commands_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        else {\n            this._resetGuardsAndPayloads();\n        }\n        return this;\n    };\n    Command.prototype.payload = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._payloads = args;\n        return this;\n    };\n    Command.prototype.guard = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this._guards = args;\n        return this;\n    };\n    Command.prototype._execute = function (command) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this._resetGuardsAndPayloads();\n        command.apply(undefined, args);\n    };\n    Command.prototype._resetGuardsAndPayloads = function () {\n        this.guard().payload();\n    };\n    Command.prototype._getEventCallback = function (command) {\n        return Object.defineProperties(this._execute.bind(this, command), {\n            __command: { value: command },\n        });\n    };\n    return Command;\n}());\nexports.Command = Command;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map_1 = require(\"./utils/Map\");\nvar Emitter = /** @class */ (function () {\n    function Emitter() {\n        this._events = new Map_1.Map();\n    }\n    Emitter.prototype.getListeners = function (event) {\n        return this._events.get(event) || [];\n    };\n    Emitter.prototype.on = function (name, callback, context) {\n        this._addListener(name, callback, context, false);\n        return this;\n    };\n    Emitter.prototype.once = function (name, callback, context) {\n        this._addListener(name, callback, context, true);\n        return this;\n    };\n    Emitter.prototype.off = function (name, callback, context) {\n        this._removeListener(name, callback, context);\n        return this;\n    };\n    Emitter.prototype.emit = function (name) {\n        var e_1, _a;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        var llCopy = __spread(ll);\n        try {\n            for (var llCopy_1 = __values(llCopy), llCopy_1_1 = llCopy_1.next(); !llCopy_1_1.done; llCopy_1_1 = llCopy_1.next()) {\n                var l = llCopy_1_1.value;\n                var callback = l.callback, context = l.context, once = l.once;\n                if (once) {\n                    this._removeListener(name, callback, context);\n                }\n                callback.apply(context, args);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (llCopy_1_1 && !llCopy_1_1.done && (_a = llCopy_1.return)) _a.call(llCopy_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Emitter.prototype.removeListenersOf = function (context) {\n        var keys = this._events.keys();\n        for (var i = keys.length - 1; i >= 0; i -= 1) {\n            var name = keys[i];\n            var ll = this.getListeners(name);\n            for (var j = ll.length - 1; j >= 0; j -= 1) {\n                var l = ll[j];\n                if (l.context === context) {\n                    this._removeListener(name, l.callback, context);\n                }\n            }\n        }\n    };\n    Emitter.prototype._addListener = function (name, callback, context, once) {\n        var ll = this.getListeners(name);\n        var l = { callback: callback, context: context, once: once };\n        !ll.length ? this._events.set(name, [l]) : ll.push(l);\n    };\n    Emitter.prototype._removeListener = function (name, callback, context) {\n        var ll = this.getListeners(name);\n        if (!ll.length) {\n            return;\n        }\n        for (var i = ll.length - 1; i >= 0; i -= 1) {\n            var l = ll[i];\n            var clb = l.callback, ctx = l.context;\n            if (clb === callback && ctx === context) {\n                ll.splice(i, 1);\n                break;\n            }\n        }\n        if (!ll.length) {\n            this._events.delete(name);\n        }\n    };\n    return Emitter;\n}());\nexports.Emitter = Emitter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Command_1 = require(\"./Command\");\nvar Emitter_1 = require(\"./Emitter\");\nvar Observe_1 = require(\"./Observe\");\nvar Lego = /** @class */ (function () {\n    function Lego() {\n        this.observe = new Observe_1.Observe();\n        this.event = new Emitter_1.Emitter();\n        this.command = new Command_1.Command();\n    }\n    return Lego;\n}());\nexports.Lego = Lego;\n","\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nfunction adjustEventName(str) {\n    var clean = str.replace(/[^0-9a-z-A-Z]/g, '').replace(/ +/, ' ');\n    return \"\" + clean.charAt(0).toUpperCase() + clean.slice(1);\n}\nvar Observe = /** @class */ (function () {\n    function Observe() {\n    }\n    Observe.prototype.makeObservable = function (obj) {\n        var e_1, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {\n                var prop = props_1_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    this.createObservable(obj, prop, value);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Observe.prototype.removeObservable = function (obj) {\n        var e_2, _a;\n        var props = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            props[_i - 1] = arguments[_i];\n        }\n        if (!props.length) {\n            props = Object.keys(obj);\n        }\n        try {\n            for (var props_2 = __values(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()) {\n                var prop = props_2_1.value;\n                var value = obj[prop];\n                if (delete obj[prop]) {\n                    Object.defineProperty(obj, prop, {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true,\n                        value: value,\n                    });\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    Observe.prototype.createObservable = function (obj, prop, value) {\n        var eventName = \"\" + obj.__name__ + adjustEventName(prop) + \"Update\";\n        var oldValue = value;\n        var newValue = oldValue;\n        Object.defineProperty(obj, prop, {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return newValue;\n            },\n            set: function (val) {\n                if (val === newValue) {\n                    return;\n                }\n                oldValue = newValue;\n                newValue = val;\n                index_1.lego.event.emit(eventName, newValue, oldValue, obj.uuid);\n            },\n        });\n    };\n    return Observe;\n}());\nexports.Observe = Observe;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lego_1 = require(\"./Lego\");\nvar Utils_1 = require(\"./utils/Utils\");\nexports.not = Utils_1.not;\nexports.lego = new Lego_1.Lego();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Map = /** @class */ (function () {\n    function Map() {\n    }\n    Map.prototype.get = function (key) {\n        // @ts-ignore\n        return this[key];\n    };\n    Map.prototype.keys = function () {\n        return Object.keys(this);\n    };\n    Map.prototype.values = function () {\n        var _this = this;\n        var keys = this.keys();\n        // @ts-ignore\n        return keys.map(function (k) { return _this[k]; });\n    };\n    Map.prototype.set = function (key, value) {\n        // @ts-ignore\n        this[key] = value;\n    };\n    Map.prototype.delete = function (key) {\n        var v = this.get(key);\n        // @ts-ignore\n        delete this[key];\n        return v;\n    };\n    Map.prototype.forEach = function (fn) {\n        var _this = this;\n        Object.keys(this).forEach(function (prop, index) { return fn(prop, _this.get(prop), index); });\n    };\n    return Map;\n}());\nexports.Map = Map;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction not(fn) {\n    var wrappedFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return !fn.apply(void 0, __spread(args));\n    };\n    var upperCaseName = fn.name.charAt(0).toUpperCase() + fn.name.slice(1);\n    Object.defineProperties(wrappedFn, {\n        name: { value: \"not\" + upperCaseName },\n    });\n    return wrappedFn;\n}\nexports.not = not;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Debugger = exports.Debug = void 0;\nvar Debug = /** @class */ (function () {\n    function Debug(parent) {\n        this._parent = parent;\n    }\n    Debug.prototype.bringToTop = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._parent.bringToTop(this._debugger);\n    };\n    Debug.prototype.draw = function (cell, lineWidth, parentDebug) {\n        var _this = this;\n        if (lineWidth === void 0) { lineWidth = 10; }\n        var _a = cell.bounds, bx = _a.x, by = _a.y, bw = _a.width, bh = _a.height;\n        var _b = cell.area, px = _b.x, py = _b.y, pw = _b.width, ph = _b.height;\n        var _c = cell.config.debug, debug = _c === void 0 ? parentDebug : _c;\n        if (debug) {\n            if (this._debugger === undefined) {\n                // Init debugger\n                this._debugger = new Debugger(this._parent.game);\n                this._parent.add(this._debugger);\n            }\n            var color = debug.color, fill = debug.fill;\n            // Draw content area\n            fill\n                ? this._debugger.fillRect(px, py, pw, ph, lineWidth * 0.8, color)\n                : this._debugger.strokeRect(px, py, pw, ph, lineWidth * 0.8, color);\n            // Draw cell bounds\n            this._debugger.strokeRect(bx, by, bw, bh, lineWidth, color);\n        }\n        cell.cells.forEach(function (el) { return _this.draw(el, lineWidth * 0.7, debug); });\n    };\n    Debug.prototype.clear = function () {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.clear();\n    };\n    Debug.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.fillRect(x, y, w, h, lineWidth, color);\n    };\n    Debug.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (!this._debugger) {\n            return;\n        }\n        this._debugger.strokeRect(x, y, w, h, lineWidth, color);\n    };\n    return Debug;\n}());\nexports.Debug = Debug;\n// tslint:disable-next-line: max-classes-per-file\nvar Debugger = /** @class */ (function (_super) {\n    __extends(Debugger, _super);\n    function Debugger() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Debugger.prototype.strokeRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.drawRect(x, y, w, h);\n    };\n    Debugger.prototype.fillRect = function (x, y, w, h, lineWidth, color) {\n        if (color === void 0) { color = Debugger.DEFAULT_COLOR; }\n        this.lineStyle(lineWidth, color, 1);\n        this.beginFill(color, 0.4);\n        this.drawRect(x, y, w, h);\n        this.endFill();\n    };\n    Debugger.DEFAULT_COLOR = 0xffffff;\n    return Debugger;\n}(Phaser.Graphics));\nexports.Debugger = Debugger;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Phaser2Grid = void 0;\nvar grid_core_1 = require(\"@armathai/grid-core\");\nvar Debugger_1 = require(\"./Debugger\");\nvar Phaser2Grid = /** @class */ (function (_super) {\n    __extends(Phaser2Grid, _super);\n    function Phaser2Grid(game) {\n        var _this = _super.call(this, game) || this;\n        _this._debug = new Debugger_1.Debug(_this);\n        return _this;\n    }\n    Phaser2Grid.prototype.getCellByName = function (name) {\n        return this.grid.getCellByName(name);\n    };\n    Phaser2Grid.prototype.getCellByContent = function (content) {\n        return this.grid.getCellByContent(content);\n    };\n    /**\n     * @description Rebuilds Grid. Destroys existing grid and creates new one based on given or existing configuration\n     * @param config Input configuration object. Can be empty, to build with existing configuration\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.rebuild = function (config) {\n        var _this = this;\n        // saves cells references before destroying grid\n        var cells = this.grid.getCells();\n        // creates new grid\n        this._internalBuild(config || this.grid.config);\n        // sets old cells contents in new grid cells\n        cells.forEach(function (cell) { return cell.contents.forEach(function (content) { return _this._rebuildContent(cell.name, content); }); });\n    };\n    /**\n     * @description Creates Grid object based on input configuration object\n     * @param config Input configuration object.\n     * @returns {void}\n     */\n    Phaser2Grid.prototype.build = function (config) {\n        this._internalBuild(config);\n    };\n    /**\n     * @description Adds the given Game Object, to this Container.\n     * @param cellName Cell name which will hold given child as content\n     * @param child The Game Object, to add to the Container.\n     * @param config Configuration object, which will be merged with cell configuration\n     * @returns {this}\n     */\n    Phaser2Grid.prototype.setChild = function (cellName, child) {\n        this.addChild(child);\n        this._patchChildDestroy(child, cellName);\n        this._rebuildContent(cellName, child);\n        if (child.postBuild !== undefined) {\n            child.postBuild();\n        }\n        this._debug.bringToTop();\n        return this;\n    };\n    Phaser2Grid.prototype.rebuildChild = function (child, cellName) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with \" + child);\n        }\n        if (cellName === undefined) {\n            cellName = cell.name;\n        }\n        this._removeContent(child);\n        this._rebuildContent(cellName, child);\n        return this;\n    };\n    Phaser2Grid.prototype._patchChildDestroy = function (child, cellName) {\n        var _this = this;\n        var childDestroy = child.destroy;\n        child.destroy = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            childDestroy.call.apply(childDestroy, __spread([child], args));\n            _this._removeContent(child);\n        };\n    };\n    Phaser2Grid.prototype._internalBuild = function (config) {\n        this.grid = new grid_core_1.Cell(config);\n        this._debug.clear();\n        this._debug.draw(this.grid);\n    };\n    Phaser2Grid.prototype._rebuildContent = function (cellName, child) {\n        var cell = this.grid.getCellByName(cellName);\n        if (cell === undefined) {\n            throw new Error(\"No cell found with name \" + cellName);\n        }\n        this._removeContent(child);\n        this._addContent(child, cell);\n        this._resetContent(child, cell);\n        this._adjustContent(child, cell);\n    };\n    Phaser2Grid.prototype._addContent = function (child, cell) {\n        cell.contents.push(child);\n    };\n    Phaser2Grid.prototype._removeContent = function (child) {\n        var cell = this.getCellByContent(child);\n        if (cell === undefined) {\n            return;\n        }\n        cell.contents.splice(cell.contents.indexOf(child), 1);\n    };\n    Phaser2Grid.prototype._adjustContent = function (child, cell) {\n        child instanceof Phaser2Grid ? this._adjustGridChild(child, cell) : this._adjustChild(child, cell);\n    };\n    Phaser2Grid.prototype._adjustGridChild = function (child, cell) {\n        var gridConfig = child.getGridConfig();\n        gridConfig.bounds = cell.area;\n        child.rebuild(gridConfig);\n    };\n    Phaser2Grid.prototype._adjustChild = function (child, cell) {\n        var childBounds = child.getBounds();\n        this._scaleContent(child, cell, childBounds);\n        this._positionContent(child, cell, childBounds);\n    };\n    Phaser2Grid.prototype._scaleContent = function (child, cell, childBounds) {\n        switch (cell.scale) {\n            case grid_core_1.CellScale.None:\n                break;\n            case grid_core_1.CellScale.Custom:\n                if (!child.resize) {\n                    throw new Error('resize() function does not implemented');\n                }\n                child.resize(cell.area.width, cell.area.height);\n                break;\n            default:\n                var childDimensions = {\n                    width: childBounds.width / child.worldScale.x,\n                    height: childBounds.height / child.worldScale.y,\n                };\n                var scale = grid_core_1.fit(childDimensions, cell.area, cell.scale);\n                child.scale.set(scale.x, scale.y);\n        }\n    };\n    Phaser2Grid.prototype._positionContent = function (child, cell, childBounds) {\n        var childDimensions = {\n            width: (childBounds.width / child.worldScale.x) * child.scale.x,\n            height: (childBounds.height / child.worldScale.y) * child.scale.y,\n        };\n        var pos = grid_core_1.align(childDimensions, cell.area, cell.align);\n        child.position.set(pos.x, pos.y);\n        child.x -= (childBounds.x / child.worldScale.x) * child.scale.x;\n        child.y -= (childBounds.y / child.worldScale.y) * child.scale.y;\n    };\n    Phaser2Grid.prototype._resetContent = function (child, cell) {\n        child.position.set(0, 0);\n        if (cell.scale !== grid_core_1.CellScale.None) {\n            child.scale.set(1, 1);\n        }\n        child.updateTransform();\n    };\n    return Phaser2Grid;\n}(Phaser.Group));\nexports.Phaser2Grid = Phaser2Grid;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grid_core_1 = require(\"@armathai/grid-core\");\nObject.defineProperty(exports, \"CellAlign\", { enumerable: true, get: function () { return grid_core_1.CellAlign; } });\nObject.defineProperty(exports, \"CellScale\", { enumerable: true, get: function () { return grid_core_1.CellScale; } });\nvar Phaser2Grid_1 = require(\"./Phaser2Grid\");\nObject.defineProperty(exports, \"Phaser2Grid\", { enumerable: true, get: function () { return Phaser2Grid_1.Phaser2Grid; } });\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatch = void 0;\nvar NinePatch = /** @class */ (function (_super) {\n    __extends(NinePatch, _super);\n    function NinePatch(game, x, y, key, frame, width, height, data) {\n        var _this = _super.call(this, game, x, y, key, frame) || this;\n        /**\n         * The eventual sizes of the container\n         */\n        _this.localWidth = 1;\n        _this.localHeight = 1;\n        _this.localWidth = width;\n        _this.localHeight = height;\n        _this.setPatchesData(key, frame, data);\n        _this.render();\n        return _this;\n    }\n    /**\n     * Changes the base texture the Game Object is using. The old texture is removed and the new one is referenced or fetched from the Cache.\n     *\n     * If your Game Object is using a frame from a texture atlas and you just wish to change to another frame, then see the `frame` or `frameName` properties instead.\n     *\n     * You should only use `loadTexture` if you want to replace the base texture entirely.\n     *\n     * Calling this method causes a WebGL texture update, so use sparingly or in low-intensity portions of your game, or if you know the new texture is already on the GPU.\n     *\n     * You can use the new const `Phaser.PENDING_ATLAS` as the texture key for any sprite.\n     * Doing this then sets the key to be the `frame` argument (the frame is set to zero).\n     *\n     * This allows you to create sprites using `load.image` during development, and then change them\n     * to use a Texture Atlas later in development by simply searching your code for 'PENDING_ATLAS'\n     * and swapping it to be the key of the atlas data.\n     *\n     * Note: You cannot use a RenderTexture as a texture for a TileSprite.\n     *\n     * @param key This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache Image entry, or an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n     * @param frame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.\n     * @param stopAnimation If an animation is already playing on this Sprite you can choose to stop it or let it carry on playing. - Default: true\n     */\n    NinePatch.prototype.loadTexture = function (key, frame, stopAnimation) {\n        this.baseFrameName = frame;\n        _super.prototype.loadTexture.call(this, key, frame, stopAnimation);\n        this.baseTexture = this.texture.baseTexture;\n        this.setBaseFrame(this.texture.frame);\n        if (this.texture) {\n            this.texture.destroy(false);\n        }\n        this.texture = new Phaser.RenderTexture(this.game, this.localWidth, this.localHeight);\n        if (this.patchesData) {\n            this.render();\n        }\n    };\n    Object.defineProperty(NinePatch.prototype, \"frameName\", {\n        /**\n         * Sets the current frame name of the texture being used to render this Game Object.\n         *\n         * To change the frame set `frameName` to the name of the new frame in the texture atlas you wish this Game Object to use,\n         * for example: `player.frameName = \"idle\"`.\n         *\n         * If the frame name given doesn't exist it will revert to the first frame found in the texture and throw a console warning.\n         *\n         * If you are using a sprite sheet then you should use the `frame` property instead.\n         *\n         * If you wish to fully replace the texture being used see `loadTexture`.\n         */\n        set: function (value) {\n            this.loadTexture(this.key, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"height\", {\n        /**\n         * The height of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localHeight;\n        },\n        set: function (value) {\n            this.resize(this.localWidth, value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NinePatch.prototype, \"width\", {\n        /**\n         * The width of the displayObjectContainer, setting this will actually modify the scale to achieve the value set\n         */\n        get: function () {\n            return this.localWidth;\n        },\n        set: function (value) {\n            this.resize(value, this.localHeight);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Set the size of the container, then update all the parts\n     *\n     * @param width\n     * @param height\n     */\n    NinePatch.prototype.resize = function (width, height) {\n        this.localWidth = Math.round(width);\n        this.localHeight = Math.round(height);\n        this.render();\n    };\n    /**\n     * Override the destroy to fix PIXI leaking CanvasBuffers\n     *\n     * @param args\n     */\n    NinePatch.prototype.destroy = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        _super.prototype.destroy.call(this, args[0]);\n        this.texture.destroy(true);\n        this.baseTexture = undefined;\n        this.baseFrame = undefined;\n    };\n    NinePatch.prototype.setPatchesData = function (key, frame, data) {\n        var game = this.game;\n        this.patchesData = data || game.cache.getNinePatch(key) || game.cache.getNinePatch(frame);\n        if (!this.patchesData) {\n            throw Error('Cannot crate NinePatch without patches data.');\n        }\n    };\n    NinePatch.prototype.setBaseFrame = function (f) {\n        this.baseFrame = f;\n    };\n    /**\n     * Redraw the the current texture to adjust for the new sizes;\n     */\n    NinePatch.prototype.render = function () {\n        var renderTexture = this.texture;\n        var _a = this, localWidth = _a.localWidth, localHeight = _a.localHeight;\n        // Set a new empty texture\n        renderTexture.resize(localWidth, localHeight, true);\n        var _b = this.patchesData, top = _b.top, _c = _b.left, left = _c === void 0 ? top : _c, _d = _b.right, right = _d === void 0 ? top : _d, _e = _b.bottom, bottom = _e === void 0 ? top : _e;\n        var _f = this.baseFrame, baseFrameWidth = _f.width, baseFrameHeight = _f.height;\n        // The positions we want from the base texture\n        var textureXs = [0, left, baseFrameWidth - right, baseFrameWidth];\n        var textureYs = [0, top, baseFrameHeight - bottom, baseFrameHeight];\n        // These are the positions we need the eventual texture to have\n        var finalXs = [0, left, localWidth - right, localWidth];\n        var finalYs = [0, top, localHeight - bottom, localHeight];\n        renderTexture.clear();\n        for (var yi = 0; yi < 3; yi++) {\n            for (var xi = 0; xi < 3; xi++) {\n                var s = this.createTexturePart(textureXs[xi], // x\n                textureYs[yi], // y\n                textureXs[xi + 1] - textureXs[xi], // width\n                textureYs[yi + 1] - textureYs[yi]);\n                s.width = finalXs[xi + 1] - finalXs[xi];\n                s.height = finalYs[yi + 1] - finalYs[yi];\n                renderTexture.renderXY(s, finalXs[xi], finalYs[yi]);\n            }\n        }\n    };\n    /**\n     * Here we create a sprite part for the container based on the given input\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     * @returns {PIXI.Sprite}\n     */\n    NinePatch.prototype.createTexturePart = function (x, y, width, height) {\n        var frame = new PIXI.Rectangle(this.baseFrame.x + this.texture.frame.x + x, this.baseFrame.y + this.texture.frame.y + y, Math.max(width, 1), Math.max(height, 1));\n        return new Phaser.Sprite(this.game, 0, 0, new PIXI.Texture(this.baseTexture, frame));\n    };\n    return NinePatch;\n}(Phaser.Sprite));\nexports.NinePatch = NinePatch;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NinePatchPlugin = void 0;\nvar NinePatch_1 = require(\"./NinePatch\");\nvar NinePatchPlugin = /** @class */ (function (_super) {\n    __extends(NinePatchPlugin, _super);\n    function NinePatchPlugin(game, parent) {\n        var _this = _super.call(this, game, parent) || this;\n        _this.addNinePatchCache();\n        _this.addNinePatchFactory();\n        _this.addNinePatchLoader();\n        return _this;\n    }\n    NinePatchPlugin.prototype.addNinePatchLoader = function () {\n        Phaser.Loader.prototype.ninePatch = function (key, url, top, left, right, bottom) {\n            var cacheData = {\n                top: top,\n            };\n            if (left) {\n                cacheData.left = left;\n            }\n            if (right) {\n                cacheData.right = right;\n            }\n            if (bottom) {\n                cacheData.bottom = bottom;\n            }\n            this.addToFileList('image', key, url);\n            this.game.cache.addNinePatch(key, cacheData);\n        };\n    };\n    /**\n     * Extends the GameObjectFactory prototype with the support of adding NinePatch. this allows us to add NinePatch methods to the game just like any other object:\n     * game.add.NinePatch();\n     */\n    NinePatchPlugin.prototype.addNinePatchFactory = function () {\n        Phaser.GameObjectFactory.prototype.ninePatch = function (x, y, key, frame, width, height, group) {\n            if (group === undefined) {\n                group = this.world;\n            }\n            var ninePatchObject = new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n            return group.add(ninePatchObject);\n        };\n        Phaser.GameObjectCreator.prototype.ninePatch = function (x, y, key, frame, width, height) {\n            return new NinePatch_1.NinePatch(this.game, x, y, key, frame, width, height);\n        };\n    };\n    /**\n     * Extends the Phaser.Cache prototype with NinePatch properties\n     */\n    NinePatchPlugin.prototype.addNinePatchCache = function () {\n        // Create the cache space\n        Phaser.Cache.prototype.ninePatch = {};\n        // Method for adding a NinePatch dict to the cache space\n        Phaser.Cache.prototype.addNinePatch = function (key, data) {\n            this.ninePatch[key] = data;\n        };\n        // Method for fetching a NinePatch dict from the cache space\n        Phaser.Cache.prototype.getNinePatch = function (key) {\n            var data = this.ninePatch[key];\n            return data;\n        };\n    };\n    return NinePatchPlugin;\n}(Phaser.Plugin));\nexports.NinePatchPlugin = NinePatchPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NinePatch_1 = require(\"./NinePatch\");\nObject.defineProperty(exports, \"NinePatch\", { enumerable: true, get: function () { return NinePatch_1.NinePatch; } });\nvar NinePatchPlugin_1 = require(\"./NinePatchPlugin\");\nObject.defineProperty(exports, \"NinePatchPlugin\", { enumerable: true, get: function () { return NinePatchPlugin_1.NinePatchPlugin; } });\n","/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction A(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||\"-\"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+\" \"+(a.f+\"00\")+\" 300px \"+I(a.c)}function I(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function J(a){return a.a+a.f}function H(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);K(a,\"loading\")}function L(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}K(a,\"inactive\")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function N(a){u(a.c,\"body\",a.a)}function O(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+I(a.c)+\";\"+(\"font-style:\"+H(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+\",serif\",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+\",sans-serif\",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G(\"serif\",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G(\"sans-serif\",J(this.a));a=\nO(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:\"serif\",C:\"sans-serif\"},S=null;function T(){if(null===S){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.m.a.offsetWidth;this.A=q();U(this)};\nfunction la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,J(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\")]);K(b,\"fontactive\",a);this.m=!0;na(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,J(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\"));w(b.f,d,e)}K(b,\"fontinactive\",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),K(a,\"active\")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};\nfunction qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c(\"wf\",x.c,J(x).toString(),\"loading\")]);K(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}\nra.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||\"https://fast.fonts.net/jsapi\")+\"/\"+d+\".js\"+(e?\"?v=\"+e:\"\"),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+\nd]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||\"\"}var ua=\"https://fonts.googleapis.com/css\";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction wa(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}\nvar za={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Aa={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Ba={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nCa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(\",\"),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k=\"\";else{k=n[2];k=null==k||\"\"==k?\"n\":Ba[k];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Aa[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);k=[k,n].join(\"\")}}else k=\"\";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},A(this.c,(this.f.api||\"https://f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};\"function\"===typeof define&&define.amd?define(function(){return Z}):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}